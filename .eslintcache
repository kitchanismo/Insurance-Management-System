[{"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\index.tsx":"1","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\App.tsx":"2","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\index.tsx":"3","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\contexts\\globalContext.tsx":"4","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\routes\\index.tsx":"5","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\nav\\index.tsx":"6","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\services\\useCustomTheme.tsx":"7","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\myDrawer\\index.tsx":"8","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\users\\new\\index.tsx":"9","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\myForm\\index.tsx":"10"},{"size":324,"mtime":1610876126787,"results":"11","hashOfConfig":"12"},{"size":1327,"mtime":1610956756366,"results":"13","hashOfConfig":"12"},{"size":539,"mtime":1610909857390,"results":"14","hashOfConfig":"12"},{"size":297,"mtime":1610905553900,"results":"15","hashOfConfig":"12"},{"size":347,"mtime":1610913766893,"results":"16","hashOfConfig":"12"},{"size":1210,"mtime":1610915741635,"results":"17","hashOfConfig":"12"},{"size":623,"mtime":1610912741808,"results":"18","hashOfConfig":"12"},{"size":1453,"mtime":1610908383197,"results":"19","hashOfConfig":"12"},{"size":2885,"mtime":1610971475133,"results":"20","hashOfConfig":"12"},{"size":5003,"mtime":1610971576550,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"csx4bj",{"filePath":"25","messages":"26","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\index.tsx",[],["47","48"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\App.tsx",["49","50","51","52"],"import React, { useContext, useState } from 'react'\nimport Nav from 'components/common/nav'\n\nimport Container from '@material-ui/core/Container'\nimport makeStyles from '@material-ui/core/styles/makeStyles'\nimport Typography from '@material-ui/core/Typography'\nimport Fab from '@material-ui/core/Fab'\nimport AddIcon from '@material-ui/icons/Add'\nimport GlobalContext, { GlobalProps } from 'providers/contexts/globalContext'\nimport MyDrawer from 'components/common/myDrawer'\nimport MyForm from 'components/common/myForm'\nimport Routes from 'components/routes'\n\nconst App: React.FC = (props) => {\n  const styles = useStyles()\n  const { setIsDark } = useContext<GlobalProps>(GlobalContext)\n\n  return (\n    <>\n      <Nav></Nav>\n      <Container maxWidth='xs' className={styles.container}>\n        <Routes></Routes>\n        <Fab\n          onClick={() => setIsDark((isDark) => !isDark)}\n          className={styles.fab}\n          color='secondary'\n          aria-label='add'\n        >\n          <AddIcon />\n        </Fab>\n      </Container>\n    </>\n  )\n}\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    padding: 20,\n    height: '100%',\n    backgroundColor: theme.palette.background.default,\n  },\n  fab: {\n    position: 'absolute',\n    bottom: theme.spacing(2),\n    right: theme.spacing(2),\n  },\n}))\n\nexport default App\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\contexts\\globalContext.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\routes\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\nav\\index.tsx",["53"],"import MyDrawer from 'components/common/myDrawer'\r\nimport * as React from 'react'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Menu from '@material-ui/icons/Menu'\r\nimport styles from './index.module.css'\r\nimport { Grid } from '@material-ui/core'\r\n\r\nconst Nav: React.FC = () => {\r\n  const [title, setTitle] = React.useState('Users')\r\n  const [isActive, setIsActive] = React.useState(false)\r\n\r\n  const onToggle = (title?: string) => {\r\n    setIsActive((isActive) => !isActive)\r\n    if (title) {\r\n      setTitle(title)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <AppBar position='sticky'>\r\n      <MyDrawer onToggle={onToggle} isActive={isActive}></MyDrawer>\r\n      <Toolbar>\r\n        <IconButton\r\n          onClick={() => onToggle()}\r\n          edge='start'\r\n          color='inherit'\r\n          aria-label='menu'\r\n        >\r\n          <Menu />\r\n        </IconButton>\r\n        <Grid container item justify='flex-end'>\r\n          <Typography variant='h6'>{title}</Typography>\r\n        </Grid>\r\n      </Toolbar>\r\n    </AppBar>\r\n  )\r\n}\r\n\r\nexport default Nav\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\services\\useCustomTheme.tsx",["54"],"import { GlobalProps } from './../contexts/globalContext'\r\nimport { createMuiTheme } from '@material-ui/core/styles'\r\nimport { ComponentProps, useState } from 'react'\r\n\r\nconst useCustomTheme = () => {\r\n  const [isDark, setIsDark] = useState(true)\r\n\r\n  const theme = createMuiTheme({\r\n    typography: {\r\n      fontFamily: ['Arial'].join(','),\r\n    },\r\n\r\n    palette: {\r\n      type: isDark ? 'dark' : 'light',\r\n      primary: {\r\n        main: '#e91e63',\r\n      },\r\n      secondary: {\r\n        main: '#ffc400',\r\n      },\r\n    },\r\n  })\r\n  return { theme, isDark, setIsDark } as GlobalProps\r\n}\r\n\r\nexport default useCustomTheme\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\myDrawer\\index.tsx",["55"],"import Drawer from '@material-ui/core/Drawer'\r\nimport List from '@material-ui/core/List'\r\nimport ArrowBack from '@material-ui/icons/ArrowBack'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport makeStyles from '@material-ui/core/styles/makeStyles'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport * as React from 'react'\r\nimport Grid from '@material-ui/core/Grid/Grid'\r\n\r\nexport interface MyDrawerProps {\r\n  isActive: boolean\r\n  onToggle: Function\r\n}\r\n\r\nconst MyDrawer: React.FC<MyDrawerProps> = (props) => {\r\n  const styles = useStyles()\r\n  const menus = ['Menu1', 'Menu2', 'Menu3', 'Menu4']\r\n\r\n  const list = () => (\r\n    <>\r\n      <List>\r\n        {menus.map((menu, index) => (\r\n          <ListItem button key={index}>\r\n            <ListItemText primary={menu} onClick={() => props.onToggle(menu)} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </>\r\n  )\r\n\r\n  return (\r\n    <Drawer anchor='left' open={props.isActive}>\r\n      <Grid container justify='flex-end'>\r\n        <IconButton\r\n          onClick={() => props.onToggle()}\r\n          edge='start'\r\n          color='inherit'\r\n          aria-label='menu'\r\n        >\r\n          <ArrowBack />\r\n        </IconButton>\r\n      </Grid>\r\n      {list()}\r\n    </Drawer>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  close: {\r\n    paddingTop: 5,\r\n    paddingRight: 5,\r\n  },\r\n}))\r\n\r\nexport default MyDrawer\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\users\\new\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\myForm\\index.tsx",["56","57","58"],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":1,"column":29,"nodeType":"65","messageId":"66","endLine":1,"endColumn":37},{"ruleId":"63","severity":1,"message":"67","line":6,"column":8,"nodeType":"65","messageId":"66","endLine":6,"endColumn":18},{"ruleId":"63","severity":1,"message":"68","line":10,"column":8,"nodeType":"65","messageId":"66","endLine":10,"endColumn":16},{"ruleId":"63","severity":1,"message":"69","line":11,"column":8,"nodeType":"65","messageId":"66","endLine":11,"endColumn":14},{"ruleId":"63","severity":1,"message":"70","line":8,"column":8,"nodeType":"65","messageId":"66","endLine":8,"endColumn":14},{"ruleId":"63","severity":1,"message":"71","line":3,"column":10,"nodeType":"65","messageId":"66","endLine":3,"endColumn":24},{"ruleId":"63","severity":1,"message":"72","line":17,"column":9,"nodeType":"65","messageId":"66","endLine":17,"endColumn":15},{"ruleId":"63","severity":1,"message":"73","line":1,"column":17,"nodeType":"65","messageId":"66","endLine":1,"endColumn":27},{"ruleId":"63","severity":1,"message":"74","line":45,"column":10,"nodeType":"65","messageId":"66","endLine":45,"endColumn":19},{"ruleId":"63","severity":1,"message":"75","line":47,"column":10,"nodeType":"65","messageId":"66","endLine":47,"endColumn":16},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Typography' is defined but never used.","'MyDrawer' is defined but never used.","'MyForm' is defined but never used.","'styles' is defined but never used.","'ComponentProps' is defined but never used.","'styles' is assigned a value but never used.","'useContext' is defined but never used.","'isDisable' is assigned a value but never used.","'errors' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]