[{"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\index.tsx":"1","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\App.tsx":"2","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\index.tsx":"3","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Layout\\index.tsx":"4","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyNav\\index.tsx":"5","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyAlert\\index.tsx":"6","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Layout\\Layout.tsx":"7","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyNav\\MyNav.tsx":"8","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyAlert\\MyAlert.tsx":"9","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyDrawer\\index.tsx":"10","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Dashboard\\index.tsx":"11","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyDrawer\\MyDrawer.tsx":"12","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Dashboard\\Dashboard.tsx":"13","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyCard\\index.tsx":"14","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\utils\\helper.ts":"15","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyForm\\index.tsx":"16","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyCard\\MyCard.tsx":"17","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyForm\\MyForm.tsx":"18","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\ViewEmployee\\index.ts":"19","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\index.tsx":"20","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\NewEmployee\\index.tsx":"21","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\EditEmployee\\index.tsx":"22","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\ViewEmployee\\ViewEmployee.tsx":"23","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\Employees.tsx":"24","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\NewEmployee\\NewEmployee.tsx":"25","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\EmployeeCard\\index.tsx":"26","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\EmployeeCard\\EmployeeCard.tsx":"27","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\EditEmployee\\EditEmployee.tsx":"28","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\GlobalProvider.tsx":"29","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\clients\\index.tsx":"30","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\clients\\Clients.tsx":"31","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MySearchField\\index.tsx":"32","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MySearchField\\MySearchField.tsx":"33","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\index.tsx":"34","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\Clients.tsx":"35","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\ClientCard\\index.tsx":"36","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\ClientCard\\ClientCard.tsx":"37","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyAvatar\\MyAvatar.tsx":"38","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyAvatar\\index.tsx":"39","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\ViewClient\\index.tsx":"40","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\ViewClient\\ViewClient.tsx":"41","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\index.tsx":"42","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\NewClient.tsx":"43","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\ClientStepOne.tsx":"44","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\ClientStepTwo.tsx":"45","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\saveEmployeeValidator.tsx":"46","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\saveProfileValidator.tsx":"47","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyStepper\\index.tsx":"48","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyStepper\\MyStepper.tsx":"49","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\ClientStepThree.tsx":"50","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\clientStepTwoValidator.tsx":"51","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\clientStepThreeValidator.tsx":"52","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\ClientProvicer.tsx":"53","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\hooks\\useGlobalState.tsx":"54","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\hooks\\useClientState.tsx":"55","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\api\\clientService.tsx":"56"},{"size":346,"mtime":1611444149721,"results":"57","hashOfConfig":"58"},{"size":489,"mtime":1612020386878,"results":"59","hashOfConfig":"58"},{"size":34,"mtime":1611444179233,"results":"60","hashOfConfig":"58"},{"size":26,"mtime":1611243048475,"results":"61","hashOfConfig":"58"},{"size":25,"mtime":1611243034734,"results":"62","hashOfConfig":"58"},{"size":831,"mtime":1612024561865,"results":"63","hashOfConfig":"58"},{"size":1747,"mtime":1611870497194,"results":"64","hashOfConfig":"58"},{"size":2409,"mtime":1612021086504,"results":"65","hashOfConfig":"58"},{"size":831,"mtime":1612021053513,"results":"66","hashOfConfig":"58"},{"size":28,"mtime":1611243022211,"results":"67","hashOfConfig":"58"},{"size":29,"mtime":1611242987395,"results":"68","hashOfConfig":"58"},{"size":2971,"mtime":1612021058899,"results":"69","hashOfConfig":"58"},{"size":388,"mtime":1612020965499,"results":"70","hashOfConfig":"58"},{"size":26,"mtime":1611243015451,"results":"71","hashOfConfig":"58"},{"size":1972,"mtime":1611918792397,"results":"72","hashOfConfig":"58"},{"size":26,"mtime":1611243030289,"results":"73","hashOfConfig":"58"},{"size":1039,"mtime":1612006168153,"results":"74","hashOfConfig":"58"},{"size":8253,"mtime":1612021097400,"results":"75","hashOfConfig":"58"},{"size":32,"mtime":1611441646075,"results":"76","hashOfConfig":"58"},{"size":29,"mtime":1611441516334,"results":"77","hashOfConfig":"58"},{"size":31,"mtime":1611441646075,"results":"78","hashOfConfig":"58"},{"size":32,"mtime":1611443972842,"results":"79","hashOfConfig":"58"},{"size":5757,"mtime":1612021029503,"results":"80","hashOfConfig":"58"},{"size":2392,"mtime":1612020989851,"results":"81","hashOfConfig":"58"},{"size":4288,"mtime":1612021036678,"results":"82","hashOfConfig":"58"},{"size":32,"mtime":1611441603701,"results":"83","hashOfConfig":"58"},{"size":2897,"mtime":1611639450073,"results":"84","hashOfConfig":"58"},{"size":4367,"mtime":1612021283774,"results":"85","hashOfConfig":"58"},{"size":1034,"mtime":1612021248842,"results":"86","hashOfConfig":"58"},{"size":27,"mtime":1611588252955,"results":"87","hashOfConfig":"58"},{"size":1430,"mtime":1611592088807,"results":"88","hashOfConfig":"58"},{"size":33,"mtime":1611587258405,"results":"89","hashOfConfig":"58"},{"size":1485,"mtime":1612005885528,"results":"90","hashOfConfig":"58"},{"size":27,"mtime":1611588252955,"results":"91","hashOfConfig":"58"},{"size":2071,"mtime":1612020844616,"results":"92","hashOfConfig":"58"},{"size":30,"mtime":1611591748681,"results":"93","hashOfConfig":"58"},{"size":2939,"mtime":1612020975535,"results":"94","hashOfConfig":"58"},{"size":382,"mtime":1611600266836,"results":"95","hashOfConfig":"58"},{"size":28,"mtime":1611599202475,"results":"96","hashOfConfig":"58"},{"size":30,"mtime":1611633798131,"results":"97","hashOfConfig":"58"},{"size":6143,"mtime":1612020944991,"results":"98","hashOfConfig":"58"},{"size":29,"mtime":1611639768066,"results":"99","hashOfConfig":"58"},{"size":4313,"mtime":1612020801966,"results":"100","hashOfConfig":"58"},{"size":3116,"mtime":1612021316384,"results":"101","hashOfConfig":"58"},{"size":4540,"mtime":1611870172906,"results":"102","hashOfConfig":"58"},{"size":559,"mtime":1611730907908,"results":"103","hashOfConfig":"58"},{"size":468,"mtime":1611823235322,"results":"104","hashOfConfig":"58"},{"size":29,"mtime":1611861679977,"results":"105","hashOfConfig":"58"},{"size":1370,"mtime":1611873835803,"results":"106","hashOfConfig":"58"},{"size":4188,"mtime":1611879593712,"results":"107","hashOfConfig":"58"},{"size":389,"mtime":1611869862713,"results":"108","hashOfConfig":"58"},{"size":469,"mtime":1611872540924,"results":"109","hashOfConfig":"58"},{"size":370,"mtime":1612021195443,"results":"110","hashOfConfig":"58"},{"size":1190,"mtime":1612020753351,"results":"111","hashOfConfig":"58"},{"size":1030,"mtime":1612020744714,"results":"112","hashOfConfig":"58"},{"size":3501,"mtime":1612018884321,"results":"113","hashOfConfig":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},"csx4bj",{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"116"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"116"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"116"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"116"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"116"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"116"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"116"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"116"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"116"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"116"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"116"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"214","messages":"215","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"116"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"116"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"116"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"116"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"116"},"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\index.tsx",[],["243","244"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\App.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Layout\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyNav\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyAlert\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Layout\\Layout.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyNav\\MyNav.tsx",["245"],"import * as React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport Typography from '@material-ui/core/Typography'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Menu from '@material-ui/icons/Menu'\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\nimport { MyDrawer } from 'components/Common/MyDrawer'\r\nimport { GlobalContext } from 'hooks/useGlobalState'\r\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger'\r\nimport Slide from '@material-ui/core/Slide'\r\n\r\nexport const Nav: React.FC = (props) => {\r\n  const [state, dispatch] = React.useContext(GlobalContext)!\r\n  const history = useHistory()\r\n  const [isActive, setIsActive] = React.useState(false)\r\n\r\n  const onToggle = (title?: string) => {\r\n    setIsActive((isActive) => !isActive)\r\n\r\n    if (!title) {\r\n      return\r\n    }\r\n    dispatch({ type: 'setTitle', payload: title })\r\n  }\r\n\r\n  interface Props {\r\n    window?: () => Window\r\n    children: React.ReactElement\r\n  }\r\n\r\n  function HideOnScroll(props: Props) {\r\n    const { children, window } = props\r\n    const trigger = useScrollTrigger({ target: window ? window() : undefined })\r\n\r\n    return (\r\n      <Slide appear={false} direction='down' in={!trigger}>\r\n        {children}\r\n      </Slide>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <HideOnScroll {...props}>\r\n      <AppBar\r\n        style={{\r\n          background:\r\n            'linear-gradient(to right, #9c27b0, #9c27b0, #9c27b0, #9c27b0, #9c27b0, #a721aa, #b119a4, #ba119e, #cb0090, #d80081, #e20672, #e91e63)',\r\n        }}\r\n      >\r\n        <MyDrawer onToggle={onToggle} isActive={isActive}></MyDrawer>\r\n        <Toolbar>\r\n          <Grid container xs={12} justify='center'>\r\n            <Grid container xs={1} sm={5} md={4} justify='flex-start'>\r\n              <IconButton\r\n                onClick={() => onToggle()}\r\n                edge='start'\r\n                color='inherit'\r\n                aria-label='menu'\r\n              >\r\n                <Menu />\r\n              </IconButton>\r\n            </Grid>\r\n            <Grid container xs={11} sm={5} md={4} justify='flex-end'>\r\n              <Typography style={{ paddingTop: 8 }} variant='h6'>\r\n                {state.title}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </HideOnScroll>\r\n  )\r\n}\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyAlert\\MyAlert.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyDrawer\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Dashboard\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyDrawer\\MyDrawer.tsx",["246"],"import React from 'react'\r\nimport Drawer from '@material-ui/core/Drawer'\r\nimport List from '@material-ui/core/List'\r\nimport ArrowBack from '@material-ui/icons/ArrowBack'\r\nimport EmployeesIcon from '@material-ui/icons/People'\r\nimport ClientIcon from '@material-ui/icons/SupervisedUserCircle'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport makeStyles from '@material-ui/core/styles/makeStyles'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport Grid from '@material-ui/core/Grid/Grid'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport DashboardIcon from '@material-ui/icons/Dashboard'\r\nimport { GlobalContext } from 'hooks/useGlobalState'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nexport interface MyDrawerProps {\r\n  isActive: boolean\r\n  onToggle: Function\r\n}\r\n\r\nexport const MyDrawer: React.FC<MyDrawerProps> = (props) => {\r\n  const styles = useStyles()\r\n\r\n  const history = useHistory()\r\n\r\n  const [state, dispatch] = React.useContext(GlobalContext)!\r\n\r\n  const menus = [\r\n    { name: 'Dashboard', path: '/dashboard', icon: <DashboardIcon /> },\r\n    {\r\n      name: 'Employee Management',\r\n      path: '/employees',\r\n      icon: <EmployeesIcon />,\r\n    },\r\n    { name: 'Client Management', path: '/clients', icon: <ClientIcon /> },\r\n  ]\r\n\r\n  const list = () => (\r\n    <>\r\n      <List>\r\n        {menus.map((menu, index) => (\r\n          <ListItem style={{ paddingLeft: 0 }} button key={index}>\r\n            <ListItemIcon style={{ paddingLeft: 20 }}>{menu.icon}</ListItemIcon>\r\n\r\n            <ListItemText\r\n              primary={menu.name}\r\n              onClick={() => {\r\n                props.onToggle(menu.name)\r\n                history.replace(menu.path)\r\n              }}\r\n            />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </>\r\n  )\r\n\r\n  return (\r\n    <Drawer anchor='left' open={props.isActive}>\r\n      <Grid container justify='flex-end'>\r\n        <IconButton\r\n          onClick={() => props.onToggle()}\r\n          edge='start'\r\n          color='inherit'\r\n          aria-label='menu'\r\n        >\r\n          <ArrowBack />\r\n        </IconButton>\r\n      </Grid>\r\n      {list()}\r\n      <Divider style={{ marginLeft: 10, marginRight: 10 }}></Divider>\r\n      <FormControlLabel\r\n        style={{ marginLeft: 10, marginTop: 10 }}\r\n        control={\r\n          <Switch\r\n            checked={state.isDark}\r\n            onChange={() => dispatch({ type: 'toggleTheme' })}\r\n            name='checkedA'\r\n            inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n          />\r\n        }\r\n        label='Dark Mode'\r\n      />\r\n    </Drawer>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  close: {\r\n    paddingTop: 5,\r\n    paddingRight: 5,\r\n  },\r\n}))\r\n\r\nexport default MyDrawer\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Dashboard\\Dashboard.tsx",["247","248"],"import { GlobalContext } from 'hooks/useGlobalState'\r\nimport React, { useContext, useEffect } from 'react'\r\n\r\nexport interface DashboardProps {}\r\n\r\nexport const Dashboard: React.SFC<DashboardProps> = () => {\r\n  const [state, dispatch] = useContext(GlobalContext)!\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'setTitle', payload: 'Dashboard' })\r\n  }, [])\r\n  return <h3>Dashboard</h3>\r\n}\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyCard\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\utils\\helper.ts",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyForm\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyCard\\MyCard.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyForm\\MyForm.tsx",["249"],"import React, { useContext } from 'react'\nimport Joi from 'joi'\nimport TextField from '@material-ui/core/TextField'\nimport Grid from '@material-ui/core/Grid'\nimport FormControl from '@material-ui/core/FormControl'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Button from '@material-ui/core/Button'\nimport IconButton from '@material-ui/core/IconButton'\nimport Radio from '@material-ui/core/Radio'\nimport DateFnsUtils from '@date-io/date-fns/build'\nimport FormHelperText from '@material-ui/core/FormHelperText'\nimport OutlinedInput from '@material-ui/core/OutlinedInput'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport Divider from '@material-ui/core/Divider'\nimport VisibilityOff from '@material-ui/icons/VisibilityOff'\nimport Visibility from '@material-ui/icons/Visibility'\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n} from '@material-ui/pickers'\nimport { GlobalContext } from 'hooks/useGlobalState'\n\nexport interface MyFormProps<T> {\n  state: [T, React.Dispatch<React.SetStateAction<T>>]\n  onSubmit: (data: T) => Promise<any>\n  validator?: {}\n  radioButtonDefaultValue?: string\n  children?: (props: RenderProps) => JSX.Element\n}\n\nexport interface InputProps {\n  value?: any\n  name: string\n  placeholder?: string\n  type?: string | 'text'\n  label?: string\n  isMultiline?: boolean\n  onTogglePassword?: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nexport interface OptionProps {\n  name?: string\n  value: any\n}\n\nexport interface SelectProps extends InputProps {\n  options: OptionProps[]\n  labelWidth?: number\n}\n\nexport interface RenderProps {\n  myInput: (input: InputProps) => JSX.Element\n  myInputPassword: (input: InputProps) => JSX.Element\n  myDateTimePicker: (input: InputProps) => JSX.Element\n  myButton: (text?: string) => JSX.Element\n  mySelect: (select: SelectProps) => JSX.Element\n  myRadio: (input: InputProps) => JSX.Element\n}\n\nexport function MyForm<T>(props: MyFormProps<T>) {\n  const [state, dispatch] = useContext(GlobalContext)!\n\n  const [data, setData] = props.state\n\n  const [isDisable, setIsDisable] = React.useState<boolean>(false)\n\n  const [selectedValue, setSelectedValue] = React.useState(\n    props.radioButtonDefaultValue ?? '',\n  )\n\n  const [errors, setErrors] = React.useState<any>(null)\n\n  const onValidate = (_data: T) => {\n    const schema = Joi.object(props.validator).options({\n      abortEarly: false,\n    })\n\n    const { error } = schema.validate(_data)\n\n    if (!error) return null\n\n    console.log(error)\n\n    const _errors: any = {}\n\n    error.details.forEach((item) => (_errors[item.path[0]] = item.message))\n\n    return _errors\n  }\n\n  const onChangeRadio = (e: any) => {\n    setSelectedValue(e.target.value)\n  }\n\n  const onSubmit = (e: any) => {\n    e.preventDefault()\n\n    const newData = { ...data } as any\n\n    for (let [key, value] of new FormData(e.target).entries()) {\n      newData[key] = value\n    }\n    const hasErrors = onValidate(newData)\n\n    setIsDisable(true)\n\n    if (hasErrors) {\n      dispatch({\n        type: 'setAlert',\n        payload: {\n          message: 'Fill out all the fields.',\n          type: 'error',\n        },\n      })\n      setErrors(hasErrors)\n      setIsDisable(false)\n      return\n    }\n\n    return props\n      .onSubmit(newData)\n      .then(() => {\n        setErrors({})\n        setIsDisable(false)\n      })\n      .catch((error) => {\n        setIsDisable(false)\n      })\n  }\n\n  const myInput = (input: InputProps) => {\n    const error = errors && errors[input.name]\n\n    return (\n      <Grid item xs={12} key={input.name}>\n        <TextField\n          defaultValue={input.value}\n          multiline={input.isMultiline}\n          fullWidth\n          name={input.name}\n          variant='outlined'\n          label={input.label}\n          type={input.type}\n          error={!!error}\n          helperText={error}\n        />\n      </Grid>\n    )\n  }\n\n  const myInputPassword = (input: InputProps) => {\n    const error = errors && errors[input.name]\n\n    return (\n      <Grid item xs={12} key={input.name}>\n        <FormControl fullWidth variant='outlined' error={!!error}>\n          <InputLabel htmlFor={input.label}>{input.label}</InputLabel>\n          <OutlinedInput\n            defaultValue={input.value}\n            id={input.name}\n            name={input.name}\n            type={input.type}\n            labelWidth={70}\n            endAdornment={\n              <InputAdornment position='end'>\n                <IconButton\n                  aria-label='toggle password visibility'\n                  onClick={() =>\n                    input.onTogglePassword?.call(\n                      null,\n                      (isVisible) => !isVisible,\n                    )\n                  }\n                >\n                  {input.type !== 'password' ? (\n                    <Visibility />\n                  ) : (\n                    <VisibilityOff />\n                  )}\n                </IconButton>\n              </InputAdornment>\n            }\n          />\n          <FormHelperText>{error}</FormHelperText>\n        </FormControl>\n      </Grid>\n    )\n  }\n\n  const myDateTimePicker = (input: InputProps) => {\n    return (\n      <Grid item xs={12} key={input.name}>\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <KeyboardDatePicker\n            fullWidth\n            inputVariant='outlined'\n            disableToolbar\n            variant='dialog'\n            format='MM/dd/yyyy'\n            margin='none'\n            label={input.label}\n            value={input.value ?? null}\n            onChange={(date) =>\n              setData({\n                ...data,\n                [input.name]: date?.toLocaleDateString(),\n              })\n            }\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n        </MuiPickersUtilsProvider>\n      </Grid>\n    )\n  }\n\n  const myRadio = (input: InputProps) => {\n    return (\n      <Radio\n        checked={selectedValue === input.value}\n        onChange={onChangeRadio}\n        value={input.value}\n        name={input.name}\n      />\n    )\n  }\n\n  const mySelect = (select: SelectProps) => {\n    const error = errors && errors[select.name ?? select.value]\n    return (\n      <Grid item xs={12} key={select.name ?? select.value}>\n        <FormControl fullWidth variant='outlined' error={!!error}>\n          <InputLabel id={select.label}>{select.label}</InputLabel>\n          <Select\n            labelId={select.label}\n            id={select.name ?? select.value}\n            name={select.name ?? select.value}\n            value={select.value || ''}\n            onChange={(e: any) => {\n              const { value } = e.target\n              if (error && value !== 'clear') {\n                const _errors = { ...errors }\n                delete _errors[select.name]\n                setErrors(_errors)\n              }\n              setData({\n                ...data,\n                [select.name]: value !== 'clear' ? value : '',\n              })\n            }}\n            labelWidth={select.labelWidth ?? 60}\n          >\n            {select.options.map((option) => (\n              <MenuItem value={option.value}>\n                {option.name ?? option.value}\n              </MenuItem>\n            ))}\n            <Divider style={{ marginLeft: 15, marginRight: 15 }}></Divider>\n            <MenuItem value='clear'>Clear</MenuItem>\n          </Select>\n          <FormHelperText>{error}</FormHelperText>\n        </FormControl>\n      </Grid>\n    )\n  }\n\n  const myButton = (text?: string) => {\n    return (\n      <Grid item xs={12}>\n        <Button\n          disabled={isDisable}\n          style={{ paddingTop: 15, paddingBottom: 15 }}\n          fullWidth\n          type='submit'\n          variant='contained'\n          color='primary'\n        >\n          {text ?? 'SUBMIT'}\n        </Button>\n      </Grid>\n    )\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      <Grid container spacing={2} direction='column'>\n        {props.children?.({\n          myInput,\n          myInputPassword,\n          mySelect,\n          myDateTimePicker,\n          myButton,\n          myRadio,\n        } as RenderProps)}\n      </Grid>\n    </form>\n  )\n}\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\ViewEmployee\\index.ts",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\NewEmployee\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\EditEmployee\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\ViewEmployee\\ViewEmployee.tsx",["250","251","252"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport Chip from '@material-ui/core/Chip'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport userIcon from 'assets/profile-user.svg'\r\nimport { calculateAge } from 'utils/helper'\r\n\r\nimport { MyCard } from 'components/Common/MyCard'\r\nimport Employee from 'models/employee'\r\nimport { GlobalContext } from 'hooks/useGlobalState'\r\n\r\nexport interface ViewUserProps {\r\n  title: string\r\n}\r\n\r\nexport const ViewEmployee: React.SFC<ViewUserProps> = (props) => {\r\n  const [_, dispatch] = useContext(GlobalContext)!\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'setTitle', payload: 'View Employee' })\r\n  }, [])\r\n\r\n  const history = useHistory()\r\n  const [employee, setEmployee] = useState<Employee>()\r\n\r\n  useEffect(() => {\r\n    setEmployee({\r\n      id: 1,\r\n      firstname: 'Firstname',\r\n      middlename: 'Middlename',\r\n      lastname: 'Lastname',\r\n      position: 'Branch Manager',\r\n      civil: 'Single',\r\n      gender: 'Male',\r\n      address: 'Somewhere ssdsdsd sdfdfdfdf sfdfdff',\r\n      contact: '09234545866',\r\n      status: 'active',\r\n      birthdate: new Date('10/03/1991'),\r\n    })\r\n  }, [])\r\n\r\n  const detail = (title: string, subtitle: any) => (\r\n    <Grid container alignItems='center' direction='column' item xs={6}>\r\n      <Typography component='h6' variant='h6'>\r\n        {title}\r\n      </Typography>\r\n      <Typography variant='subtitle1' color='textSecondary'>\r\n        {subtitle}\r\n      </Typography>\r\n    </Grid>\r\n  )\r\n\r\n  return (\r\n    <Grid container xs={12}>\r\n      {employee && (\r\n        <>\r\n          <MyCard title='Employee Details'>\r\n            <CardContent>\r\n              <Grid container xs={12} justify='space-between'>\r\n                <Grid\r\n                  style={{ paddingLeft: 10 }}\r\n                  container\r\n                  direction='column'\r\n                  item\r\n                  xs={7}\r\n                  justify='flex-start'\r\n                >\r\n                  <Typography component='h6' variant='h6'>\r\n                    {`${employee.lastname}, ${employee.firstname} ${employee.middlename}`}\r\n                  </Typography>\r\n                  <Typography variant='subtitle1' color='textSecondary'>\r\n                    {employee.position}\r\n                  </Typography>\r\n                  <Grid item xs={1}>\r\n                    <Chip\r\n                      style={{ marginTop: 5 }}\r\n                      size='small'\r\n                      label={employee.status}\r\n                      variant='default'\r\n                      color={\r\n                        employee.status !== 'active' ? 'secondary' : 'primary'\r\n                      }\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid\r\n                  container\r\n                  item\r\n                  xs={5}\r\n                  justify='center'\r\n                  alignItems='center'\r\n                >\r\n                  <IconButton aria-label='play/pause'>\r\n                    <img\r\n                      style={{ width: 100 }}\r\n                      src={userIcon}\r\n                      alt='User Logo'\r\n                    />\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n            <Divider style={{ marginLeft: 20, marginRight: 20 }}></Divider>\r\n            <CardContent>\r\n              <Grid spacing={1} container xs={12} style={{ paddingLeft: 10 }}>\r\n                {detail('Gender', employee.gender)}\r\n                {detail('Civil Status', employee.civil)}\r\n                {detail('Contact', employee.contact)}\r\n                {detail(\r\n                  'Age',\r\n                  employee.birthdate ? calculateAge(employee.birthdate) : 'N/A',\r\n                )}\r\n                {\r\n                  <Grid\r\n                    container\r\n                    alignItems='center'\r\n                    direction='column'\r\n                    item\r\n                    xs={12}\r\n                  >\r\n                    <Typography component='h6' variant='h6'>\r\n                      Address\r\n                    </Typography>\r\n                    <Typography variant='subtitle1' color='textSecondary'>\r\n                      {employee.address}\r\n                    </Typography>\r\n                  </Grid>\r\n                }\r\n              </Grid>\r\n            </CardContent>\r\n          </MyCard>\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 10, paddingBottom: 5 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.goBack()}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.push('/employees/edit/' + employee.id)}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='primary'\r\n              >\r\n                EDIT\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </Grid>\r\n  )\r\n}\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\Employees.tsx",["253","254"],"import React, { useContext, useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Fab from '@material-ui/core/Fab'\r\nimport AddIcon from '@material-ui/icons/Add'\r\n\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\r\n\r\nimport Employee from 'models/employee'\r\nimport { EmployeeCard } from './EmployeeCard'\r\nimport { MySearchField } from 'components/Common/MySearchField'\r\nimport { GlobalContext } from 'hooks/useGlobalState'\r\n\r\nexport interface EmployeesProps {}\r\n\r\nexport const Employees: React.SFC<EmployeesProps> = () => {\r\n  const [state, dispatch] = useContext(GlobalContext)!\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'setTitle', payload: 'Employee Management' })\r\n  }, [])\r\n\r\n  const employees: Partial<Employee>[] = [\r\n    {\r\n      id: 1,\r\n      firstname: 'Ftname',\r\n      middlename: 'Mee',\r\n      lastname: 'ame',\r\n      position: 'Agency Manager',\r\n      status: 'deactive',\r\n    },\r\n    {\r\n      id: 2,\r\n      firstname: 'Firstname',\r\n      middlename: 'Middlename',\r\n      lastname: 'Lastname',\r\n      position: 'Sales Agent',\r\n      status: 'active',\r\n    },\r\n    {\r\n      id: 3,\r\n      firstname: 'Firstname',\r\n      middlename: 'Middlename',\r\n      lastname: 'Lastname',\r\n      position: 'Branch Manager',\r\n      status: 'deceased',\r\n    },\r\n\r\n    {\r\n      id: 4,\r\n      firstname: 'Firstname',\r\n      middlename: 'Middlename',\r\n      lastname: 'Lastname',\r\n      position: 'Supervisor',\r\n      status: 'active',\r\n    },\r\n  ]\r\n\r\n  const history = useHistory()\r\n\r\n  const styles = useStyles()\r\n  return (\r\n    <>\r\n      <MySearchField style={{ marginBottom: 15 }} />\r\n\r\n      <Grid\r\n        container\r\n        spacing={2}\r\n        direction='column'\r\n        justify='flex-start'\r\n        alignItems='center'\r\n      >\r\n        {employees.map((employee) => (\r\n          <Grid key={employee.id} item xs={12}>\r\n            <EmployeeCard employee={employee} />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n\r\n      <Fab\r\n        onClick={() => history.push('/employees/new')}\r\n        className={styles.fab}\r\n        color='primary'\r\n        aria-label='add'\r\n      >\r\n        <AddIcon />\r\n      </Fab>\r\n    </>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    fab: {\r\n      position: 'fixed',\r\n      bottom: 20,\r\n      right: 20,\r\n    },\r\n  }),\r\n)\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\NewEmployee\\NewEmployee.tsx",["255","256","257"],"import React, { useContext } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { GlobalContext } from 'hooks/useGlobalState'\r\nimport validator from '../../../../validators/saveEmployeeValidator'\r\nimport { MyForm, MyFormProps, InputProps } from 'components/Common/MyForm'\r\nimport Employee from 'models/employee'\r\nimport { EmployeesProps } from '../Employees'\r\n\r\nexport interface NewUserProps {}\r\n\r\nexport const NewEmployee: React.SFC<NewUserProps> = () => {\r\n  const [_, dispatch] = useContext(GlobalContext)!\r\n\r\n  const history = useHistory()\r\n\r\n  const [employee, setEmployee] = React.useState<Employee>({\r\n    firstname: 'dfdf',\r\n    middlename: '',\r\n    lastname: '',\r\n    address: '',\r\n    contact: '',\r\n  })\r\n\r\n  const onSubmit = async (data: Employee) => {\r\n    console.log(data)\r\n    dispatch({\r\n      type: 'setAlert',\r\n      payload: { message: 'Successfully added', type: 'success' },\r\n    })\r\n    return Promise.resolve()\r\n  }\r\n\r\n  const formProps: MyFormProps<Employee> = {\r\n    state: [employee, setEmployee],\r\n    onSubmit,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myInput, mySelect, myDateTimePicker, myButton }) => (\r\n        <>\r\n          {myInput({\r\n            label: 'Firstname',\r\n            value: employee.firstname,\r\n            name: 'firstname',\r\n          })}\r\n          {myInput({\r\n            label: 'Middlename',\r\n            value: employee.middlename,\r\n            name: 'middlename',\r\n          })}\r\n          {myInput({\r\n            label: 'Lastname',\r\n            value: employee.lastname,\r\n            name: 'lastname',\r\n          })}\r\n          {myInput({\r\n            label: 'Contact Number',\r\n            value: employee.contact,\r\n            name: 'contact',\r\n          })}\r\n\r\n          {myInput({\r\n            label: 'Address',\r\n            value: employee.address,\r\n            name: 'address',\r\n            isMultiline: true,\r\n          })}\r\n          {mySelect({\r\n            label: 'Gender',\r\n            value: employee.gender,\r\n            name: 'gender',\r\n            options: [\r\n              { value: 'Male' },\r\n              { value: 'Female' },\r\n              { value: 'Other' },\r\n            ],\r\n          })}\r\n          {mySelect({\r\n            label: 'Civil Status',\r\n            value: employee.civil,\r\n            name: 'civil',\r\n            labelWidth: 80,\r\n            options: [\r\n              { value: 'Single' },\r\n              { value: 'Married' },\r\n              { value: 'Widowed' },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Position',\r\n            value: employee.position,\r\n            name: 'position',\r\n            labelWidth: 55,\r\n            options: [\r\n              { value: 'Sales Agent' },\r\n              { value: 'Branch Manager' },\r\n              { value: 'Agency Manager' },\r\n              { value: 'Supervisor' },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Branch',\r\n            value: employee.branch,\r\n            name: 'branch',\r\n            labelWidth: 55,\r\n            options: [{ value: 'Cebu' }, { value: 'Manila' }],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Team',\r\n            value: employee.team,\r\n            name: 'team',\r\n            labelWidth: 40,\r\n            options: [{ value: 'ABC' }],\r\n          })}\r\n\r\n          {myDateTimePicker({\r\n            label: 'Birthdate',\r\n            value: employee.birthdate,\r\n            name: 'birthdate',\r\n          })}\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 10, paddingBottom: 5 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.goBack()}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton()}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\EmployeeCard\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\EmployeeCard\\EmployeeCard.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\EditEmployee\\EditEmployee.tsx",["258"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\GlobalProvider.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\clients\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\clients\\Clients.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MySearchField\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MySearchField\\MySearchField.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\Clients.tsx",["259","260","261"],"import { MySearchField } from 'components/Common/MySearchField'\r\nimport Client from 'models/client'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\r\n\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Fab from '@material-ui/core/Fab'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { ClientCard } from './ClientCard'\r\nimport { useContext, useEffect } from 'react'\r\nimport { getClients } from 'api/clientService'\r\nimport { ClientContext } from 'hooks/useClientState'\r\nimport { GlobalContext } from 'hooks/useGlobalState'\r\n\r\nexport interface ClientsProps {}\r\n\r\nconst Clients: React.SFC<ClientsProps> = () => {\r\n  const [clientState, clientDispatch] = useContext(ClientContext)!\r\n\r\n  const [_, globalDispatch] = useContext(GlobalContext)!\r\n\r\n  const styles = useStyles()\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    globalDispatch({ type: 'setTitle', payload: 'Client Management' })\r\n    clientDispatch({ type: 'setIsLoading', payload: true })\r\n    getClients().then((clients) => {\r\n      clientDispatch({ type: 'onLoad', payload: clients })\r\n    })\r\n  }, [])\r\n\r\n  if (clientState.isLoading && !clientState.clients.length)\r\n    return <h4>Loading...</h4>\r\n\r\n  return (\r\n    <>\r\n      <MySearchField style={{ marginBottom: 15 }} />\r\n      <Grid\r\n        container\r\n        spacing={2}\r\n        direction='column'\r\n        justify='flex-start'\r\n        alignItems='center'\r\n      >\r\n        {clientState.clients.map((client) => (\r\n          <Grid key={client.id} item xs={12}>\r\n            <ClientCard key={client.id} client={client} />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n\r\n      <Fab\r\n        onClick={() => history.push('/clients/new')}\r\n        className={styles.fab}\r\n        color='primary'\r\n        aria-label='add'\r\n      >\r\n        <AddIcon />\r\n      </Fab>\r\n    </>\r\n  )\r\n}\r\n\r\nexport { Clients }\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    fab: {\r\n      position: 'fixed',\r\n      bottom: 20,\r\n      right: 20,\r\n    },\r\n  }),\r\n)\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\ClientCard\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\ClientCard\\ClientCard.tsx",["262","263"],"import { MyCard } from 'components/Common/MyCard'\r\nimport React from 'react'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport ViewIcon from '@material-ui/icons/RemoveRedEye'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport Chip from '@material-ui/core/Chip'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport userIcon from 'assets/profile-user.svg'\r\nimport Client from 'models/client'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { MyAvatar } from 'components/Common/MyAvatar'\r\nimport { computeTotalPaid, computeTotalPay } from 'api/clientService'\r\n\r\nexport interface ClientCardProps {\r\n  client: Client\r\n}\r\n\r\nexport const ClientCard: React.SFC<ClientCardProps> = ({ client }) => {\r\n  const history = useHistory()\r\n\r\n  return (\r\n    <MyCard title={client.code} style={{ paddingBottom: 5 }}>\r\n      <CardContent>\r\n        <Grid container xs={12} justify='space-between'>\r\n          <Grid\r\n            style={{ paddingLeft: 10 }}\r\n            container\r\n            item\r\n            direction='column'\r\n            xs={7}\r\n            justify='flex-start'\r\n          >\r\n            <Typography component='h6' variant='h6'>\r\n              {`${client.lastname}, ${client.firstname} ${client.middlename}`}\r\n            </Typography>\r\n            <Typography variant='subtitle1' color='textSecondary'>\r\n              {client.plan + ' - ' + client.payment_mode}\r\n            </Typography>\r\n            <Grid item xs={1}>\r\n              <Chip\r\n                style={{ marginTop: 5 }}\r\n                size='small'\r\n                label={\r\n                  computeTotalPaid(client) +\r\n                  '/' +\r\n                  computeTotalPay(client) +\r\n                  ' Paid'\r\n                }\r\n                variant='default'\r\n                color='secondary'\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item xs={5} justify='center' alignItems='center'>\r\n            <MyAvatar onClick={() => history.push('/clients/' + client.id)} />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n\r\n      <Divider style={{ marginLeft: 20, marginRight: 20 }}></Divider>\r\n      <Grid container xs={12} justify='space-evenly'>\r\n        <IconButton\r\n          onClick={() => history.push('/clients/' + client.id)}\r\n          aria-label='view'\r\n        >\r\n          <ViewIcon />\r\n        </IconButton>\r\n        <IconButton\r\n          onClick={() => history.push('/clients/edit/' + client.id)}\r\n          aria-label='edit'\r\n        >\r\n          <EditIcon />\r\n        </IconButton>\r\n        <IconButton aria-label='archive'>\r\n          <DeleteIcon />\r\n        </IconButton>\r\n      </Grid>\r\n    </MyCard>\r\n  )\r\n}\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyAvatar\\MyAvatar.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyAvatar\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\ViewClient\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\ViewClient\\ViewClient.tsx",["264","265"],"import React, { useState, useEffect, useContext } from 'react'\r\n\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Chip from '@material-ui/core/Chip'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport userIcon from 'assets/profile-user.svg'\r\nimport { calculateAge } from 'utils/helper'\r\nimport { MyCard } from 'components/Common/MyCard'\r\nimport Client from 'models/client'\r\nimport { ClientContext } from 'hooks/useClientState'\r\nimport { GlobalContext } from 'hooks/useGlobalState'\r\n\r\nimport { getClient, computeTotalPaid, computeTotalPay } from 'api/clientService'\r\n\r\nexport interface ViewClientProps {}\r\n\r\nexport const ViewClient: React.SFC<ViewClientProps> = () => {\r\n  const history = useHistory()\r\n\r\n  const { id } = useParams<{ id: string }>()\r\n\r\n  const [_, globalDispatch] = useContext(GlobalContext)!\r\n\r\n  const [clientState] = useContext(ClientContext)!\r\n\r\n  const [client, setClient] = useState<Client>()\r\n\r\n  useEffect(() => {\r\n    globalDispatch({ type: 'setTitle', payload: 'Client Details' })\r\n    getClient(clientState.clients, +id).then((client) => setClient(client))\r\n  }, [])\r\n\r\n  const detail = (title: string, subtitle: any) => (\r\n    <Grid container alignItems='center' direction='column' item xs={6}>\r\n      <Typography component='h6' variant='h6'>\r\n        {title}\r\n      </Typography>\r\n      <Typography variant='subtitle1' color='textSecondary'>\r\n        {subtitle}\r\n      </Typography>\r\n    </Grid>\r\n  )\r\n\r\n  return (\r\n    <Grid container xs={12}>\r\n      {client && (\r\n        <>\r\n          <MyCard title={client.code}>\r\n            <CardContent>\r\n              <Grid container xs={12} justify='space-between'>\r\n                <Grid\r\n                  style={{ paddingLeft: 10 }}\r\n                  container\r\n                  direction='column'\r\n                  item\r\n                  xs={7}\r\n                  justify='flex-start'\r\n                >\r\n                  <Typography component='h6' variant='h6'>\r\n                    {`${client.lastname}, ${client.firstname} ${client.middlename}`}\r\n                  </Typography>\r\n                  <Typography variant='subtitle1' color='textSecondary'>\r\n                    {client.plan + ' - ' + client.payment_mode}\r\n                  </Typography>\r\n\r\n                  <Grid item xs={1}>\r\n                    <Chip\r\n                      style={{ marginTop: 5 }}\r\n                      size='small'\r\n                      label={\r\n                        computeTotalPaid(client) +\r\n                        '/' +\r\n                        computeTotalPay(client) +\r\n                        ' Paid'\r\n                      }\r\n                      variant='default'\r\n                      color='secondary'\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid\r\n                  container\r\n                  item\r\n                  xs={5}\r\n                  justify='center'\r\n                  alignItems='center'\r\n                >\r\n                  <IconButton aria-label='play/pause'>\r\n                    <img\r\n                      style={{ width: 100 }}\r\n                      src={userIcon}\r\n                      alt='User Logo'\r\n                    />\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n            <Divider style={{ marginLeft: 20, marginRight: 20 }}></Divider>\r\n            <CardContent>\r\n              <Grid spacing={1} container xs={12} style={{ paddingLeft: 10 }}>\r\n                {detail('Period ', client.payment_period)}\r\n                {detail('Balance', 'Php ' + client.balance)}\r\n                {detail('Branch', client.branch)}\r\n                {detail('Ended', client.end_date?.toLocaleDateString())}\r\n              </Grid>\r\n            </CardContent>\r\n            <Divider style={{ marginLeft: 20, marginRight: 20 }}></Divider>\r\n            <CardContent>\r\n              <Grid spacing={1} container xs={12} style={{ paddingLeft: 10 }}>\r\n                {detail('Gender', client.gender)}\r\n                {detail('Civil Status', client.civil)}\r\n                {detail('Contact', client.contact)}\r\n                {detail(\r\n                  'Age',\r\n                  client.birthdate ? calculateAge(client.birthdate) : 'N/A',\r\n                )}\r\n\r\n                <Grid\r\n                  container\r\n                  alignItems='center'\r\n                  direction='column'\r\n                  item\r\n                  xs={12}\r\n                >\r\n                  <Typography component='h6' variant='h6'>\r\n                    Address\r\n                  </Typography>\r\n                  <Typography variant='subtitle1' color='textSecondary'>\r\n                    {client.address}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n          </MyCard>\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 10, paddingBottom: 5 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.goBack()}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.push('/clients/edit/' + client.id)}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='primary'\r\n              >\r\n                EDIT\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default ViewClient\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\NewClient.tsx",["266","267"],"import React, { useContext, useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Profile from 'models/profile'\r\nimport Client from 'models/client'\r\nimport Commissioner from 'models/commissioner'\r\nimport { ClientStepOne } from './ClientStepOne'\r\nimport { ClientStepTwo } from './ClientStepTwo'\r\nimport { MyStepper, useStepper } from 'components/Common/MyStepper'\r\nimport { ClientStepThree } from './ClientStepThree'\r\nimport Scroll from 'react-scroll'\r\nimport { GlobalContext } from 'hooks/useGlobalState'\r\n\r\nexport interface NewClientProps {}\r\n\r\nexport const NewClient: React.SFC<NewClientProps> = () => {\r\n  const [state, dispatch] = useContext(GlobalContext)!\r\n\r\n  const scroll = Scroll.animateScroll\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'setTitle', payload: 'Client Registration' })\r\n    scroll.scrollToTop({ duration: 500 })\r\n  }, [])\r\n\r\n  const history = useHistory()\r\n\r\n  const stepper = useStepper([\r\n    'Create Profile Account',\r\n    'Select All Commissioners',\r\n    'Select Plan And Payment',\r\n  ])\r\n\r\n  const [profile, setProfile] = React.useState<Profile>({})\r\n\r\n  const [commissioner, setCommissioner] = React.useState<Commissioner>({\r\n    position: 'sales_agent',\r\n  })\r\n\r\n  const [client, setClient] = React.useState<Client>({})\r\n\r\n  const onNextOne = async (profile: Profile) => {\r\n    scroll.scrollToTop({ duration: 500 })\r\n    console.log('profile', profile)\r\n    setProfile(profile)\r\n    stepper.handleNext()\r\n  }\r\n\r\n  const onNextTwo = async (commissioner: Commissioner) => {\r\n    const insured_employee = commissioner[commissioner.position] ?? ''\r\n\r\n    if (!insured_employee) {\r\n      dispatch({\r\n        type: 'setAlert',\r\n        payload: {\r\n          message:\r\n            'Sales Agent is not present! Please select another employee.',\r\n          type: 'error',\r\n        },\r\n      })\r\n\r\n      return\r\n    }\r\n\r\n    scroll.scrollToTop({ duration: 500 })\r\n\r\n    setClient((client) => ({ ...client, insured_employee }))\r\n\r\n    setCommissioner(commissioner)\r\n\r\n    stepper.handleNext()\r\n\r\n    console.log(commissioner)\r\n  }\r\n\r\n  const onNextThree = async (client: Client) => {\r\n    scroll.scrollToTop({ duration: 500 })\r\n\r\n    setClient(client)\r\n\r\n    stepper.handleNext()\r\n\r\n    console.log({\r\n      client: { ...profile, ...client },\r\n      commissioner,\r\n    })\r\n  }\r\n\r\n  const onAddNew = () => {\r\n    stepper.handleReset()\r\n    setProfile({})\r\n    setCommissioner({\r\n      position: 'sales_agent',\r\n    })\r\n    setClient({})\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <MyStepper {...stepper} />\r\n      {stepper.activeStep === 0 && (\r\n        <ClientStepOne onNext={onNextOne} state={[profile, setProfile]} />\r\n      )}\r\n      {stepper.activeStep === 1 && (\r\n        <ClientStepTwo\r\n          onBack={() => stepper.handleBack()}\r\n          onNext={onNextTwo}\r\n          state={[commissioner, setCommissioner]}\r\n        />\r\n      )}\r\n      {stepper.activeStep === 2 && (\r\n        <ClientStepThree\r\n          onBack={() => stepper.handleBack()}\r\n          onNext={onNextThree}\r\n          state={[client, setClient]}\r\n        />\r\n      )}\r\n\r\n      {stepper.activeStep === 3 && (\r\n        <Grid container xs={12} direction='column' alignItems='center'>\r\n          <Typography component='h6' variant='subtitle1'>\r\n            All Step Completed!\r\n          </Typography>\r\n          <Grid spacing={2} item container xs={12}>\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.replace('/clients')}\r\n                style={{ paddingTop: 15, paddingBottom: 15, marginTop: 10 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                CLIENT LIST\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={onAddNew}\r\n                style={{ paddingTop: 15, paddingBottom: 15, marginTop: 10 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='primary'\r\n              >\r\n                ADD NEW\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\ClientStepOne.tsx",["268"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\ClientStepTwo.tsx",["269","270","271"],"import React from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { MyForm, MyFormProps } from 'components/Common/MyForm'\r\nimport Client from 'models/client'\r\nimport Commissioner from 'models/commissioner'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport validator from 'validators/clientStepTwoValidator'\r\n\r\nexport interface ClientStepTwoProps {\r\n  onBack: () => void\r\n  onNext: (commissioner: Commissioner) => Promise<void>\r\n  state: [Commissioner, React.Dispatch<React.SetStateAction<Commissioner>>]\r\n}\r\n\r\nexport const ClientStepTwo: React.SFC<ClientStepTwoProps> = ({\r\n  state: [commissioner, setCommissioner],\r\n  onBack,\r\n  onNext,\r\n}) => {\r\n  const formProps: MyFormProps<Commissioner> = {\r\n    state: [commissioner, setCommissioner],\r\n    onSubmit: onNext,\r\n    validator,\r\n    radioButtonDefaultValue: commissioner.position,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myRadio, mySelect, myButton }) => (\r\n        <>\r\n          <Grid\r\n            style={{ paddingLeft: 10, marginTop: 5 }}\r\n            spacing={2}\r\n            container\r\n            xs={12}\r\n          >\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Branch Manager',\r\n                  value: commissioner.branch_manager,\r\n                  name: 'branch_manager',\r\n                  labelWidth: 120,\r\n                  options: [\r\n                    { value: 1, name: 'John Doe' },\r\n                    { value: 2, name: 'John Smith' },\r\n                  ],\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'branch_manager', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Agency Manager',\r\n                  value: commissioner.agency_manager,\r\n                  name: 'agency_manager',\r\n                  labelWidth: 120,\r\n                  options: [\r\n                    { value: 3, name: 'John Joe' },\r\n                    { value: 4, name: 'John Witch' },\r\n                  ],\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'agency_manager', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Supervisor',\r\n                  value: commissioner.supervisor,\r\n                  name: 'supervisor',\r\n                  labelWidth: 80,\r\n                  options: [\r\n                    { value: 5, name: 'John Doex' },\r\n                    { value: 6, name: 'John Smithx' },\r\n                  ],\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'supervisor', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Sales Agent',\r\n                  value: commissioner.sales_agent,\r\n                  name: 'sales_agent',\r\n                  labelWidth: 85,\r\n                  options: [\r\n                    { value: 7, name: 'John Doex' },\r\n                    { value: 8, name: 'John Smithc' },\r\n                  ],\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'sales_agent', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n          </Grid>\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 15, paddingBottom: 15 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => onBack()}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton('NEXT')}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\saveEmployeeValidator.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\saveProfileValidator.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyStepper\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyStepper\\MyStepper.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\ClientStepThree.tsx",["272"],"import React from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { MyForm, MyFormProps } from 'components/Common/MyForm'\r\nimport Client from 'models/client'\r\nimport Commissioner from 'models/commissioner'\r\nimport validator from 'validators/clientStepThreeValidator'\r\n\r\nexport interface ClientStepTwoProps {\r\n  onBack: () => void\r\n  onNext: (client: Client) => Promise<void>\r\n  state: [Client, React.Dispatch<React.SetStateAction<Client>>]\r\n}\r\n\r\nexport const ClientStepThree: React.SFC<ClientStepTwoProps> = ({\r\n  state: [client, setClient],\r\n  onBack,\r\n  onNext,\r\n}) => {\r\n  const formProps: MyFormProps<Client> = {\r\n    state: [client, setClient],\r\n    onSubmit: onNext,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myInput, mySelect, myButton }) => (\r\n        <>\r\n          {mySelect({\r\n            label: 'Plan',\r\n            value: client.plan,\r\n            name: 'plan',\r\n            labelWidth: 30,\r\n            options: [\r\n              { value: 'Plan 1' },\r\n              { value: 'Plan 2' },\r\n              { value: 'Plan 3' },\r\n            ],\r\n          })}\r\n          {mySelect({\r\n            label: 'Payment Mode',\r\n            value: client.payment_mode,\r\n            name: 'payment_mode',\r\n            labelWidth: 110,\r\n            options: [{ value: 'Installment' }, { value: 'Fullpayment' }],\r\n          })}\r\n\r\n          {client.payment_mode && client.plan && (\r\n            <>\r\n              {client.payment_mode === 'Installment' &&\r\n                mySelect({\r\n                  label: 'Payment Period',\r\n                  value: client.payment_period,\r\n                  name: 'payment_period',\r\n                  labelWidth: 120,\r\n                  options: [\r\n                    { value: 'Monthly' },\r\n                    { value: 'Quarterly' },\r\n                    { value: 'Semi-Annually' },\r\n                    { value: 'Annually' },\r\n                  ],\r\n                })}\r\n\r\n              <Grid\r\n                xs={12}\r\n                style={{\r\n                  marginBottom: 10,\r\n                  marginTop: 10,\r\n                  paddingRight: 8,\r\n                  paddingLeft: 8,\r\n                }}\r\n                direction='column'\r\n              >\r\n                {myInput({\r\n                  label: 'OR Number',\r\n                  name: 'or_number',\r\n                })}\r\n              </Grid>\r\n\r\n              <Grid style={{ paddingLeft: 10 }} direction='column'>\r\n                {client.payment_period &&\r\n                  client.payment_mode === 'Installment' && (\r\n                    <>\r\n                      <Typography component='h6' variant='subtitle1'>\r\n                        Downpayment\r\n                      </Typography>\r\n                      <Typography color='primary' variant='subtitle1'>\r\n                        Php 388.00\r\n                      </Typography>\r\n                    </>\r\n                  )}\r\n                {client.payment_mode === 'Fullpayment' && (\r\n                  <>\r\n                    <Typography component='h6' variant='subtitle1'>\r\n                      Lumpsum Price\r\n                    </Typography>\r\n                    <Typography color='primary' variant='subtitle1'>\r\n                      Php 23,280.00\r\n                    </Typography>\r\n                  </>\r\n                )}\r\n              </Grid>\r\n            </>\r\n          )}\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 15, paddingBottom: 15 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => onBack()}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton('PAY')}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\clientStepTwoValidator.tsx",["273"],"import Joi from 'joi'\r\nimport { lettersOnly, notNull } from 'utils/helper'\r\n\r\nconst clientStepTwoValidator = {\r\n  branch_manager: notNull('Branch Manager'),\r\n  agency_manager: notNull('Agency Manager'),\r\n  supervisor: notNull('Supervisor'),\r\n  sales_agent: Joi.optional(),\r\n  position: notNull('Position'),\r\n  insured_employee: Joi.optional(),\r\n}\r\n\r\nexport default clientStepTwoValidator\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\clientStepThreeValidator.tsx",["274"],"import Joi from 'joi'\r\nimport { lettersOnly, notNull } from 'utils/helper'\r\n\r\nconst clientStepThreeValidator = {\r\n  plan: notNull('Plan'),\r\n  insured_employee: Joi.optional(),\r\n  payment_mode: notNull('Payment Mode'),\r\n  or_number: notNull('OR Number'),\r\n  payment_period: Joi.when('payment_mode', {\r\n    is: Joi.string().valid('Fullpayment'),\r\n    then: Joi.valid(null),\r\n    otherwise: notNull('Payment Period'),\r\n  }),\r\n}\r\n\r\nexport default clientStepThreeValidator\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\ClientProvicer.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\hooks\\useGlobalState.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\hooks\\useClientState.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\api\\clientService.tsx",["275"],"import { Clients } from 'components/Pages/Clients'\r\nimport Client from 'models/client'\r\n\r\nconst plans = [\r\n  {\r\n    price: 23280,\r\n    plan: 'Plan 1',\r\n    monthly: 388,\r\n    quarterly: 1164,\r\n    semiAnnually: 2328,\r\n    annually: 4656,\r\n  },\r\n  {\r\n    price: 32280,\r\n    plan: 'Plan 2',\r\n    monthly: 538,\r\n    quarterly: 1614,\r\n    semiAnnually: 3228,\r\n    annually: 6456,\r\n  },\r\n  {\r\n    price: 41280,\r\n    plan: 'Plan 3',\r\n    monthly: 688,\r\n    quarterly: 2064,\r\n    semiAnnually: 4128,\r\n    annually: 8256,\r\n  },\r\n]\r\n\r\nconst clients: Client[] = [\r\n  {\r\n    id: 1,\r\n    code: 'HEY-7634464',\r\n    firstname: 'Fidfdfdfdfdfdfdfr',\r\n    middlename: 'Mie',\r\n    lastname: 'Lase',\r\n    payment_count: 4,\r\n    balance: 15000,\r\n    plan: 'Plan 2',\r\n    payment_period: 'Quarterly',\r\n    civil: 'Single',\r\n    gender: 'Male',\r\n    address: 'Somewhere ssdsdsd sdfdfdfdf sfdfdff',\r\n    contact: '09234545866',\r\n    branch: 'Somewhere',\r\n    payment_mode: 'Installment',\r\n    years_to_pay: 5,\r\n    birthdate: new Date('10/03/1991'),\r\n    end_date: new Date('09/06/2025'),\r\n  },\r\n  {\r\n    id: 2,\r\n    code: 'HEY-7634554',\r\n    firstname: 'Fidfdfdfdfdfdfdfr',\r\n    middlename: 'Mie',\r\n    lastname: 'Lase',\r\n    payment_count: 4,\r\n    balance: 20000,\r\n    plan: 'Plan 1',\r\n    payment_period: 'Monthly',\r\n    civil: 'Single',\r\n    gender: 'Male',\r\n    address: 'Somewhere ssdsdsd sdfdfdfdf sfdfdff',\r\n    contact: '09234545866',\r\n    branch: 'Somewhere',\r\n    years_to_pay: 5,\r\n    payment_mode: 'Installment',\r\n    birthdate: new Date('10/03/1991'),\r\n    end_date: new Date('09/06/2025'),\r\n  },\r\n  {\r\n    id: 3,\r\n    code: 'HEY-7654554',\r\n    firstname: 'Fidfdfdfdfdfdfdfr',\r\n    middlename: 'Mie',\r\n    lastname: 'Lase',\r\n    payment_count: 4,\r\n    balance: 0,\r\n    plan: 'Plan 3',\r\n    payment_period: 'Monthly',\r\n    civil: 'Single',\r\n    gender: 'Male',\r\n    address: 'Somewhere ssdsdsd sdfdfdfdf sfdfdff',\r\n    contact: '09234545866',\r\n    branch: 'Somewhere',\r\n    years_to_pay: 5,\r\n    payment_mode: 'Installment',\r\n    birthdate: new Date('10/03/1991'),\r\n    end_date: new Date('09/06/2025'),\r\n  },\r\n]\r\n\r\nexport const getClient = async (clients: Client[], id: number) => {\r\n  const client = clients.filter((client) => client.id === id)[0]\r\n  return Promise.resolve(client)\r\n}\r\n\r\nexport const getClients = async () => {\r\n  return new Promise<Client[]>(function (resolve, reject) {\r\n    setTimeout(() => {\r\n      resolve(clients)\r\n    }, 3000)\r\n  })\r\n}\r\n\r\nexport const computeTotalPay = (client: Client) => {\r\n  let period: number = 0\r\n\r\n  switch (client.payment_period) {\r\n    case 'Monthly':\r\n      period = 12\r\n      break\r\n    case 'Quarterly':\r\n      period = 4\r\n      break\r\n    case 'Semi-Annually':\r\n      period = 2\r\n      break\r\n    case 'Annually':\r\n      period = 1\r\n      break\r\n    default:\r\n      period = 0\r\n      break\r\n  }\r\n\r\n  return period * client.years_to_pay!\r\n}\r\n\r\nexport const computeTotalPaid = (client: Client) => {\r\n  const plan = plans.filter((plan) => plan.plan === client.plan)[0]\r\n\r\n  let downpayment = 0\r\n\r\n  switch (client.payment_period) {\r\n    case 'Monthly':\r\n      downpayment = plan.monthly\r\n      break\r\n    case 'Quarterly':\r\n      downpayment = plan.quarterly\r\n      break\r\n    case 'Semi-Annually':\r\n      downpayment = plan.semiAnnually\r\n      break\r\n    case 'Annually':\r\n      downpayment = plan.annually\r\n      break\r\n    default:\r\n      downpayment = 0\r\n      break\r\n  }\r\n\r\n  return computeTotalPay(client) - Math.ceil(client.balance! / downpayment)\r\n}\r\n",{"ruleId":"276","replacedBy":"277"},{"ruleId":"278","replacedBy":"279"},{"ruleId":"280","severity":1,"message":"281","line":18,"column":9,"nodeType":"282","messageId":"283","endLine":18,"endColumn":16},{"ruleId":"280","severity":1,"message":"284","line":26,"column":9,"nodeType":"282","messageId":"283","endLine":26,"endColumn":15},{"ruleId":"280","severity":1,"message":"285","line":7,"column":10,"nodeType":"282","messageId":"283","endLine":7,"endColumn":15},{"ruleId":"286","severity":1,"message":"287","line":11,"column":6,"nodeType":"288","endLine":11,"endColumn":8,"suggestions":"289"},{"ruleId":"280","severity":1,"message":"285","line":63,"column":10,"nodeType":"282","messageId":"283","endLine":63,"endColumn":15},{"ruleId":"280","severity":1,"message":"290","line":8,"column":8,"nodeType":"282","messageId":"283","endLine":8,"endColumn":16},{"ruleId":"280","severity":1,"message":"291","line":23,"column":10,"nodeType":"282","messageId":"283","endLine":23,"endColumn":11},{"ruleId":"286","severity":1,"message":"287","line":27,"column":6,"nodeType":"288","endLine":27,"endColumn":8,"suggestions":"292"},{"ruleId":"280","severity":1,"message":"285","line":18,"column":10,"nodeType":"282","messageId":"283","endLine":18,"endColumn":15},{"ruleId":"286","severity":1,"message":"287","line":22,"column":6,"nodeType":"288","endLine":22,"endColumn":8,"suggestions":"293"},{"ruleId":"280","severity":1,"message":"294","line":7,"column":31,"nodeType":"282","messageId":"283","endLine":7,"endColumn":41},{"ruleId":"280","severity":1,"message":"295","line":9,"column":10,"nodeType":"282","messageId":"283","endLine":9,"endColumn":24},{"ruleId":"280","severity":1,"message":"291","line":14,"column":10,"nodeType":"282","messageId":"283","endLine":14,"endColumn":11},{"ruleId":"280","severity":1,"message":"291","line":13,"column":10,"nodeType":"282","messageId":"283","endLine":13,"endColumn":11},{"ruleId":"280","severity":1,"message":"296","line":2,"column":8,"nodeType":"282","messageId":"283","endLine":2,"endColumn":14},{"ruleId":"280","severity":1,"message":"291","line":20,"column":10,"nodeType":"282","messageId":"283","endLine":20,"endColumn":11},{"ruleId":"286","severity":1,"message":"297","line":31,"column":6,"nodeType":"288","endLine":31,"endColumn":8,"suggestions":"298"},{"ruleId":"280","severity":1,"message":"299","line":12,"column":8,"nodeType":"282","messageId":"283","endLine":12,"endColumn":14},{"ruleId":"280","severity":1,"message":"300","line":13,"column":8,"nodeType":"282","messageId":"283","endLine":13,"endColumn":16},{"ruleId":"280","severity":1,"message":"291","line":27,"column":10,"nodeType":"282","messageId":"283","endLine":27,"endColumn":11},{"ruleId":"286","severity":1,"message":"301","line":36,"column":6,"nodeType":"288","endLine":36,"endColumn":8,"suggestions":"302"},{"ruleId":"280","severity":1,"message":"285","line":19,"column":10,"nodeType":"282","messageId":"283","endLine":19,"endColumn":15},{"ruleId":"286","severity":1,"message":"303","line":26,"column":6,"nodeType":"288","endLine":26,"endColumn":8,"suggestions":"304"},{"ruleId":"280","severity":1,"message":"305","line":1,"column":17,"nodeType":"282","messageId":"283","endLine":1,"endColumn":27},{"ruleId":"280","severity":1,"message":"306","line":4,"column":8,"nodeType":"282","messageId":"283","endLine":4,"endColumn":18},{"ruleId":"280","severity":1,"message":"296","line":6,"column":8,"nodeType":"282","messageId":"283","endLine":6,"endColumn":14},{"ruleId":"280","severity":1,"message":"307","line":8,"column":8,"nodeType":"282","messageId":"283","endLine":8,"endColumn":15},{"ruleId":"280","severity":1,"message":"308","line":7,"column":8,"nodeType":"282","messageId":"283","endLine":7,"endColumn":20},{"ruleId":"280","severity":1,"message":"309","line":2,"column":10,"nodeType":"282","messageId":"283","endLine":2,"endColumn":21},{"ruleId":"280","severity":1,"message":"309","line":2,"column":10,"nodeType":"282","messageId":"283","endLine":2,"endColumn":21},{"ruleId":"280","severity":1,"message":"310","line":1,"column":10,"nodeType":"282","messageId":"283","endLine":1,"endColumn":17},"no-native-reassign",["311"],"no-negated-in-lhs",["312"],"@typescript-eslint/no-unused-vars","'history' is assigned a value but never used.","Identifier","unusedVar","'styles' is assigned a value but never used.","'state' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["313"],"'EditIcon' is defined but never used.","'_' is assigned a value but never used.",["314"],["315"],"'InputProps' is defined but never used.","'EmployeesProps' is defined but never used.","'Client' is defined but never used.","React Hook useEffect has missing dependencies: 'clientDispatch' and 'globalDispatch'. Either include them or remove the dependency array.",["316"],"'Avatar' is defined but never used.","'userIcon' is defined but never used.","React Hook useEffect has missing dependencies: 'clientState.clients', 'globalDispatch', and 'id'. Either include them or remove the dependency array.",["317"],"React Hook useEffect has missing dependencies: 'dispatch' and 'scroll'. Either include them or remove the dependency array.",["318"],"'useContext' is defined but never used.","'Typography' is defined but never used.","'Divider' is defined but never used.","'Commissioner' is defined but never used.","'lettersOnly' is defined but never used.","'Clients' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"319","fix":"320"},{"desc":"319","fix":"321"},{"desc":"319","fix":"322"},{"desc":"323","fix":"324"},{"desc":"325","fix":"326"},{"desc":"327","fix":"328"},"Update the dependencies array to be: [dispatch]",{"range":"329","text":"330"},{"range":"331","text":"330"},{"range":"332","text":"330"},"Update the dependencies array to be: [clientDispatch, globalDispatch]",{"range":"333","text":"334"},"Update the dependencies array to be: [clientState.clients, globalDispatch, id]",{"range":"335","text":"336"},"Update the dependencies array to be: [dispatch, scroll]",{"range":"337","text":"338"},[351,353],"[dispatch]",[1016,1018],[772,774],[1149,1151],"[clientDispatch, globalDispatch]",[1369,1371],"[clientState.clients, globalDispatch, id]",[1014,1016],"[dispatch, scroll]"]