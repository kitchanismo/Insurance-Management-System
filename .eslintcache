[{"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\index.tsx":"1","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\App.tsx":"2","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\index.tsx":"3","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Layout\\index.tsx":"4","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyNav\\index.tsx":"5","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyAlert\\index.tsx":"6","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyDrawer\\index.tsx":"7","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Dashboard\\index.tsx":"8","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyCard\\index.tsx":"9","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\utils\\helper.ts":"10","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyForm\\index.tsx":"11","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\index.tsx":"12","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\NewEmployee\\index.tsx":"13","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\EditEmployee\\index.tsx":"14","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\EmployeeCard\\index.tsx":"15","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\clients\\index.tsx":"16","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MySearchField\\index.tsx":"17","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\index.tsx":"18","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\ClientCard\\index.tsx":"19","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyAvatar\\index.tsx":"20","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\ViewClient\\index.tsx":"21","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\index.tsx":"22","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\ClientStepOne.tsx":"23","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\ClientStepTwo.tsx":"24","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\saveEmployeeValidator.tsx":"25","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\saveProfileValidator.tsx":"26","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyStepper\\index.tsx":"27","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\ClientStepThree.tsx":"28","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\clientStepTwoValidator.tsx":"29","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\clientStepThreeValidator.tsx":"30","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\ClientProvicer.tsx":"31","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\hooks\\useGlobalState.tsx":"32","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\hooks\\useClientState.tsx":"33","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\api\\clientService.tsx":"34","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\ViewEmployee\\index.tsx":"35"},{"size":342,"mtime":1612026287995,"results":"36","hashOfConfig":"37"},{"size":477,"mtime":1612026173019,"results":"38","hashOfConfig":"37"},{"size":1060,"mtime":1612026253798,"results":"39","hashOfConfig":"37"},{"size":1733,"mtime":1612025491094,"results":"40","hashOfConfig":"37"},{"size":2420,"mtime":1612025373687,"results":"41","hashOfConfig":"37"},{"size":850,"mtime":1612025081259,"results":"42","hashOfConfig":"37"},{"size":2964,"mtime":1612025229146,"results":"43","hashOfConfig":"37"},{"size":409,"mtime":1612025808131,"results":"44","hashOfConfig":"37"},{"size":1057,"mtime":1612025190065,"results":"45","hashOfConfig":"37"},{"size":1972,"mtime":1611918792397,"results":"46","hashOfConfig":"37"},{"size":8572,"mtime":1612025259055,"results":"47","hashOfConfig":"37"},{"size":2405,"mtime":1612026326387,"results":"48","hashOfConfig":"37"},{"size":4262,"mtime":1612026038974,"results":"49","hashOfConfig":"37"},{"size":4389,"mtime":1612026139393,"results":"50","hashOfConfig":"37"},{"size":2913,"mtime":1612026087251,"results":"51","hashOfConfig":"37"},{"size":27,"mtime":1611588252955,"results":"52","hashOfConfig":"37"},{"size":1510,"mtime":1612025364106,"results":"53","hashOfConfig":"37"},{"size":2067,"mtime":1612025557633,"results":"54","hashOfConfig":"37"},{"size":2958,"mtime":1612025770740,"results":"55","hashOfConfig":"37"},{"size":400,"mtime":1612025207022,"results":"56","hashOfConfig":"37"},{"size":6132,"mtime":1612025599805,"results":"57","hashOfConfig":"37"},{"size":4334,"mtime":1612025652721,"results":"58","hashOfConfig":"37"},{"size":3116,"mtime":1612025682832,"results":"59","hashOfConfig":"37"},{"size":4540,"mtime":1612025713442,"results":"60","hashOfConfig":"37"},{"size":559,"mtime":1611730907908,"results":"61","hashOfConfig":"37"},{"size":468,"mtime":1611823235322,"results":"62","hashOfConfig":"37"},{"size":1391,"mtime":1612025426245,"results":"63","hashOfConfig":"37"},{"size":4188,"mtime":1612025697638,"results":"64","hashOfConfig":"37"},{"size":389,"mtime":1611869862713,"results":"65","hashOfConfig":"37"},{"size":469,"mtime":1611872540924,"results":"66","hashOfConfig":"37"},{"size":370,"mtime":1612021195443,"results":"67","hashOfConfig":"37"},{"size":1190,"mtime":1612020753351,"results":"68","hashOfConfig":"37"},{"size":1030,"mtime":1612020744714,"results":"69","hashOfConfig":"37"},{"size":3449,"mtime":1612026202080,"results":"70","hashOfConfig":"37"},{"size":5777,"mtime":1612025945257,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"csx4bj",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"74"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"74"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"74"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"74"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"74"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"74"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"74"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"74"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"74"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"74"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"74"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\index.tsx",[],["159","160"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\App.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Layout\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyNav\\index.tsx",["161"],"import * as React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport Typography from '@material-ui/core/Typography'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Menu from '@material-ui/icons/Menu'\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\nimport MyDrawer from 'components/Common/MyDrawer'\r\nimport { GlobalContext } from 'hooks/useGlobalState'\r\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger'\r\nimport Slide from '@material-ui/core/Slide'\r\n\r\nconst Nav: React.FC = (props) => {\r\n  const [state, dispatch] = React.useContext(GlobalContext)!\r\n  const history = useHistory()\r\n  const [isActive, setIsActive] = React.useState(false)\r\n\r\n  const onToggle = (title?: string) => {\r\n    setIsActive((isActive) => !isActive)\r\n\r\n    if (!title) {\r\n      return\r\n    }\r\n    dispatch({ type: 'setTitle', payload: title })\r\n  }\r\n\r\n  interface Props {\r\n    window?: () => Window\r\n    children: React.ReactElement\r\n  }\r\n\r\n  function HideOnScroll(props: Props) {\r\n    const { children, window } = props\r\n    const trigger = useScrollTrigger({ target: window ? window() : undefined })\r\n\r\n    return (\r\n      <Slide appear={false} direction='down' in={!trigger}>\r\n        {children}\r\n      </Slide>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <HideOnScroll {...props}>\r\n      <AppBar\r\n        style={{\r\n          background:\r\n            'linear-gradient(to right, #9c27b0, #9c27b0, #9c27b0, #9c27b0, #9c27b0, #a721aa, #b119a4, #ba119e, #cb0090, #d80081, #e20672, #e91e63)',\r\n        }}\r\n      >\r\n        <MyDrawer onToggle={onToggle} isActive={isActive}></MyDrawer>\r\n        <Toolbar>\r\n          <Grid container xs={12} justify='center'>\r\n            <Grid container xs={1} sm={5} md={4} justify='flex-start'>\r\n              <IconButton\r\n                onClick={() => onToggle()}\r\n                edge='start'\r\n                color='inherit'\r\n                aria-label='menu'\r\n              >\r\n                <Menu />\r\n              </IconButton>\r\n            </Grid>\r\n            <Grid container xs={11} sm={5} md={4} justify='flex-end'>\r\n              <Typography style={{ paddingTop: 8 }} variant='h6'>\r\n                {state.title}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </HideOnScroll>\r\n  )\r\n}\r\n\r\nexport default Nav\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyAlert\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyDrawer\\index.tsx",["162"],"import React from 'react'\r\nimport Drawer from '@material-ui/core/Drawer'\r\nimport List from '@material-ui/core/List'\r\nimport ArrowBack from '@material-ui/icons/ArrowBack'\r\nimport EmployeesIcon from '@material-ui/icons/People'\r\nimport ClientIcon from '@material-ui/icons/SupervisedUserCircle'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport makeStyles from '@material-ui/core/styles/makeStyles'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport Grid from '@material-ui/core/Grid/Grid'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport DashboardIcon from '@material-ui/icons/Dashboard'\r\nimport { GlobalContext } from 'hooks/useGlobalState'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nexport interface MyDrawerProps {\r\n  isActive: boolean\r\n  onToggle: Function\r\n}\r\n\r\nconst MyDrawer: React.FC<MyDrawerProps> = (props) => {\r\n  const styles = useStyles()\r\n\r\n  const history = useHistory()\r\n\r\n  const [state, dispatch] = React.useContext(GlobalContext)!\r\n\r\n  const menus = [\r\n    { name: 'Dashboard', path: '/dashboard', icon: <DashboardIcon /> },\r\n    {\r\n      name: 'Employee Management',\r\n      path: '/employees',\r\n      icon: <EmployeesIcon />,\r\n    },\r\n    { name: 'Client Management', path: '/clients', icon: <ClientIcon /> },\r\n  ]\r\n\r\n  const list = () => (\r\n    <>\r\n      <List>\r\n        {menus.map((menu, index) => (\r\n          <ListItem style={{ paddingLeft: 0 }} button key={index}>\r\n            <ListItemIcon style={{ paddingLeft: 20 }}>{menu.icon}</ListItemIcon>\r\n\r\n            <ListItemText\r\n              primary={menu.name}\r\n              onClick={() => {\r\n                props.onToggle(menu.name)\r\n                history.replace(menu.path)\r\n              }}\r\n            />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </>\r\n  )\r\n\r\n  return (\r\n    <Drawer anchor='left' open={props.isActive}>\r\n      <Grid container justify='flex-end'>\r\n        <IconButton\r\n          onClick={() => props.onToggle()}\r\n          edge='start'\r\n          color='inherit'\r\n          aria-label='menu'\r\n        >\r\n          <ArrowBack />\r\n        </IconButton>\r\n      </Grid>\r\n      {list()}\r\n      <Divider style={{ marginLeft: 10, marginRight: 10 }}></Divider>\r\n      <FormControlLabel\r\n        style={{ marginLeft: 10, marginTop: 10 }}\r\n        control={\r\n          <Switch\r\n            checked={state.isDark}\r\n            onChange={() => dispatch({ type: 'toggleTheme' })}\r\n            name='checkedA'\r\n            inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n          />\r\n        }\r\n        label='Dark Mode'\r\n      />\r\n    </Drawer>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  close: {\r\n    paddingTop: 5,\r\n    paddingRight: 5,\r\n  },\r\n}))\r\n\r\nexport default MyDrawer\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Dashboard\\index.tsx",["163","164"],"import { GlobalContext } from 'hooks/useGlobalState'\r\nimport React, { useContext, useEffect } from 'react'\r\n\r\nexport interface DashboardProps {}\r\n\r\nconst Dashboard: React.SFC<DashboardProps> = () => {\r\n  const [state, dispatch] = useContext(GlobalContext)!\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'setTitle', payload: 'Dashboard' })\r\n  }, [])\r\n  return <h3>Dashboard</h3>\r\n}\r\n\r\nexport default Dashboard\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyCard\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\utils\\helper.ts",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyForm\\index.tsx",["165"],"import React, { useContext } from 'react'\r\nimport Joi from 'joi'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport Select from '@material-ui/core/Select'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Button from '@material-ui/core/Button'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Radio from '@material-ui/core/Radio'\r\nimport DateFnsUtils from '@date-io/date-fns/build'\r\nimport FormHelperText from '@material-ui/core/FormHelperText'\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput'\r\nimport InputAdornment from '@material-ui/core/InputAdornment'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff'\r\nimport Visibility from '@material-ui/icons/Visibility'\r\nimport {\r\n  KeyboardDatePicker,\r\n  MuiPickersUtilsProvider,\r\n} from '@material-ui/pickers'\r\nimport { GlobalContext } from 'hooks/useGlobalState'\r\n\r\nexport interface MyFormProps<T> {\r\n  state: [T, React.Dispatch<React.SetStateAction<T>>]\r\n  onSubmit: (data: T) => Promise<any>\r\n  validator?: {}\r\n  radioButtonDefaultValue?: string\r\n  children?: (props: RenderProps) => JSX.Element\r\n}\r\n\r\nexport interface InputProps {\r\n  value?: any\r\n  name: string\r\n  placeholder?: string\r\n  type?: string | 'text'\r\n  label?: string\r\n  isMultiline?: boolean\r\n  onTogglePassword?: React.Dispatch<React.SetStateAction<boolean>>\r\n}\r\n\r\nexport interface OptionProps {\r\n  name?: string\r\n  value: any\r\n}\r\n\r\nexport interface SelectProps extends InputProps {\r\n  options: OptionProps[]\r\n  labelWidth?: number\r\n}\r\n\r\nexport interface RenderProps {\r\n  myInput: (input: InputProps) => JSX.Element\r\n  myInputPassword: (input: InputProps) => JSX.Element\r\n  myDateTimePicker: (input: InputProps) => JSX.Element\r\n  myButton: (text?: string) => JSX.Element\r\n  mySelect: (select: SelectProps) => JSX.Element\r\n  myRadio: (input: InputProps) => JSX.Element\r\n}\r\n\r\nfunction MyForm<T>(props: MyFormProps<T>) {\r\n  const [state, dispatch] = useContext(GlobalContext)!\r\n\r\n  const [data, setData] = props.state\r\n\r\n  const [isDisable, setIsDisable] = React.useState<boolean>(false)\r\n\r\n  const [selectedValue, setSelectedValue] = React.useState(\r\n    props.radioButtonDefaultValue ?? '',\r\n  )\r\n\r\n  const [errors, setErrors] = React.useState<any>(null)\r\n\r\n  const onValidate = (_data: T) => {\r\n    const schema = Joi.object(props.validator).options({\r\n      abortEarly: false,\r\n    })\r\n\r\n    const { error } = schema.validate(_data)\r\n\r\n    if (!error) return null\r\n\r\n    console.log(error)\r\n\r\n    const _errors: any = {}\r\n\r\n    error.details.forEach((item) => (_errors[item.path[0]] = item.message))\r\n\r\n    return _errors\r\n  }\r\n\r\n  const onChangeRadio = (e: any) => {\r\n    setSelectedValue(e.target.value)\r\n  }\r\n\r\n  const onSubmit = (e: any) => {\r\n    e.preventDefault()\r\n\r\n    const newData = { ...data } as any\r\n\r\n    for (let [key, value] of new FormData(e.target).entries()) {\r\n      newData[key] = value\r\n    }\r\n    const hasErrors = onValidate(newData)\r\n\r\n    setIsDisable(true)\r\n\r\n    if (hasErrors) {\r\n      dispatch({\r\n        type: 'setAlert',\r\n        payload: {\r\n          message: 'Fill out all the fields.',\r\n          type: 'error',\r\n        },\r\n      })\r\n      setErrors(hasErrors)\r\n      setIsDisable(false)\r\n      return\r\n    }\r\n\r\n    return props\r\n      .onSubmit(newData)\r\n      .then(() => {\r\n        setErrors({})\r\n        setIsDisable(false)\r\n      })\r\n      .catch((error) => {\r\n        setIsDisable(false)\r\n      })\r\n  }\r\n\r\n  const myInput = (input: InputProps) => {\r\n    const error = errors && errors[input.name]\r\n\r\n    return (\r\n      <Grid item xs={12} key={input.name}>\r\n        <TextField\r\n          defaultValue={input.value}\r\n          multiline={input.isMultiline}\r\n          fullWidth\r\n          name={input.name}\r\n          variant='outlined'\r\n          label={input.label}\r\n          type={input.type}\r\n          error={!!error}\r\n          helperText={error}\r\n        />\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  const myInputPassword = (input: InputProps) => {\r\n    const error = errors && errors[input.name]\r\n\r\n    return (\r\n      <Grid item xs={12} key={input.name}>\r\n        <FormControl fullWidth variant='outlined' error={!!error}>\r\n          <InputLabel htmlFor={input.label}>{input.label}</InputLabel>\r\n          <OutlinedInput\r\n            defaultValue={input.value}\r\n            id={input.name}\r\n            name={input.name}\r\n            type={input.type}\r\n            labelWidth={70}\r\n            endAdornment={\r\n              <InputAdornment position='end'>\r\n                <IconButton\r\n                  aria-label='toggle password visibility'\r\n                  onClick={() =>\r\n                    input.onTogglePassword?.call(\r\n                      null,\r\n                      (isVisible) => !isVisible,\r\n                    )\r\n                  }\r\n                >\r\n                  {input.type !== 'password' ? (\r\n                    <Visibility />\r\n                  ) : (\r\n                    <VisibilityOff />\r\n                  )}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n          />\r\n          <FormHelperText>{error}</FormHelperText>\r\n        </FormControl>\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  const myDateTimePicker = (input: InputProps) => {\r\n    return (\r\n      <Grid item xs={12} key={input.name}>\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n          <KeyboardDatePicker\r\n            fullWidth\r\n            inputVariant='outlined'\r\n            disableToolbar\r\n            variant='dialog'\r\n            format='MM/dd/yyyy'\r\n            margin='none'\r\n            label={input.label}\r\n            value={input.value ?? null}\r\n            onChange={(date) =>\r\n              setData({\r\n                ...data,\r\n                [input.name]: date?.toLocaleDateString(),\r\n              })\r\n            }\r\n            KeyboardButtonProps={{\r\n              'aria-label': 'change date',\r\n            }}\r\n          />\r\n        </MuiPickersUtilsProvider>\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  const myRadio = (input: InputProps) => {\r\n    return (\r\n      <Radio\r\n        checked={selectedValue === input.value}\r\n        onChange={onChangeRadio}\r\n        value={input.value}\r\n        name={input.name}\r\n      />\r\n    )\r\n  }\r\n\r\n  const mySelect = (select: SelectProps) => {\r\n    const error = errors && errors[select.name ?? select.value]\r\n    return (\r\n      <Grid item xs={12} key={select.name ?? select.value}>\r\n        <FormControl fullWidth variant='outlined' error={!!error}>\r\n          <InputLabel id={select.label}>{select.label}</InputLabel>\r\n          <Select\r\n            labelId={select.label}\r\n            id={select.name ?? select.value}\r\n            name={select.name ?? select.value}\r\n            value={select.value || ''}\r\n            onChange={(e: any) => {\r\n              const { value } = e.target\r\n              if (error && value !== 'clear') {\r\n                const _errors = { ...errors }\r\n                delete _errors[select.name]\r\n                setErrors(_errors)\r\n              }\r\n              setData({\r\n                ...data,\r\n                [select.name]: value !== 'clear' ? value : '',\r\n              })\r\n            }}\r\n            labelWidth={select.labelWidth ?? 60}\r\n          >\r\n            {select.options.map((option) => (\r\n              <MenuItem value={option.value}>\r\n                {option.name ?? option.value}\r\n              </MenuItem>\r\n            ))}\r\n            <Divider style={{ marginLeft: 15, marginRight: 15 }}></Divider>\r\n            <MenuItem value='clear'>Clear</MenuItem>\r\n          </Select>\r\n          <FormHelperText>{error}</FormHelperText>\r\n        </FormControl>\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  const myButton = (text?: string) => {\r\n    return (\r\n      <Grid item xs={12}>\r\n        <Button\r\n          disabled={isDisable}\r\n          style={{ paddingTop: 15, paddingBottom: 15 }}\r\n          fullWidth\r\n          type='submit'\r\n          variant='contained'\r\n          color='primary'\r\n        >\r\n          {text ?? 'SUBMIT'}\r\n        </Button>\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <Grid container spacing={2} direction='column'>\r\n        {props.children?.({\r\n          myInput,\r\n          myInputPassword,\r\n          mySelect,\r\n          myDateTimePicker,\r\n          myButton,\r\n          myRadio,\r\n        } as RenderProps)}\r\n      </Grid>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default MyForm\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\index.tsx",["166","167"],"import React, { useContext, useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Fab from '@material-ui/core/Fab'\r\nimport AddIcon from '@material-ui/icons/Add'\r\n\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\r\n\r\nimport Employee from 'models/employee'\r\nimport EmployeeCard from './EmployeeCard'\r\nimport MySearchField from 'components/Common/MySearchField'\r\nimport { GlobalContext } from 'hooks/useGlobalState'\r\n\r\nexport interface EmployeesProps {}\r\n\r\nconst Employees: React.SFC<EmployeesProps> = () => {\r\n  const [state, dispatch] = useContext(GlobalContext)!\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'setTitle', payload: 'Employee Management' })\r\n  }, [])\r\n\r\n  const employees: Partial<Employee>[] = [\r\n    {\r\n      id: 1,\r\n      firstname: 'Ftname',\r\n      middlename: 'Mee',\r\n      lastname: 'ame',\r\n      position: 'Agency Manager',\r\n      status: 'deactive',\r\n    },\r\n    {\r\n      id: 2,\r\n      firstname: 'Firstname',\r\n      middlename: 'Middlename',\r\n      lastname: 'Lastname',\r\n      position: 'Sales Agent',\r\n      status: 'active',\r\n    },\r\n    {\r\n      id: 3,\r\n      firstname: 'Firstname',\r\n      middlename: 'Middlename',\r\n      lastname: 'Lastname',\r\n      position: 'Branch Manager',\r\n      status: 'deceased',\r\n    },\r\n\r\n    {\r\n      id: 4,\r\n      firstname: 'Firstname',\r\n      middlename: 'Middlename',\r\n      lastname: 'Lastname',\r\n      position: 'Supervisor',\r\n      status: 'active',\r\n    },\r\n  ]\r\n\r\n  const history = useHistory()\r\n\r\n  const styles = useStyles()\r\n  return (\r\n    <>\r\n      <MySearchField style={{ marginBottom: 15 }} />\r\n\r\n      <Grid\r\n        container\r\n        spacing={2}\r\n        direction='column'\r\n        justify='flex-start'\r\n        alignItems='center'\r\n      >\r\n        {employees.map((employee) => (\r\n          <Grid key={employee.id} item xs={12}>\r\n            <EmployeeCard employee={employee} />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n\r\n      <Fab\r\n        onClick={() => history.push('/employees/new')}\r\n        className={styles.fab}\r\n        color='primary'\r\n        aria-label='add'\r\n      >\r\n        <AddIcon />\r\n      </Fab>\r\n    </>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    fab: {\r\n      position: 'fixed',\r\n      bottom: 20,\r\n      right: 20,\r\n    },\r\n  }),\r\n)\r\n\r\nexport default Employees\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\NewEmployee\\index.tsx",["168","169"],"import React, { useContext } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { GlobalContext } from 'hooks/useGlobalState'\r\nimport validator from '../../../../validators/saveEmployeeValidator'\r\nimport MyForm, { MyFormProps, InputProps } from 'components/Common/MyForm'\r\nimport Employee from 'models/employee'\r\n\r\nexport interface NewUserProps {}\r\n\r\nconst NewEmployee: React.SFC<NewUserProps> = () => {\r\n  const [_, dispatch] = useContext(GlobalContext)!\r\n\r\n  const history = useHistory()\r\n\r\n  const [employee, setEmployee] = React.useState<Employee>({\r\n    firstname: 'dfdf',\r\n    middlename: '',\r\n    lastname: '',\r\n    address: '',\r\n    contact: '',\r\n  })\r\n\r\n  const onSubmit = async (data: Employee) => {\r\n    console.log(data)\r\n    dispatch({\r\n      type: 'setAlert',\r\n      payload: { message: 'Successfully added', type: 'success' },\r\n    })\r\n    return Promise.resolve()\r\n  }\r\n\r\n  const formProps: MyFormProps<Employee> = {\r\n    state: [employee, setEmployee],\r\n    onSubmit,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myInput, mySelect, myDateTimePicker, myButton }) => (\r\n        <>\r\n          {myInput({\r\n            label: 'Firstname',\r\n            value: employee.firstname,\r\n            name: 'firstname',\r\n          })}\r\n          {myInput({\r\n            label: 'Middlename',\r\n            value: employee.middlename,\r\n            name: 'middlename',\r\n          })}\r\n          {myInput({\r\n            label: 'Lastname',\r\n            value: employee.lastname,\r\n            name: 'lastname',\r\n          })}\r\n          {myInput({\r\n            label: 'Contact Number',\r\n            value: employee.contact,\r\n            name: 'contact',\r\n          })}\r\n\r\n          {myInput({\r\n            label: 'Address',\r\n            value: employee.address,\r\n            name: 'address',\r\n            isMultiline: true,\r\n          })}\r\n          {mySelect({\r\n            label: 'Gender',\r\n            value: employee.gender,\r\n            name: 'gender',\r\n            options: [\r\n              { value: 'Male' },\r\n              { value: 'Female' },\r\n              { value: 'Other' },\r\n            ],\r\n          })}\r\n          {mySelect({\r\n            label: 'Civil Status',\r\n            value: employee.civil,\r\n            name: 'civil',\r\n            labelWidth: 80,\r\n            options: [\r\n              { value: 'Single' },\r\n              { value: 'Married' },\r\n              { value: 'Widowed' },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Position',\r\n            value: employee.position,\r\n            name: 'position',\r\n            labelWidth: 55,\r\n            options: [\r\n              { value: 'Sales Agent' },\r\n              { value: 'Branch Manager' },\r\n              { value: 'Agency Manager' },\r\n              { value: 'Supervisor' },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Branch',\r\n            value: employee.branch,\r\n            name: 'branch',\r\n            labelWidth: 55,\r\n            options: [{ value: 'Cebu' }, { value: 'Manila' }],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Team',\r\n            value: employee.team,\r\n            name: 'team',\r\n            labelWidth: 40,\r\n            options: [{ value: 'ABC' }],\r\n          })}\r\n\r\n          {myDateTimePicker({\r\n            label: 'Birthdate',\r\n            value: employee.birthdate,\r\n            name: 'birthdate',\r\n          })}\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 10, paddingBottom: 5 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.goBack()}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton()}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\nexport default NewEmployee\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\EditEmployee\\index.tsx",["170"],"import React, { useContext } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { GlobalContext } from 'hooks/useGlobalState'\r\nimport validator from '../../../../validators/saveEmployeeValidator'\r\nimport MyForm, { MyFormProps } from 'components/Common/MyForm'\r\nimport Employee from 'models/employee'\r\n\r\nexport interface EditUserProps {}\r\n\r\nconst EditEmployee: React.SFC<EditUserProps> = () => {\r\n  const [_, dispatch] = useContext(GlobalContext)!\r\n\r\n  const history = useHistory()\r\n\r\n  const [employee, setEmployee] = React.useState<Employee>({\r\n    firstname: 'sds',\r\n    middlename: 'dfdf',\r\n    lastname: 'fgf',\r\n    address: 'fgf',\r\n    contact: 'fgfg',\r\n    gender: 'Male',\r\n    civil: 'Single',\r\n    birthdate: new Date('10/03/1991'),\r\n    position: 'Branch Manager',\r\n  })\r\n\r\n  const onSubmit = async (data: Employee) => {\r\n    console.log(data)\r\n    dispatch({\r\n      type: 'setAlert',\r\n      payload: { message: 'Successfully added', type: 'success' },\r\n    })\r\n\r\n    return Promise.resolve()\r\n  }\r\n\r\n  const formProps: MyFormProps<Employee> = {\r\n    state: [employee, setEmployee],\r\n    onSubmit,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myInput, mySelect, myDateTimePicker, myButton }) => (\r\n        <>\r\n          {myInput({\r\n            label: 'Firstname',\r\n            value: employee.firstname,\r\n            name: 'firstname',\r\n          })}\r\n          {myInput({\r\n            label: 'Middlename',\r\n            value: employee.middlename,\r\n            name: 'middlename',\r\n          })}\r\n          {myInput({\r\n            label: 'Lastname',\r\n            value: employee.lastname,\r\n            name: 'lastname',\r\n          })}\r\n          {myInput({\r\n            label: 'Contact Number',\r\n            value: employee.contact,\r\n            name: 'contact',\r\n          })}\r\n\r\n          {myInput({\r\n            label: 'Address',\r\n            value: employee.address,\r\n            name: 'address',\r\n            isMultiline: true,\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Gender',\r\n            value: employee.gender,\r\n            name: 'gender',\r\n            options: [\r\n              { value: 'Male' },\r\n              { value: 'Female' },\r\n              { value: 'Other' },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Civil Status',\r\n            value: employee.civil,\r\n            name: 'civil',\r\n            labelWidth: 80,\r\n            options: [\r\n              { value: 'Single' },\r\n              { value: 'Married' },\r\n              { value: 'Widowed' },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Position',\r\n            value: employee.position,\r\n            name: 'position',\r\n            labelWidth: 55,\r\n            options: [\r\n              { value: 'Sales Agent' },\r\n              { value: 'Branch Manager' },\r\n              { value: 'Agency Manager' },\r\n              { value: 'Supervisor' },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Branch',\r\n            value: employee.branch,\r\n            name: 'branch',\r\n            labelWidth: 55,\r\n            options: [{ value: 'Cebu' }, { value: 'Manila' }],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Team',\r\n            value: employee.team,\r\n            name: 'team',\r\n            labelWidth: 40,\r\n            options: [{ value: 'ABC' }],\r\n          })}\r\n\r\n          {myDateTimePicker({\r\n            label: 'Birthdate',\r\n            value: employee.birthdate,\r\n            name: 'birthdate',\r\n          })}\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 10, paddingBottom: 5 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.goBack()}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton()}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\nexport default EditEmployee\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\EmployeeCard\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\clients\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MySearchField\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\index.tsx",["171","172","173"],"import MySearchField from 'components/Common/MySearchField'\r\nimport Client from 'models/client'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\r\n\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Fab from '@material-ui/core/Fab'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport { useHistory } from 'react-router-dom'\r\nimport ClientCard from './ClientCard'\r\nimport { useContext, useEffect } from 'react'\r\nimport { getClients } from 'api/clientService'\r\nimport { ClientContext } from 'hooks/useClientState'\r\nimport { GlobalContext } from 'hooks/useGlobalState'\r\n\r\nexport interface ClientsProps {}\r\n\r\nconst Clients: React.SFC<ClientsProps> = () => {\r\n  const [clientState, clientDispatch] = useContext(ClientContext)!\r\n\r\n  const [_, globalDispatch] = useContext(GlobalContext)!\r\n\r\n  const styles = useStyles()\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    globalDispatch({ type: 'setTitle', payload: 'Client Management' })\r\n    clientDispatch({ type: 'setIsLoading', payload: true })\r\n    getClients().then((clients) => {\r\n      clientDispatch({ type: 'onLoad', payload: clients })\r\n    })\r\n  }, [])\r\n\r\n  if (clientState.isLoading && !clientState.clients.length)\r\n    return <h4>Loading...</h4>\r\n\r\n  return (\r\n    <>\r\n      <MySearchField style={{ marginBottom: 15 }} />\r\n      <Grid\r\n        container\r\n        spacing={2}\r\n        direction='column'\r\n        justify='flex-start'\r\n        alignItems='center'\r\n      >\r\n        {clientState.clients.map((client) => (\r\n          <Grid key={client.id} item xs={12}>\r\n            <ClientCard key={client.id} client={client} />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n\r\n      <Fab\r\n        onClick={() => history.push('/clients/new')}\r\n        className={styles.fab}\r\n        color='primary'\r\n        aria-label='add'\r\n      >\r\n        <AddIcon />\r\n      </Fab>\r\n    </>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    fab: {\r\n      position: 'fixed',\r\n      bottom: 20,\r\n      right: 20,\r\n    },\r\n  }),\r\n)\r\n\r\nexport default Clients\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\ClientCard\\index.tsx",["174","175"],"import MyCard from 'components/Common/MyCard'\r\nimport React from 'react'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport ViewIcon from '@material-ui/icons/RemoveRedEye'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport Chip from '@material-ui/core/Chip'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport userIcon from 'assets/profile-user.svg'\r\nimport Client from 'models/client'\r\nimport { useHistory } from 'react-router-dom'\r\nimport MyAvatar from 'components/Common/MyAvatar'\r\nimport { computeTotalPaid, computeTotalPay } from 'api/clientService'\r\n\r\nexport interface ClientCardProps {\r\n  client: Client\r\n}\r\n\r\nexport const ClientCard: React.SFC<ClientCardProps> = ({ client }) => {\r\n  const history = useHistory()\r\n\r\n  return (\r\n    <MyCard title={client.code} style={{ paddingBottom: 5 }}>\r\n      <CardContent>\r\n        <Grid container xs={12} justify='space-between'>\r\n          <Grid\r\n            style={{ paddingLeft: 10 }}\r\n            container\r\n            item\r\n            direction='column'\r\n            xs={7}\r\n            justify='flex-start'\r\n          >\r\n            <Typography component='h6' variant='h6'>\r\n              {`${client.lastname}, ${client.firstname} ${client.middlename}`}\r\n            </Typography>\r\n            <Typography variant='subtitle1' color='textSecondary'>\r\n              {client.plan + ' - ' + client.payment_mode}\r\n            </Typography>\r\n            <Grid item xs={1}>\r\n              <Chip\r\n                style={{ marginTop: 5 }}\r\n                size='small'\r\n                label={\r\n                  computeTotalPaid(client) +\r\n                  '/' +\r\n                  computeTotalPay(client) +\r\n                  ' Paid'\r\n                }\r\n                variant='default'\r\n                color='secondary'\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item xs={5} justify='center' alignItems='center'>\r\n            <MyAvatar onClick={() => history.push('/clients/' + client.id)} />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n\r\n      <Divider style={{ marginLeft: 20, marginRight: 20 }}></Divider>\r\n      <Grid container xs={12} justify='space-evenly'>\r\n        <IconButton\r\n          onClick={() => history.push('/clients/' + client.id)}\r\n          aria-label='view'\r\n        >\r\n          <ViewIcon />\r\n        </IconButton>\r\n        <IconButton\r\n          onClick={() => history.push('/clients/edit/' + client.id)}\r\n          aria-label='edit'\r\n        >\r\n          <EditIcon />\r\n        </IconButton>\r\n        <IconButton aria-label='archive'>\r\n          <DeleteIcon />\r\n        </IconButton>\r\n      </Grid>\r\n    </MyCard>\r\n  )\r\n}\r\nexport default ClientCard\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyAvatar\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\ViewClient\\index.tsx",["176","177"],"import React, { useState, useEffect, useContext } from 'react'\r\n\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Chip from '@material-ui/core/Chip'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport userIcon from 'assets/profile-user.svg'\r\nimport { calculateAge } from 'utils/helper'\r\nimport MyCard from 'components/Common/MyCard'\r\nimport Client from 'models/client'\r\nimport { ClientContext } from 'hooks/useClientState'\r\nimport { GlobalContext } from 'hooks/useGlobalState'\r\n\r\nimport { getClient, computeTotalPaid, computeTotalPay } from 'api/clientService'\r\n\r\nexport interface ViewClientProps {}\r\n\r\nconst ViewClient: React.SFC<ViewClientProps> = () => {\r\n  const history = useHistory()\r\n\r\n  const { id } = useParams<{ id: string }>()\r\n\r\n  const [_, globalDispatch] = useContext(GlobalContext)!\r\n\r\n  const [clientState] = useContext(ClientContext)!\r\n\r\n  const [client, setClient] = useState<Client>()\r\n\r\n  useEffect(() => {\r\n    globalDispatch({ type: 'setTitle', payload: 'Client Details' })\r\n    getClient(clientState.clients, +id).then((client) => setClient(client))\r\n  }, [])\r\n\r\n  const detail = (title: string, subtitle: any) => (\r\n    <Grid container alignItems='center' direction='column' item xs={6}>\r\n      <Typography component='h6' variant='h6'>\r\n        {title}\r\n      </Typography>\r\n      <Typography variant='subtitle1' color='textSecondary'>\r\n        {subtitle}\r\n      </Typography>\r\n    </Grid>\r\n  )\r\n\r\n  return (\r\n    <Grid container xs={12}>\r\n      {client && (\r\n        <>\r\n          <MyCard title={client.code}>\r\n            <CardContent>\r\n              <Grid container xs={12} justify='space-between'>\r\n                <Grid\r\n                  style={{ paddingLeft: 10 }}\r\n                  container\r\n                  direction='column'\r\n                  item\r\n                  xs={7}\r\n                  justify='flex-start'\r\n                >\r\n                  <Typography component='h6' variant='h6'>\r\n                    {`${client.lastname}, ${client.firstname} ${client.middlename}`}\r\n                  </Typography>\r\n                  <Typography variant='subtitle1' color='textSecondary'>\r\n                    {client.plan + ' - ' + client.payment_mode}\r\n                  </Typography>\r\n\r\n                  <Grid item xs={1}>\r\n                    <Chip\r\n                      style={{ marginTop: 5 }}\r\n                      size='small'\r\n                      label={\r\n                        computeTotalPaid(client) +\r\n                        '/' +\r\n                        computeTotalPay(client) +\r\n                        ' Paid'\r\n                      }\r\n                      variant='default'\r\n                      color='secondary'\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid\r\n                  container\r\n                  item\r\n                  xs={5}\r\n                  justify='center'\r\n                  alignItems='center'\r\n                >\r\n                  <IconButton aria-label='play/pause'>\r\n                    <img\r\n                      style={{ width: 100 }}\r\n                      src={userIcon}\r\n                      alt='User Logo'\r\n                    />\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n            <Divider style={{ marginLeft: 20, marginRight: 20 }}></Divider>\r\n            <CardContent>\r\n              <Grid spacing={1} container xs={12} style={{ paddingLeft: 10 }}>\r\n                {detail('Period ', client.payment_period)}\r\n                {detail('Balance', 'Php ' + client.balance)}\r\n                {detail('Branch', client.branch)}\r\n                {detail('Ended', client.end_date?.toLocaleDateString())}\r\n              </Grid>\r\n            </CardContent>\r\n            <Divider style={{ marginLeft: 20, marginRight: 20 }}></Divider>\r\n            <CardContent>\r\n              <Grid spacing={1} container xs={12} style={{ paddingLeft: 10 }}>\r\n                {detail('Gender', client.gender)}\r\n                {detail('Civil Status', client.civil)}\r\n                {detail('Contact', client.contact)}\r\n                {detail(\r\n                  'Age',\r\n                  client.birthdate ? calculateAge(client.birthdate) : 'N/A',\r\n                )}\r\n\r\n                <Grid\r\n                  container\r\n                  alignItems='center'\r\n                  direction='column'\r\n                  item\r\n                  xs={12}\r\n                >\r\n                  <Typography component='h6' variant='h6'>\r\n                    Address\r\n                  </Typography>\r\n                  <Typography variant='subtitle1' color='textSecondary'>\r\n                    {client.address}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n          </MyCard>\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 10, paddingBottom: 5 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.goBack()}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.push('/clients/edit/' + client.id)}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='primary'\r\n              >\r\n                EDIT\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default ViewClient\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\index.tsx",["178","179"],"import React, { useContext, useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Profile from 'models/profile'\r\nimport Client from 'models/client'\r\nimport Commissioner from 'models/commissioner'\r\nimport { ClientStepOne } from './ClientStepOne'\r\nimport { ClientStepTwo } from './ClientStepTwo'\r\nimport MyStepper, { useStepper } from 'components/Common/MyStepper'\r\nimport { ClientStepThree } from './ClientStepThree'\r\nimport Scroll from 'react-scroll'\r\nimport { GlobalContext } from 'hooks/useGlobalState'\r\n\r\nexport interface NewClientProps {}\r\n\r\nconst NewClient: React.SFC<NewClientProps> = () => {\r\n  const [state, dispatch] = useContext(GlobalContext)!\r\n\r\n  const scroll = Scroll.animateScroll\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'setTitle', payload: 'Client Registration' })\r\n    scroll.scrollToTop({ duration: 500 })\r\n  }, [])\r\n\r\n  const history = useHistory()\r\n\r\n  const stepper = useStepper([\r\n    'Create Profile Account',\r\n    'Select All Commissioners',\r\n    'Select Plan And Payment',\r\n  ])\r\n\r\n  const [profile, setProfile] = React.useState<Profile>({})\r\n\r\n  const [commissioner, setCommissioner] = React.useState<Commissioner>({\r\n    position: 'sales_agent',\r\n  })\r\n\r\n  const [client, setClient] = React.useState<Client>({})\r\n\r\n  const onNextOne = async (profile: Profile) => {\r\n    scroll.scrollToTop({ duration: 500 })\r\n    console.log('profile', profile)\r\n    setProfile(profile)\r\n    stepper.handleNext()\r\n  }\r\n\r\n  const onNextTwo = async (commissioner: Commissioner) => {\r\n    const insured_employee = commissioner[commissioner.position] ?? ''\r\n\r\n    if (!insured_employee) {\r\n      dispatch({\r\n        type: 'setAlert',\r\n        payload: {\r\n          message:\r\n            'Sales Agent is not present! Please select another employee.',\r\n          type: 'error',\r\n        },\r\n      })\r\n\r\n      return\r\n    }\r\n\r\n    scroll.scrollToTop({ duration: 500 })\r\n\r\n    setClient((client) => ({ ...client, insured_employee }))\r\n\r\n    setCommissioner(commissioner)\r\n\r\n    stepper.handleNext()\r\n\r\n    console.log(commissioner)\r\n  }\r\n\r\n  const onNextThree = async (client: Client) => {\r\n    scroll.scrollToTop({ duration: 500 })\r\n\r\n    setClient(client)\r\n\r\n    stepper.handleNext()\r\n\r\n    console.log({\r\n      client: { ...profile, ...client },\r\n      commissioner,\r\n    })\r\n  }\r\n\r\n  const onAddNew = () => {\r\n    stepper.handleReset()\r\n    setProfile({})\r\n    setCommissioner({\r\n      position: 'sales_agent',\r\n    })\r\n    setClient({})\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <MyStepper {...stepper} />\r\n      {stepper.activeStep === 0 && (\r\n        <ClientStepOne onNext={onNextOne} state={[profile, setProfile]} />\r\n      )}\r\n      {stepper.activeStep === 1 && (\r\n        <ClientStepTwo\r\n          onBack={() => stepper.handleBack()}\r\n          onNext={onNextTwo}\r\n          state={[commissioner, setCommissioner]}\r\n        />\r\n      )}\r\n      {stepper.activeStep === 2 && (\r\n        <ClientStepThree\r\n          onBack={() => stepper.handleBack()}\r\n          onNext={onNextThree}\r\n          state={[client, setClient]}\r\n        />\r\n      )}\r\n\r\n      {stepper.activeStep === 3 && (\r\n        <Grid container xs={12} direction='column' alignItems='center'>\r\n          <Typography component='h6' variant='subtitle1'>\r\n            All Step Completed!\r\n          </Typography>\r\n          <Grid spacing={2} item container xs={12}>\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.replace('/clients')}\r\n                style={{ paddingTop: 15, paddingBottom: 15, marginTop: 10 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                CLIENT LIST\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={onAddNew}\r\n                style={{ paddingTop: 15, paddingBottom: 15, marginTop: 10 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='primary'\r\n              >\r\n                ADD NEW\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default NewClient\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\ClientStepOne.tsx",["180"],"import React, { useContext } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport MyForm, { MyFormProps } from 'components/Common/MyForm'\r\nimport Profile from 'models/profile'\r\nimport validator from 'validators/saveProfileValidator'\r\n\r\nexport interface ClientStepOneProps {\r\n  state: [Profile, React.Dispatch<React.SetStateAction<Profile>>]\r\n  onNext: (profile: Profile) => Promise<void>\r\n}\r\n\r\nexport const ClientStepOne: React.SFC<ClientStepOneProps> = ({\r\n  state: [profile, setProfile],\r\n  onNext,\r\n}) => {\r\n  const history = useHistory()\r\n\r\n  const formProps: MyFormProps<Profile> = {\r\n    state: [profile, setProfile],\r\n    onSubmit: onNext,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myInput, mySelect, myDateTimePicker, myButton }) => (\r\n        <>\r\n          {myInput({\r\n            label: 'Firstname',\r\n            value: profile.firstname,\r\n            name: 'firstname',\r\n          })}\r\n          {myInput({\r\n            label: 'Middlename',\r\n            value: profile.middlename,\r\n            name: 'middlename',\r\n          })}\r\n          {myInput({\r\n            label: 'Lastname',\r\n            value: profile.lastname,\r\n            name: 'lastname',\r\n          })}\r\n          {myInput({\r\n            label: 'Contact Number',\r\n            value: profile.contact,\r\n            name: 'contact',\r\n          })}\r\n\r\n          {myInput({\r\n            label: 'Address',\r\n            value: profile.address,\r\n            name: 'address',\r\n            isMultiline: true,\r\n          })}\r\n          {mySelect({\r\n            label: 'Gender',\r\n            value: profile.gender,\r\n            name: 'gender',\r\n            options: [\r\n              { value: 'Male' },\r\n              { value: 'Female' },\r\n              { value: 'Other' },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Civil Status',\r\n            value: profile.civil,\r\n            name: 'civil',\r\n            labelWidth: 80,\r\n            options: [\r\n              { value: 'Single' },\r\n              { value: 'Married' },\r\n              { value: 'Widowed' },\r\n            ],\r\n          })}\r\n\r\n          {myDateTimePicker({\r\n            label: 'Birthdate',\r\n            value: profile.birthdate,\r\n            name: 'birthdate',\r\n          })}\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 10, paddingBottom: 5 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.goBack()}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton('NEXT')}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\n\r\nexport default ClientStepOne\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\ClientStepTwo.tsx",["181","182","183"],"import React from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport MyForm, { MyFormProps } from 'components/Common/MyForm'\r\nimport Client from 'models/client'\r\nimport Commissioner from 'models/commissioner'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport validator from 'validators/clientStepTwoValidator'\r\n\r\nexport interface ClientStepTwoProps {\r\n  onBack: () => void\r\n  onNext: (commissioner: Commissioner) => Promise<void>\r\n  state: [Commissioner, React.Dispatch<React.SetStateAction<Commissioner>>]\r\n}\r\n\r\nexport const ClientStepTwo: React.SFC<ClientStepTwoProps> = ({\r\n  state: [commissioner, setCommissioner],\r\n  onBack,\r\n  onNext,\r\n}) => {\r\n  const formProps: MyFormProps<Commissioner> = {\r\n    state: [commissioner, setCommissioner],\r\n    onSubmit: onNext,\r\n    validator,\r\n    radioButtonDefaultValue: commissioner.position,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myRadio, mySelect, myButton }) => (\r\n        <>\r\n          <Grid\r\n            style={{ paddingLeft: 10, marginTop: 5 }}\r\n            spacing={2}\r\n            container\r\n            xs={12}\r\n          >\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Branch Manager',\r\n                  value: commissioner.branch_manager,\r\n                  name: 'branch_manager',\r\n                  labelWidth: 120,\r\n                  options: [\r\n                    { value: 1, name: 'John Doe' },\r\n                    { value: 2, name: 'John Smith' },\r\n                  ],\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'branch_manager', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Agency Manager',\r\n                  value: commissioner.agency_manager,\r\n                  name: 'agency_manager',\r\n                  labelWidth: 120,\r\n                  options: [\r\n                    { value: 3, name: 'John Joe' },\r\n                    { value: 4, name: 'John Witch' },\r\n                  ],\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'agency_manager', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Supervisor',\r\n                  value: commissioner.supervisor,\r\n                  name: 'supervisor',\r\n                  labelWidth: 80,\r\n                  options: [\r\n                    { value: 5, name: 'John Doex' },\r\n                    { value: 6, name: 'John Smithx' },\r\n                  ],\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'supervisor', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Sales Agent',\r\n                  value: commissioner.sales_agent,\r\n                  name: 'sales_agent',\r\n                  labelWidth: 85,\r\n                  options: [\r\n                    { value: 7, name: 'John Doex' },\r\n                    { value: 8, name: 'John Smithc' },\r\n                  ],\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'sales_agent', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n          </Grid>\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 15, paddingBottom: 15 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => onBack()}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton('NEXT')}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\saveEmployeeValidator.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\saveProfileValidator.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyStepper\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\ClientStepThree.tsx",["184"],"import React from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport MyForm, { MyFormProps } from 'components/Common/MyForm'\r\nimport Client from 'models/client'\r\nimport Commissioner from 'models/commissioner'\r\nimport validator from 'validators/clientStepThreeValidator'\r\n\r\nexport interface ClientStepTwoProps {\r\n  onBack: () => void\r\n  onNext: (client: Client) => Promise<void>\r\n  state: [Client, React.Dispatch<React.SetStateAction<Client>>]\r\n}\r\n\r\nexport const ClientStepThree: React.SFC<ClientStepTwoProps> = ({\r\n  state: [client, setClient],\r\n  onBack,\r\n  onNext,\r\n}) => {\r\n  const formProps: MyFormProps<Client> = {\r\n    state: [client, setClient],\r\n    onSubmit: onNext,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myInput, mySelect, myButton }) => (\r\n        <>\r\n          {mySelect({\r\n            label: 'Plan',\r\n            value: client.plan,\r\n            name: 'plan',\r\n            labelWidth: 30,\r\n            options: [\r\n              { value: 'Plan 1' },\r\n              { value: 'Plan 2' },\r\n              { value: 'Plan 3' },\r\n            ],\r\n          })}\r\n          {mySelect({\r\n            label: 'Payment Mode',\r\n            value: client.payment_mode,\r\n            name: 'payment_mode',\r\n            labelWidth: 110,\r\n            options: [{ value: 'Installment' }, { value: 'Fullpayment' }],\r\n          })}\r\n\r\n          {client.payment_mode && client.plan && (\r\n            <>\r\n              {client.payment_mode === 'Installment' &&\r\n                mySelect({\r\n                  label: 'Payment Period',\r\n                  value: client.payment_period,\r\n                  name: 'payment_period',\r\n                  labelWidth: 120,\r\n                  options: [\r\n                    { value: 'Monthly' },\r\n                    { value: 'Quarterly' },\r\n                    { value: 'Semi-Annually' },\r\n                    { value: 'Annually' },\r\n                  ],\r\n                })}\r\n\r\n              <Grid\r\n                xs={12}\r\n                style={{\r\n                  marginBottom: 10,\r\n                  marginTop: 10,\r\n                  paddingRight: 8,\r\n                  paddingLeft: 8,\r\n                }}\r\n                direction='column'\r\n              >\r\n                {myInput({\r\n                  label: 'OR Number',\r\n                  name: 'or_number',\r\n                })}\r\n              </Grid>\r\n\r\n              <Grid style={{ paddingLeft: 10 }} direction='column'>\r\n                {client.payment_period &&\r\n                  client.payment_mode === 'Installment' && (\r\n                    <>\r\n                      <Typography component='h6' variant='subtitle1'>\r\n                        Downpayment\r\n                      </Typography>\r\n                      <Typography color='primary' variant='subtitle1'>\r\n                        Php 388.00\r\n                      </Typography>\r\n                    </>\r\n                  )}\r\n                {client.payment_mode === 'Fullpayment' && (\r\n                  <>\r\n                    <Typography component='h6' variant='subtitle1'>\r\n                      Lumpsum Price\r\n                    </Typography>\r\n                    <Typography color='primary' variant='subtitle1'>\r\n                      Php 23,280.00\r\n                    </Typography>\r\n                  </>\r\n                )}\r\n              </Grid>\r\n            </>\r\n          )}\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 15, paddingBottom: 15 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => onBack()}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton('PAY')}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\clientStepTwoValidator.tsx",["185"],"import Joi from 'joi'\r\nimport { lettersOnly, notNull } from 'utils/helper'\r\n\r\nconst clientStepTwoValidator = {\r\n  branch_manager: notNull('Branch Manager'),\r\n  agency_manager: notNull('Agency Manager'),\r\n  supervisor: notNull('Supervisor'),\r\n  sales_agent: Joi.optional(),\r\n  position: notNull('Position'),\r\n  insured_employee: Joi.optional(),\r\n}\r\n\r\nexport default clientStepTwoValidator\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\clientStepThreeValidator.tsx",["186"],"import Joi from 'joi'\r\nimport { lettersOnly, notNull } from 'utils/helper'\r\n\r\nconst clientStepThreeValidator = {\r\n  plan: notNull('Plan'),\r\n  insured_employee: Joi.optional(),\r\n  payment_mode: notNull('Payment Mode'),\r\n  or_number: notNull('OR Number'),\r\n  payment_period: Joi.when('payment_mode', {\r\n    is: Joi.string().valid('Fullpayment'),\r\n    then: Joi.valid(null),\r\n    otherwise: notNull('Payment Period'),\r\n  }),\r\n}\r\n\r\nexport default clientStepThreeValidator\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\ClientProvicer.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\hooks\\useGlobalState.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\hooks\\useClientState.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\api\\clientService.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\ViewEmployee\\index.tsx",["187","188","189"],{"ruleId":"190","replacedBy":"191"},{"ruleId":"192","replacedBy":"193"},{"ruleId":"194","severity":1,"message":"195","line":18,"column":9,"nodeType":"196","messageId":"197","endLine":18,"endColumn":16},{"ruleId":"194","severity":1,"message":"198","line":26,"column":9,"nodeType":"196","messageId":"197","endLine":26,"endColumn":15},{"ruleId":"194","severity":1,"message":"199","line":7,"column":10,"nodeType":"196","messageId":"197","endLine":7,"endColumn":15},{"ruleId":"200","severity":1,"message":"201","line":11,"column":6,"nodeType":"202","endLine":11,"endColumn":8,"suggestions":"203"},{"ruleId":"194","severity":1,"message":"199","line":63,"column":10,"nodeType":"196","messageId":"197","endLine":63,"endColumn":15},{"ruleId":"194","severity":1,"message":"199","line":18,"column":10,"nodeType":"196","messageId":"197","endLine":18,"endColumn":15},{"ruleId":"200","severity":1,"message":"201","line":22,"column":6,"nodeType":"202","endLine":22,"endColumn":8,"suggestions":"204"},{"ruleId":"194","severity":1,"message":"205","line":7,"column":31,"nodeType":"196","messageId":"197","endLine":7,"endColumn":41},{"ruleId":"194","severity":1,"message":"206","line":13,"column":10,"nodeType":"196","messageId":"197","endLine":13,"endColumn":11},{"ruleId":"194","severity":1,"message":"206","line":13,"column":10,"nodeType":"196","messageId":"197","endLine":13,"endColumn":11},{"ruleId":"194","severity":1,"message":"207","line":2,"column":8,"nodeType":"196","messageId":"197","endLine":2,"endColumn":14},{"ruleId":"194","severity":1,"message":"206","line":20,"column":10,"nodeType":"196","messageId":"197","endLine":20,"endColumn":11},{"ruleId":"200","severity":1,"message":"208","line":31,"column":6,"nodeType":"202","endLine":31,"endColumn":8,"suggestions":"209"},{"ruleId":"194","severity":1,"message":"210","line":12,"column":8,"nodeType":"196","messageId":"197","endLine":12,"endColumn":14},{"ruleId":"194","severity":1,"message":"211","line":13,"column":8,"nodeType":"196","messageId":"197","endLine":13,"endColumn":16},{"ruleId":"194","severity":1,"message":"206","line":27,"column":10,"nodeType":"196","messageId":"197","endLine":27,"endColumn":11},{"ruleId":"200","severity":1,"message":"212","line":36,"column":6,"nodeType":"202","endLine":36,"endColumn":8,"suggestions":"213"},{"ruleId":"194","severity":1,"message":"199","line":19,"column":10,"nodeType":"196","messageId":"197","endLine":19,"endColumn":15},{"ruleId":"200","severity":1,"message":"214","line":26,"column":6,"nodeType":"202","endLine":26,"endColumn":8,"suggestions":"215"},{"ruleId":"194","severity":1,"message":"216","line":1,"column":17,"nodeType":"196","messageId":"197","endLine":1,"endColumn":27},{"ruleId":"194","severity":1,"message":"217","line":4,"column":8,"nodeType":"196","messageId":"197","endLine":4,"endColumn":18},{"ruleId":"194","severity":1,"message":"207","line":6,"column":8,"nodeType":"196","messageId":"197","endLine":6,"endColumn":14},{"ruleId":"194","severity":1,"message":"218","line":8,"column":8,"nodeType":"196","messageId":"197","endLine":8,"endColumn":15},{"ruleId":"194","severity":1,"message":"219","line":7,"column":8,"nodeType":"196","messageId":"197","endLine":7,"endColumn":20},{"ruleId":"194","severity":1,"message":"220","line":2,"column":10,"nodeType":"196","messageId":"197","endLine":2,"endColumn":21},{"ruleId":"194","severity":1,"message":"220","line":2,"column":10,"nodeType":"196","messageId":"197","endLine":2,"endColumn":21},{"ruleId":"194","severity":1,"message":"221","line":8,"column":8,"nodeType":"196","messageId":"197","endLine":8,"endColumn":16},{"ruleId":"194","severity":1,"message":"206","line":23,"column":10,"nodeType":"196","messageId":"197","endLine":23,"endColumn":11},{"ruleId":"200","severity":1,"message":"201","line":27,"column":6,"nodeType":"202","endLine":27,"endColumn":8,"suggestions":"222"},"no-native-reassign",["223"],"no-negated-in-lhs",["224"],"@typescript-eslint/no-unused-vars","'history' is assigned a value but never used.","Identifier","unusedVar","'styles' is assigned a value but never used.","'state' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["225"],["226"],"'InputProps' is defined but never used.","'_' is assigned a value but never used.","'Client' is defined but never used.","React Hook useEffect has missing dependencies: 'clientDispatch' and 'globalDispatch'. Either include them or remove the dependency array.",["227"],"'Avatar' is defined but never used.","'userIcon' is defined but never used.","React Hook useEffect has missing dependencies: 'clientState.clients', 'globalDispatch', and 'id'. Either include them or remove the dependency array.",["228"],"React Hook useEffect has missing dependencies: 'dispatch' and 'scroll'. Either include them or remove the dependency array.",["229"],"'useContext' is defined but never used.","'Typography' is defined but never used.","'Divider' is defined but never used.","'Commissioner' is defined but never used.","'lettersOnly' is defined but never used.","'EditIcon' is defined but never used.",["230"],"no-global-assign","no-unsafe-negation",{"desc":"231","fix":"232"},{"desc":"231","fix":"233"},{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},{"desc":"231","fix":"240"},"Update the dependencies array to be: [dispatch]",{"range":"241","text":"242"},{"range":"243","text":"242"},"Update the dependencies array to be: [clientDispatch, globalDispatch]",{"range":"244","text":"245"},"Update the dependencies array to be: [clientState.clients, globalDispatch, id]",{"range":"246","text":"247"},"Update the dependencies array to be: [dispatch, scroll]",{"range":"248","text":"249"},{"range":"250","text":"242"},[344,346],"[dispatch]",[757,759],[1141,1143],"[clientDispatch, globalDispatch]",[1358,1360],"[clientState.clients, globalDispatch, id]",[1007,1009],"[dispatch, scroll]",[1005,1007]]