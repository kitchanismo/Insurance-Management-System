[{"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\index.tsx":"1","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\App.tsx":"2","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\utils\\helper.ts":"3","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\index.tsx":"4","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\NewEmployee\\index.tsx":"5","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\EditEmployee\\index.tsx":"6","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\EmployeeCard\\index.tsx":"7","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\clients\\index.tsx":"8","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MySearchField\\index.tsx":"9","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\index.tsx":"10","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\ClientCard\\index.tsx":"11","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyAvatar\\index.tsx":"12","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\ViewClient\\index.tsx":"13","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\index.tsx":"14","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\ClientStepOne.tsx":"15","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\ClientStepTwo.tsx":"16","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\saveEmployeeValidator.tsx":"17","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\saveProfileValidator.tsx":"18","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\ClientStepThree.tsx":"19","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\clientStepTwoValidator.tsx":"20","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\clientStepThreeValidator.tsx":"21","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\ViewEmployee\\index.tsx":"22","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Employees\\index.tsx":"23","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Employees\\ViewEmployee\\index.tsx":"24","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\index.tsx":"25","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\ViewClient\\index.tsx":"26","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Employees\\NewEmployee\\index.tsx":"27","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Employees\\EditEmployee\\index.tsx":"28","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\NewClient\\index.tsx":"29","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\NewClient\\ClientStepOne.tsx":"30","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\NewClient\\ClientStepTwo.tsx":"31","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\NewClient\\ClientStepThree.tsx":"32","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Employees\\EmployeeCard\\index.tsx":"33","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\ClientCard\\index.tsx":"34","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MySearchField\\index.tsx":"35","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyAvatar\\index.tsx":"36","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\layout\\index.tsx":"37","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyAlert\\index.tsx":"38","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyNav\\index.tsx":"39","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyForm\\index.tsx":"40","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyStepper\\index.tsx":"41","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyDrawer\\index.tsx":"42","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyCard\\index.tsx":"43","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Dashboard\\index.tsx":"44","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\EmployeeProvider.tsx":"45","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MySkeletonCards\\index.tsx":"46","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\utils\\http.ts":"47","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MySkeletonCard\\index.tsx":"48","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Auth\\SignIn\\index.tsx":"49","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\signInValidator.tsx":"50","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyAuthRoute\\index.tsx":"51","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\Transaction\\index.tsx":"52","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyMiniCards\\index.tsx":"53","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\Transaction\\TransactionForm.tsx":"54","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\clientTransactionValidator.tsx":"55","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Settings\\index.tsx":"56","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MySkeletonMiniCards\\index.tsx":"57","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyChips\\index.tsx":"58","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\EditClient\\index.tsx":"59","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Payments\\index.tsx":"60","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\PaymentProvider.tsx":"61","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Payments\\PaymentCard\\index.tsx":"62","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\GlobalProvider.tsx":"63","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\ClientProvider.tsx":"64","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\services\\clientService.tsx":"65","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\services\\employeeService.tsx":"66","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\services\\paymentService.tsx":"67","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\services\\authService.tsx":"68"},{"size":357,"mtime":1612608328875,"results":"69","hashOfConfig":"70"},{"size":860,"mtime":1612609925603,"results":"71","hashOfConfig":"70"},{"size":2097,"mtime":1612292428996,"results":"72","hashOfConfig":"70"},{"size":2405,"mtime":1612026326387,"results":"73","hashOfConfig":"70"},{"size":4262,"mtime":1612026038974,"results":"74","hashOfConfig":"70"},{"size":4389,"mtime":1612026139393,"results":"75","hashOfConfig":"70"},{"size":2913,"mtime":1612026087251,"results":"76","hashOfConfig":"70"},{"size":27,"mtime":1611588252955,"results":"77","hashOfConfig":"70"},{"size":1510,"mtime":1612025364106,"results":"78","hashOfConfig":"70"},{"size":2067,"mtime":1612025557633,"results":"79","hashOfConfig":"70"},{"size":2958,"mtime":1612025770740,"results":"80","hashOfConfig":"70"},{"size":400,"mtime":1612025207022,"results":"81","hashOfConfig":"70"},{"size":6132,"mtime":1612025599805,"results":"82","hashOfConfig":"70"},{"size":4334,"mtime":1612025652721,"results":"83","hashOfConfig":"70"},{"size":3116,"mtime":1612025682832,"results":"84","hashOfConfig":"70"},{"size":4540,"mtime":1612025713442,"results":"85","hashOfConfig":"70"},{"size":518,"mtime":1612529121407,"results":"86","hashOfConfig":"70"},{"size":382,"mtime":1612444021661,"results":"87","hashOfConfig":"70"},{"size":4188,"mtime":1612025697638,"results":"88","hashOfConfig":"70"},{"size":389,"mtime":1611869862713,"results":"89","hashOfConfig":"70"},{"size":484,"mtime":1612442435359,"results":"90","hashOfConfig":"70"},{"size":5777,"mtime":1612025945257,"results":"91","hashOfConfig":"70"},{"size":2669,"mtime":1612609894955,"results":"92","hashOfConfig":"70"},{"size":8713,"mtime":1612609895816,"results":"93","hashOfConfig":"70"},{"size":2643,"mtime":1612609894955,"results":"94","hashOfConfig":"70"},{"size":6405,"mtime":1612609895698,"results":"95","hashOfConfig":"70"},{"size":6844,"mtime":1612609895604,"results":"96","hashOfConfig":"70"},{"size":5196,"mtime":1612609895604,"results":"97","hashOfConfig":"70"},{"size":4462,"mtime":1612609111542,"results":"98","hashOfConfig":"70"},{"size":3053,"mtime":1612609141083,"results":"99","hashOfConfig":"70"},{"size":4540,"mtime":1612028993833,"results":"100","hashOfConfig":"70"},{"size":4162,"mtime":1612609895605,"results":"101","hashOfConfig":"70"},{"size":3077,"mtime":1612296907560,"results":"102","hashOfConfig":"70"},{"size":3241,"mtime":1612609895699,"results":"103","hashOfConfig":"70"},{"size":1510,"mtime":1612025364106,"results":"104","hashOfConfig":"70"},{"size":948,"mtime":1612297346480,"results":"105","hashOfConfig":"70"},{"size":2358,"mtime":1612558816931,"results":"106","hashOfConfig":"70"},{"size":856,"mtime":1612608328703,"results":"107","hashOfConfig":"70"},{"size":2606,"mtime":1612608329223,"results":"108","hashOfConfig":"70"},{"size":10830,"mtime":1612609073515,"results":"109","hashOfConfig":"70"},{"size":1391,"mtime":1612055049295,"results":"110","hashOfConfig":"70"},{"size":3617,"mtime":1612608328703,"results":"111","hashOfConfig":"70"},{"size":1057,"mtime":1612470956152,"results":"112","hashOfConfig":"70"},{"size":423,"mtime":1612608329223,"results":"113","hashOfConfig":"70"},{"size":1602,"mtime":1612608810333,"results":"114","hashOfConfig":"70"},{"size":1420,"mtime":1612294543434,"results":"115","hashOfConfig":"70"},{"size":935,"mtime":1612264143119,"results":"116","hashOfConfig":"70"},{"size":1401,"mtime":1612474036715,"results":"117","hashOfConfig":"70"},{"size":2386,"mtime":1612609895816,"results":"118","hashOfConfig":"70"},{"size":197,"mtime":1612302613209,"results":"119","hashOfConfig":"70"},{"size":754,"mtime":1612608328875,"results":"120","hashOfConfig":"70"},{"size":5640,"mtime":1612609895604,"results":"121","hashOfConfig":"70"},{"size":2837,"mtime":1612608328703,"results":"122","hashOfConfig":"70"},{"size":4652,"mtime":1612528676017,"results":"123","hashOfConfig":"70"},{"size":476,"mtime":1612442365936,"results":"124","hashOfConfig":"70"},{"size":1170,"mtime":1612608328813,"results":"125","hashOfConfig":"70"},{"size":1364,"mtime":1612473662456,"results":"126","hashOfConfig":"70"},{"size":1442,"mtime":1612478320177,"results":"127","hashOfConfig":"70"},{"size":3710,"mtime":1612609223392,"results":"128","hashOfConfig":"70"},{"size":1274,"mtime":1612609894955,"results":"129","hashOfConfig":"70"},{"size":909,"mtime":1612608829617,"results":"130","hashOfConfig":"70"},{"size":2171,"mtime":1612609318980,"results":"131","hashOfConfig":"70"},{"size":2595,"mtime":1612609002380,"results":"132","hashOfConfig":"70"},{"size":2048,"mtime":1612609894736,"results":"133","hashOfConfig":"70"},{"size":3953,"mtime":1612479886630,"results":"134","hashOfConfig":"70"},{"size":2602,"mtime":1612529485012,"results":"135","hashOfConfig":"70"},{"size":1006,"mtime":1612568668400,"results":"136","hashOfConfig":"70"},{"size":161,"mtime":1612302155489,"results":"137","hashOfConfig":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"csx4bj",{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"147"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"147"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"147"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"147"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"147"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"147"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"147"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"147"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"147"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"147"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"190"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"193","messages":"194","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"195","messages":"196","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"197","messages":"198","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"190"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"190"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"190"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"190"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"190"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"216","messages":"217","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"190"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"190"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"190"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"190"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"190"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"190"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"190"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"190"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"190"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"273","messages":"274","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"283","messages":"284","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"190"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\App.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\utils\\helper.ts",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\index.tsx",["302","303"],"import React, { useContext, useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Fab from '@material-ui/core/Fab'\r\nimport AddIcon from '@material-ui/icons/Add'\r\n\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\r\n\r\nimport Employee from 'models/employee'\r\nimport EmployeeCard from './EmployeeCard'\r\nimport MySearchField from 'components/Common/MySearchField'\r\nimport { GlobalContext } from 'hooks/useGlobalState'\r\n\r\nexport interface EmployeesProps {}\r\n\r\nconst Employees: React.SFC<EmployeesProps> = () => {\r\n  const [state, dispatch] = useContext(GlobalContext)!\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'setTitle', payload: 'Employee Management' })\r\n  }, [])\r\n\r\n  const employees: Partial<Employee>[] = [\r\n    {\r\n      id: 1,\r\n      firstname: 'Ftname',\r\n      middlename: 'Mee',\r\n      lastname: 'ame',\r\n      position: 'Agency Manager',\r\n      status: 'deactive',\r\n    },\r\n    {\r\n      id: 2,\r\n      firstname: 'Firstname',\r\n      middlename: 'Middlename',\r\n      lastname: 'Lastname',\r\n      position: 'Sales Agent',\r\n      status: 'active',\r\n    },\r\n    {\r\n      id: 3,\r\n      firstname: 'Firstname',\r\n      middlename: 'Middlename',\r\n      lastname: 'Lastname',\r\n      position: 'Branch Manager',\r\n      status: 'deceased',\r\n    },\r\n\r\n    {\r\n      id: 4,\r\n      firstname: 'Firstname',\r\n      middlename: 'Middlename',\r\n      lastname: 'Lastname',\r\n      position: 'Supervisor',\r\n      status: 'active',\r\n    },\r\n  ]\r\n\r\n  const history = useHistory()\r\n\r\n  const styles = useStyles()\r\n  return (\r\n    <>\r\n      <MySearchField style={{ marginBottom: 15 }} />\r\n\r\n      <Grid\r\n        container\r\n        spacing={2}\r\n        direction='column'\r\n        justify='flex-start'\r\n        alignItems='center'\r\n      >\r\n        {employees.map((employee) => (\r\n          <Grid key={employee.id} item xs={12}>\r\n            <EmployeeCard employee={employee} />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n\r\n      <Fab\r\n        onClick={() => history.push('/employees/new')}\r\n        className={styles.fab}\r\n        color='primary'\r\n        aria-label='add'\r\n      >\r\n        <AddIcon />\r\n      </Fab>\r\n    </>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    fab: {\r\n      position: 'fixed',\r\n      bottom: 20,\r\n      right: 20,\r\n    },\r\n  }),\r\n)\r\n\r\nexport default Employees\r\n",["304","305"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\NewEmployee\\index.tsx",["306","307"],"import React, { useContext } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { GlobalContext } from 'hooks/useGlobalState'\r\nimport validator from '../../../../validators/saveEmployeeValidator'\r\nimport MyForm, { MyFormProps, InputProps } from 'components/Common/MyForm'\r\nimport Employee from 'models/employee'\r\n\r\nexport interface NewUserProps {}\r\n\r\nconst NewEmployee: React.SFC<NewUserProps> = () => {\r\n  const [_, dispatch] = useContext(GlobalContext)!\r\n\r\n  const history = useHistory()\r\n\r\n  const [employee, setEmployee] = React.useState<Employee>({\r\n    firstname: 'dfdf',\r\n    middlename: '',\r\n    lastname: '',\r\n    address: '',\r\n    contact: '',\r\n  })\r\n\r\n  const onSubmit = async (data: Employee) => {\r\n    console.log(data)\r\n    dispatch({\r\n      type: 'setAlert',\r\n      payload: { message: 'Successfully added', type: 'success' },\r\n    })\r\n    return Promise.resolve()\r\n  }\r\n\r\n  const formProps: MyFormProps<Employee> = {\r\n    state: [employee, setEmployee],\r\n    onSubmit,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myInput, mySelect, myDateTimePicker, myButton }) => (\r\n        <>\r\n          {myInput({\r\n            label: 'Firstname',\r\n            value: employee.firstname,\r\n            name: 'firstname',\r\n          })}\r\n          {myInput({\r\n            label: 'Middlename',\r\n            value: employee.middlename,\r\n            name: 'middlename',\r\n          })}\r\n          {myInput({\r\n            label: 'Lastname',\r\n            value: employee.lastname,\r\n            name: 'lastname',\r\n          })}\r\n          {myInput({\r\n            label: 'Contact Number',\r\n            value: employee.contact,\r\n            name: 'contact',\r\n          })}\r\n\r\n          {myInput({\r\n            label: 'Address',\r\n            value: employee.address,\r\n            name: 'address',\r\n            isMultiline: true,\r\n          })}\r\n          {mySelect({\r\n            label: 'Gender',\r\n            value: employee.gender,\r\n            name: 'gender',\r\n            options: [\r\n              { value: 'Male' },\r\n              { value: 'Female' },\r\n              { value: 'Other' },\r\n            ],\r\n          })}\r\n          {mySelect({\r\n            label: 'Civil Status',\r\n            value: employee.civil,\r\n            name: 'civil',\r\n            labelWidth: 80,\r\n            options: [\r\n              { value: 'Single' },\r\n              { value: 'Married' },\r\n              { value: 'Widowed' },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Position',\r\n            value: employee.position,\r\n            name: 'position',\r\n            labelWidth: 55,\r\n            options: [\r\n              { value: 'Sales Agent' },\r\n              { value: 'Branch Manager' },\r\n              { value: 'Agency Manager' },\r\n              { value: 'Supervisor' },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Branch',\r\n            value: employee.branch,\r\n            name: 'branch',\r\n            labelWidth: 55,\r\n            options: [{ value: 'Cebu' }, { value: 'Manila' }],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Team',\r\n            value: employee.team,\r\n            name: 'team',\r\n            labelWidth: 40,\r\n            options: [{ value: 'ABC' }],\r\n          })}\r\n\r\n          {myDateTimePicker({\r\n            label: 'Birthdate',\r\n            value: employee.birthdate,\r\n            name: 'birthdate',\r\n          })}\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 10, paddingBottom: 5 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.goBack()}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton()}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\nexport default NewEmployee\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\EditEmployee\\index.tsx",["308"],"import React, { useContext } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { GlobalContext } from 'hooks/useGlobalState'\r\nimport validator from '../../../../validators/saveEmployeeValidator'\r\nimport MyForm, { MyFormProps } from 'components/Common/MyForm'\r\nimport Employee from 'models/employee'\r\n\r\nexport interface EditUserProps {}\r\n\r\nconst EditEmployee: React.SFC<EditUserProps> = () => {\r\n  const [_, dispatch] = useContext(GlobalContext)!\r\n\r\n  const history = useHistory()\r\n\r\n  const [employee, setEmployee] = React.useState<Employee>({\r\n    firstname: 'sds',\r\n    middlename: 'dfdf',\r\n    lastname: 'fgf',\r\n    address: 'fgf',\r\n    contact: 'fgfg',\r\n    gender: 'Male',\r\n    civil: 'Single',\r\n    birthdate: new Date('10/03/1991'),\r\n    position: 'Branch Manager',\r\n  })\r\n\r\n  const onSubmit = async (data: Employee) => {\r\n    console.log(data)\r\n    dispatch({\r\n      type: 'setAlert',\r\n      payload: { message: 'Successfully added', type: 'success' },\r\n    })\r\n\r\n    return Promise.resolve()\r\n  }\r\n\r\n  const formProps: MyFormProps<Employee> = {\r\n    state: [employee, setEmployee],\r\n    onSubmit,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myInput, mySelect, myDateTimePicker, myButton }) => (\r\n        <>\r\n          {myInput({\r\n            label: 'Firstname',\r\n            value: employee.firstname,\r\n            name: 'firstname',\r\n          })}\r\n          {myInput({\r\n            label: 'Middlename',\r\n            value: employee.middlename,\r\n            name: 'middlename',\r\n          })}\r\n          {myInput({\r\n            label: 'Lastname',\r\n            value: employee.lastname,\r\n            name: 'lastname',\r\n          })}\r\n          {myInput({\r\n            label: 'Contact Number',\r\n            value: employee.contact,\r\n            name: 'contact',\r\n          })}\r\n\r\n          {myInput({\r\n            label: 'Address',\r\n            value: employee.address,\r\n            name: 'address',\r\n            isMultiline: true,\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Gender',\r\n            value: employee.gender,\r\n            name: 'gender',\r\n            options: [\r\n              { value: 'Male' },\r\n              { value: 'Female' },\r\n              { value: 'Other' },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Civil Status',\r\n            value: employee.civil,\r\n            name: 'civil',\r\n            labelWidth: 80,\r\n            options: [\r\n              { value: 'Single' },\r\n              { value: 'Married' },\r\n              { value: 'Widowed' },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Position',\r\n            value: employee.position,\r\n            name: 'position',\r\n            labelWidth: 55,\r\n            options: [\r\n              { value: 'Sales Agent' },\r\n              { value: 'Branch Manager' },\r\n              { value: 'Agency Manager' },\r\n              { value: 'Supervisor' },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Branch',\r\n            value: employee.branch,\r\n            name: 'branch',\r\n            labelWidth: 55,\r\n            options: [{ value: 'Cebu' }, { value: 'Manila' }],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Team',\r\n            value: employee.team,\r\n            name: 'team',\r\n            labelWidth: 40,\r\n            options: [{ value: 'ABC' }],\r\n          })}\r\n\r\n          {myDateTimePicker({\r\n            label: 'Birthdate',\r\n            value: employee.birthdate,\r\n            name: 'birthdate',\r\n          })}\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 10, paddingBottom: 5 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.goBack()}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton()}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\nexport default EditEmployee\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\EmployeeCard\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\clients\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MySearchField\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\index.tsx",["309","310","311"],"import MySearchField from 'components/Common/MySearchField'\r\nimport Client from 'models/client'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\r\n\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Fab from '@material-ui/core/Fab'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport { useHistory } from 'react-router-dom'\r\nimport ClientCard from './ClientCard'\r\nimport { useContext, useEffect } from 'react'\r\nimport { getClients } from 'api/clientService'\r\nimport { ClientContext } from 'hooks/useClientState'\r\nimport { GlobalContext } from 'hooks/useGlobalState'\r\n\r\nexport interface ClientsProps {}\r\n\r\nconst Clients: React.SFC<ClientsProps> = () => {\r\n  const [clientState, clientDispatch] = useContext(ClientContext)!\r\n\r\n  const [_, globalDispatch] = useContext(GlobalContext)!\r\n\r\n  const styles = useStyles()\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    globalDispatch({ type: 'setTitle', payload: 'Client Management' })\r\n    clientDispatch({ type: 'setIsLoading', payload: true })\r\n    getClients().then((clients) => {\r\n      clientDispatch({ type: 'onLoad', payload: clients })\r\n    })\r\n  }, [])\r\n\r\n  if (clientState.isLoading && !clientState.clients.length)\r\n    return <h4>Loading...</h4>\r\n\r\n  return (\r\n    <>\r\n      <MySearchField style={{ marginBottom: 15 }} />\r\n      <Grid\r\n        container\r\n        spacing={2}\r\n        direction='column'\r\n        justify='flex-start'\r\n        alignItems='center'\r\n      >\r\n        {clientState.clients.map((client) => (\r\n          <Grid key={client.id} item xs={12}>\r\n            <ClientCard key={client.id} client={client} />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n\r\n      <Fab\r\n        onClick={() => history.push('/clients/new')}\r\n        className={styles.fab}\r\n        color='primary'\r\n        aria-label='add'\r\n      >\r\n        <AddIcon />\r\n      </Fab>\r\n    </>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    fab: {\r\n      position: 'fixed',\r\n      bottom: 20,\r\n      right: 20,\r\n    },\r\n  }),\r\n)\r\n\r\nexport default Clients\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\ClientCard\\index.tsx",["312","313"],"import MyCard from 'components/Common/MyCard'\r\nimport React from 'react'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport ViewIcon from '@material-ui/icons/RemoveRedEye'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport Chip from '@material-ui/core/Chip'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport userIcon from 'assets/profile-user.svg'\r\nimport Client from 'models/client'\r\nimport { useHistory } from 'react-router-dom'\r\nimport MyAvatar from 'components/Common/MyAvatar'\r\nimport { computeTotalPaid, computeTotalPay } from 'api/clientService'\r\n\r\nexport interface ClientCardProps {\r\n  client: Client\r\n}\r\n\r\nexport const ClientCard: React.SFC<ClientCardProps> = ({ client }) => {\r\n  const history = useHistory()\r\n\r\n  return (\r\n    <MyCard title={client.code} style={{ paddingBottom: 5 }}>\r\n      <CardContent>\r\n        <Grid container xs={12} justify='space-between'>\r\n          <Grid\r\n            style={{ paddingLeft: 10 }}\r\n            container\r\n            item\r\n            direction='column'\r\n            xs={7}\r\n            justify='flex-start'\r\n          >\r\n            <Typography component='h6' variant='h6'>\r\n              {`${client.lastname}, ${client.firstname} ${client.middlename}`}\r\n            </Typography>\r\n            <Typography variant='subtitle1' color='textSecondary'>\r\n              {client.plan + ' - ' + client.payment_mode}\r\n            </Typography>\r\n            <Grid item xs={1}>\r\n              <Chip\r\n                style={{ marginTop: 5 }}\r\n                size='small'\r\n                label={\r\n                  computeTotalPaid(client) +\r\n                  '/' +\r\n                  computeTotalPay(client) +\r\n                  ' Paid'\r\n                }\r\n                variant='default'\r\n                color='secondary'\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item xs={5} justify='center' alignItems='center'>\r\n            <MyAvatar onClick={() => history.push('/clients/' + client.id)} />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n\r\n      <Divider style={{ marginLeft: 20, marginRight: 20 }}></Divider>\r\n      <Grid container xs={12} justify='space-evenly'>\r\n        <IconButton\r\n          onClick={() => history.push('/clients/' + client.id)}\r\n          aria-label='view'\r\n        >\r\n          <ViewIcon />\r\n        </IconButton>\r\n        <IconButton\r\n          onClick={() => history.push('/clients/edit/' + client.id)}\r\n          aria-label='edit'\r\n        >\r\n          <EditIcon />\r\n        </IconButton>\r\n        <IconButton aria-label='archive'>\r\n          <DeleteIcon />\r\n        </IconButton>\r\n      </Grid>\r\n    </MyCard>\r\n  )\r\n}\r\nexport default ClientCard\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyAvatar\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\ViewClient\\index.tsx",["314","315"],"import React, { useState, useEffect, useContext } from 'react'\r\n\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Chip from '@material-ui/core/Chip'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport userIcon from 'assets/profile-user.svg'\r\nimport { calculateAge } from 'utils/helper'\r\nimport MyCard from 'components/Common/MyCard'\r\nimport Client from 'models/client'\r\nimport { ClientContext } from 'hooks/useClientState'\r\nimport { GlobalContext } from 'hooks/useGlobalState'\r\n\r\nimport { getClient, computeTotalPaid, computeTotalPay } from 'api/clientService'\r\n\r\nexport interface ViewClientProps {}\r\n\r\nconst ViewClient: React.SFC<ViewClientProps> = () => {\r\n  const history = useHistory()\r\n\r\n  const { id } = useParams<{ id: string }>()\r\n\r\n  const [_, globalDispatch] = useContext(GlobalContext)!\r\n\r\n  const [clientState] = useContext(ClientContext)!\r\n\r\n  const [client, setClient] = useState<Client>()\r\n\r\n  useEffect(() => {\r\n    globalDispatch({ type: 'setTitle', payload: 'Client Details' })\r\n    getClient(clientState.clients, +id).then((client) => setClient(client))\r\n  }, [])\r\n\r\n  const detail = (title: string, subtitle: any) => (\r\n    <Grid container alignItems='center' direction='column' item xs={6}>\r\n      <Typography component='h6' variant='h6'>\r\n        {title}\r\n      </Typography>\r\n      <Typography variant='subtitle1' color='textSecondary'>\r\n        {subtitle}\r\n      </Typography>\r\n    </Grid>\r\n  )\r\n\r\n  return (\r\n    <Grid container xs={12}>\r\n      {client && (\r\n        <>\r\n          <MyCard title={client.code}>\r\n            <CardContent>\r\n              <Grid container xs={12} justify='space-between'>\r\n                <Grid\r\n                  style={{ paddingLeft: 10 }}\r\n                  container\r\n                  direction='column'\r\n                  item\r\n                  xs={7}\r\n                  justify='flex-start'\r\n                >\r\n                  <Typography component='h6' variant='h6'>\r\n                    {`${client.lastname}, ${client.firstname} ${client.middlename}`}\r\n                  </Typography>\r\n                  <Typography variant='subtitle1' color='textSecondary'>\r\n                    {client.plan + ' - ' + client.payment_mode}\r\n                  </Typography>\r\n\r\n                  <Grid item xs={1}>\r\n                    <Chip\r\n                      style={{ marginTop: 5 }}\r\n                      size='small'\r\n                      label={\r\n                        computeTotalPaid(client) +\r\n                        '/' +\r\n                        computeTotalPay(client) +\r\n                        ' Paid'\r\n                      }\r\n                      variant='default'\r\n                      color='secondary'\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid\r\n                  container\r\n                  item\r\n                  xs={5}\r\n                  justify='center'\r\n                  alignItems='center'\r\n                >\r\n                  <IconButton aria-label='play/pause'>\r\n                    <img\r\n                      style={{ width: 100 }}\r\n                      src={userIcon}\r\n                      alt='User Logo'\r\n                    />\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n            <Divider style={{ marginLeft: 20, marginRight: 20 }}></Divider>\r\n            <CardContent>\r\n              <Grid spacing={1} container xs={12} style={{ paddingLeft: 10 }}>\r\n                {detail('Period ', client.payment_period)}\r\n                {detail('Balance', 'Php ' + client.balance)}\r\n                {detail('Branch', client.branch)}\r\n                {detail('Ended', client.end_date?.toLocaleDateString())}\r\n              </Grid>\r\n            </CardContent>\r\n            <Divider style={{ marginLeft: 20, marginRight: 20 }}></Divider>\r\n            <CardContent>\r\n              <Grid spacing={1} container xs={12} style={{ paddingLeft: 10 }}>\r\n                {detail('Gender', client.gender)}\r\n                {detail('Civil Status', client.civil)}\r\n                {detail('Contact', client.contact)}\r\n                {detail(\r\n                  'Age',\r\n                  client.birthdate ? calculateAge(client.birthdate) : 'N/A',\r\n                )}\r\n\r\n                <Grid\r\n                  container\r\n                  alignItems='center'\r\n                  direction='column'\r\n                  item\r\n                  xs={12}\r\n                >\r\n                  <Typography component='h6' variant='h6'>\r\n                    Address\r\n                  </Typography>\r\n                  <Typography variant='subtitle1' color='textSecondary'>\r\n                    {client.address}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n          </MyCard>\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 10, paddingBottom: 5 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.goBack()}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.push('/clients/edit/' + client.id)}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='primary'\r\n              >\r\n                EDIT\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default ViewClient\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\index.tsx",["316","317"],"import React, { useContext, useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Profile from 'models/profile'\r\nimport Client from 'models/client'\r\nimport Commissioner from 'models/commissioner'\r\nimport { ClientStepOne } from './ClientStepOne'\r\nimport { ClientStepTwo } from './ClientStepTwo'\r\nimport MyStepper, { useStepper } from 'components/Common/MyStepper'\r\nimport { ClientStepThree } from './ClientStepThree'\r\nimport Scroll from 'react-scroll'\r\nimport { GlobalContext } from 'hooks/useGlobalState'\r\n\r\nexport interface NewClientProps {}\r\n\r\nconst NewClient: React.SFC<NewClientProps> = () => {\r\n  const [state, dispatch] = useContext(GlobalContext)!\r\n\r\n  const scroll = Scroll.animateScroll\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'setTitle', payload: 'Client Registration' })\r\n    scroll.scrollToTop({ duration: 500 })\r\n  }, [])\r\n\r\n  const history = useHistory()\r\n\r\n  const stepper = useStepper([\r\n    'Create Profile Account',\r\n    'Select All Commissioners',\r\n    'Select Plan And Payment',\r\n  ])\r\n\r\n  const [profile, setProfile] = React.useState<Profile>({})\r\n\r\n  const [commissioner, setCommissioner] = React.useState<Commissioner>({\r\n    position: 'sales_agent',\r\n  })\r\n\r\n  const [client, setClient] = React.useState<Client>({})\r\n\r\n  const onNextOne = async (profile: Profile) => {\r\n    scroll.scrollToTop({ duration: 500 })\r\n    console.log('profile', profile)\r\n    setProfile(profile)\r\n    stepper.handleNext()\r\n  }\r\n\r\n  const onNextTwo = async (commissioner: Commissioner) => {\r\n    const insured_employee = commissioner[commissioner.position] ?? ''\r\n\r\n    if (!insured_employee) {\r\n      dispatch({\r\n        type: 'setAlert',\r\n        payload: {\r\n          message:\r\n            'Sales Agent is not present! Please select another employee.',\r\n          type: 'error',\r\n        },\r\n      })\r\n\r\n      return\r\n    }\r\n\r\n    scroll.scrollToTop({ duration: 500 })\r\n\r\n    setClient((client) => ({ ...client, insured_employee }))\r\n\r\n    setCommissioner(commissioner)\r\n\r\n    stepper.handleNext()\r\n\r\n    console.log(commissioner)\r\n  }\r\n\r\n  const onNextThree = async (client: Client) => {\r\n    scroll.scrollToTop({ duration: 500 })\r\n\r\n    setClient(client)\r\n\r\n    stepper.handleNext()\r\n\r\n    console.log({\r\n      client: { ...profile, ...client },\r\n      commissioner,\r\n    })\r\n  }\r\n\r\n  const onAddNew = () => {\r\n    stepper.handleReset()\r\n    setProfile({})\r\n    setCommissioner({\r\n      position: 'sales_agent',\r\n    })\r\n    setClient({})\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <MyStepper {...stepper} />\r\n      {stepper.activeStep === 0 && (\r\n        <ClientStepOne onNext={onNextOne} state={[profile, setProfile]} />\r\n      )}\r\n      {stepper.activeStep === 1 && (\r\n        <ClientStepTwo\r\n          onBack={() => stepper.handleBack()}\r\n          onNext={onNextTwo}\r\n          state={[commissioner, setCommissioner]}\r\n        />\r\n      )}\r\n      {stepper.activeStep === 2 && (\r\n        <ClientStepThree\r\n          onBack={() => stepper.handleBack()}\r\n          onNext={onNextThree}\r\n          state={[client, setClient]}\r\n        />\r\n      )}\r\n\r\n      {stepper.activeStep === 3 && (\r\n        <Grid container xs={12} direction='column' alignItems='center'>\r\n          <Typography component='h6' variant='subtitle1'>\r\n            All Step Completed!\r\n          </Typography>\r\n          <Grid spacing={2} item container xs={12}>\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.replace('/clients')}\r\n                style={{ paddingTop: 15, paddingBottom: 15, marginTop: 10 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                CLIENT LIST\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={onAddNew}\r\n                style={{ paddingTop: 15, paddingBottom: 15, marginTop: 10 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='primary'\r\n              >\r\n                ADD NEW\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default NewClient\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\ClientStepOne.tsx",["318"],"import React, { useContext } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport MyForm, { MyFormProps } from 'components/Common/MyForm'\r\nimport Profile from 'models/profile'\r\nimport validator from 'validators/saveProfileValidator'\r\n\r\nexport interface ClientStepOneProps {\r\n  state: [Profile, React.Dispatch<React.SetStateAction<Profile>>]\r\n  onNext: (profile: Profile) => Promise<void>\r\n}\r\n\r\nexport const ClientStepOne: React.SFC<ClientStepOneProps> = ({\r\n  state: [profile, setProfile],\r\n  onNext,\r\n}) => {\r\n  const history = useHistory()\r\n\r\n  const formProps: MyFormProps<Profile> = {\r\n    state: [profile, setProfile],\r\n    onSubmit: onNext,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myInput, mySelect, myDateTimePicker, myButton }) => (\r\n        <>\r\n          {myInput({\r\n            label: 'Firstname',\r\n            value: profile.firstname,\r\n            name: 'firstname',\r\n          })}\r\n          {myInput({\r\n            label: 'Middlename',\r\n            value: profile.middlename,\r\n            name: 'middlename',\r\n          })}\r\n          {myInput({\r\n            label: 'Lastname',\r\n            value: profile.lastname,\r\n            name: 'lastname',\r\n          })}\r\n          {myInput({\r\n            label: 'Contact Number',\r\n            value: profile.contact,\r\n            name: 'contact',\r\n          })}\r\n\r\n          {myInput({\r\n            label: 'Address',\r\n            value: profile.address,\r\n            name: 'address',\r\n            isMultiline: true,\r\n          })}\r\n          {mySelect({\r\n            label: 'Gender',\r\n            value: profile.gender,\r\n            name: 'gender',\r\n            options: [\r\n              { value: 'Male' },\r\n              { value: 'Female' },\r\n              { value: 'Other' },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Civil Status',\r\n            value: profile.civil,\r\n            name: 'civil',\r\n            labelWidth: 80,\r\n            options: [\r\n              { value: 'Single' },\r\n              { value: 'Married' },\r\n              { value: 'Widowed' },\r\n            ],\r\n          })}\r\n\r\n          {myDateTimePicker({\r\n            label: 'Birthdate',\r\n            value: profile.birthdate,\r\n            name: 'birthdate',\r\n          })}\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 10, paddingBottom: 5 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.goBack()}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton('NEXT')}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\n\r\nexport default ClientStepOne\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\ClientStepTwo.tsx",["319","320","321"],"import React from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport MyForm, { MyFormProps } from 'components/Common/MyForm'\r\nimport Client from 'models/client'\r\nimport Commissioner from 'models/commissioner'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport validator from 'validators/clientStepTwoValidator'\r\n\r\nexport interface ClientStepTwoProps {\r\n  onBack: () => void\r\n  onNext: (commissioner: Commissioner) => Promise<void>\r\n  state: [Commissioner, React.Dispatch<React.SetStateAction<Commissioner>>]\r\n}\r\n\r\nexport const ClientStepTwo: React.SFC<ClientStepTwoProps> = ({\r\n  state: [commissioner, setCommissioner],\r\n  onBack,\r\n  onNext,\r\n}) => {\r\n  const formProps: MyFormProps<Commissioner> = {\r\n    state: [commissioner, setCommissioner],\r\n    onSubmit: onNext,\r\n    validator,\r\n    radioButtonDefaultValue: commissioner.position,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myRadio, mySelect, myButton }) => (\r\n        <>\r\n          <Grid\r\n            style={{ paddingLeft: 10, marginTop: 5 }}\r\n            spacing={2}\r\n            container\r\n            xs={12}\r\n          >\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Branch Manager',\r\n                  value: commissioner.branch_manager,\r\n                  name: 'branch_manager',\r\n                  labelWidth: 120,\r\n                  options: [\r\n                    { value: 1, name: 'John Doe' },\r\n                    { value: 2, name: 'John Smith' },\r\n                  ],\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'branch_manager', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Agency Manager',\r\n                  value: commissioner.agency_manager,\r\n                  name: 'agency_manager',\r\n                  labelWidth: 120,\r\n                  options: [\r\n                    { value: 3, name: 'John Joe' },\r\n                    { value: 4, name: 'John Witch' },\r\n                  ],\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'agency_manager', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Supervisor',\r\n                  value: commissioner.supervisor,\r\n                  name: 'supervisor',\r\n                  labelWidth: 80,\r\n                  options: [\r\n                    { value: 5, name: 'John Doex' },\r\n                    { value: 6, name: 'John Smithx' },\r\n                  ],\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'supervisor', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Sales Agent',\r\n                  value: commissioner.sales_agent,\r\n                  name: 'sales_agent',\r\n                  labelWidth: 85,\r\n                  options: [\r\n                    { value: 7, name: 'John Doex' },\r\n                    { value: 8, name: 'John Smithc' },\r\n                  ],\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'sales_agent', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n          </Grid>\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 15, paddingBottom: 15 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => onBack()}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton('NEXT')}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\saveEmployeeValidator.tsx",["322","323"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\saveProfileValidator.tsx",["324"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\ClientStepThree.tsx",["325"],"import React from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport MyForm, { MyFormProps } from 'components/Common/MyForm'\r\nimport Client from 'models/client'\r\nimport Commissioner from 'models/commissioner'\r\nimport validator from 'validators/clientStepThreeValidator'\r\n\r\nexport interface ClientStepTwoProps {\r\n  onBack: () => void\r\n  onNext: (client: Client) => Promise<void>\r\n  state: [Client, React.Dispatch<React.SetStateAction<Client>>]\r\n}\r\n\r\nexport const ClientStepThree: React.SFC<ClientStepTwoProps> = ({\r\n  state: [client, setClient],\r\n  onBack,\r\n  onNext,\r\n}) => {\r\n  const formProps: MyFormProps<Client> = {\r\n    state: [client, setClient],\r\n    onSubmit: onNext,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myInput, mySelect, myButton }) => (\r\n        <>\r\n          {mySelect({\r\n            label: 'Plan',\r\n            value: client.plan,\r\n            name: 'plan',\r\n            labelWidth: 30,\r\n            options: [\r\n              { value: 'Plan 1' },\r\n              { value: 'Plan 2' },\r\n              { value: 'Plan 3' },\r\n            ],\r\n          })}\r\n          {mySelect({\r\n            label: 'Payment Mode',\r\n            value: client.payment_mode,\r\n            name: 'payment_mode',\r\n            labelWidth: 110,\r\n            options: [{ value: 'Installment' }, { value: 'Fullpayment' }],\r\n          })}\r\n\r\n          {client.payment_mode && client.plan && (\r\n            <>\r\n              {client.payment_mode === 'Installment' &&\r\n                mySelect({\r\n                  label: 'Payment Period',\r\n                  value: client.payment_period,\r\n                  name: 'payment_period',\r\n                  labelWidth: 120,\r\n                  options: [\r\n                    { value: 'Monthly' },\r\n                    { value: 'Quarterly' },\r\n                    { value: 'Semi-Annually' },\r\n                    { value: 'Annually' },\r\n                  ],\r\n                })}\r\n\r\n              <Grid\r\n                xs={12}\r\n                style={{\r\n                  marginBottom: 10,\r\n                  marginTop: 10,\r\n                  paddingRight: 8,\r\n                  paddingLeft: 8,\r\n                }}\r\n                direction='column'\r\n              >\r\n                {myInput({\r\n                  label: 'OR Number',\r\n                  name: 'or_number',\r\n                })}\r\n              </Grid>\r\n\r\n              <Grid style={{ paddingLeft: 10 }} direction='column'>\r\n                {client.payment_period &&\r\n                  client.payment_mode === 'Installment' && (\r\n                    <>\r\n                      <Typography component='h6' variant='subtitle1'>\r\n                        Downpayment\r\n                      </Typography>\r\n                      <Typography color='primary' variant='subtitle1'>\r\n                        Php 388.00\r\n                      </Typography>\r\n                    </>\r\n                  )}\r\n                {client.payment_mode === 'Fullpayment' && (\r\n                  <>\r\n                    <Typography component='h6' variant='subtitle1'>\r\n                      Lumpsum Price\r\n                    </Typography>\r\n                    <Typography color='primary' variant='subtitle1'>\r\n                      Php 23,280.00\r\n                    </Typography>\r\n                  </>\r\n                )}\r\n              </Grid>\r\n            </>\r\n          )}\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 15, paddingBottom: 15 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => onBack()}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton('PAY')}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\clientStepTwoValidator.tsx",["326"],"import Joi from 'joi'\r\nimport { lettersOnly, notNull } from 'utils/helper'\r\n\r\nconst clientStepTwoValidator = {\r\n  branch_manager: notNull('Branch Manager'),\r\n  agency_manager: notNull('Agency Manager'),\r\n  supervisor: notNull('Supervisor'),\r\n  sales_agent: Joi.optional(),\r\n  position: notNull('Position'),\r\n  insured_employee: Joi.optional(),\r\n}\r\n\r\nexport default clientStepTwoValidator\r\n",["327","328"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\clientStepThreeValidator.tsx",["329"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\ViewEmployee\\index.tsx",["330","331","332"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Employees\\index.tsx",["333","334"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Employees\\ViewEmployee\\index.tsx",["335","336","337","338","339","340","341","342","343","344","345","346"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport Link from '@material-ui/core/Link'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Card from '@material-ui/core/Card'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport CardHeader from '@material-ui/core/CardHeader'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport Chip from '@material-ui/core/Chip'\r\nimport FaceIcon from '@material-ui/icons/Face'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport userIcon from 'assets/profile-user.svg'\r\nimport { calculateAge, capitalize } from 'utils/helper'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\r\n\r\nimport MyCard from 'components/common/MyCard'\r\nimport ClientCard from 'components/pages/Clients/ClientCard'\r\n\r\nimport Employee from 'models/employee'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport { ClientContext } from 'providers/ClientProvicer'\r\nimport Client from 'models/client'\r\nimport MyAvatar from 'components/common/MyAvatar'\r\nimport { getClients } from 'api/clientService'\r\nimport { getEmployee } from 'api/employeeService'\r\nimport MySkeletonCard from 'components/common/MySkeletonCard'\r\nimport MyMiniCards from 'components/common/MyMiniCards'\r\nimport MySkeletonMiniCards from 'components/common/MySkeletonMiniCards'\r\n\r\nexport interface ViewUserProps {\r\n  title: string\r\n}\r\n\r\nconst ViewEmployee: React.SFC<ViewUserProps> = (props) => {\r\n  const history = useHistory()\r\n  const styles = useStyles()\r\n  const [_, dispatch] = useContext(GlobalContext)!\r\n\r\n  const [clients, setClients] = useState<Client[]>([])\r\n\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true)\r\n    getClients().then((clients) => {\r\n      setClients(clients)\r\n      setIsLoading(false)\r\n    })\r\n    getEmployee().then((employee) => setEmployee(employee))\r\n    dispatch({ type: 'SET_TITLE', payload: 'View Employee' })\r\n  }, [])\r\n\r\n  const [employee, setEmployee] = useState<Employee>()\r\n\r\n  const detail = (title: string, subtitle: any) => (\r\n    <Grid container alignItems='center' direction='column' item xs={6}>\r\n      <Typography component='h6' variant='h6'>\r\n        {title}\r\n      </Typography>\r\n      <Typography variant='subtitle1' color='textSecondary'>\r\n        {subtitle}\r\n      </Typography>\r\n    </Grid>\r\n  )\r\n\r\n  const handleSelected = (client: Client) => {\r\n    history.push('/clients/' + client.id)\r\n  }\r\n\r\n  const renderClients = (clients: Client[]) => {\r\n    return (\r\n      <>\r\n        <Grid\r\n          container\r\n          style={{ marginTop: 20, marginBottom: 10 }}\r\n          xs={12}\r\n          justify='space-between'\r\n        >\r\n          <Typography variant='subtitle1'>Recent Clients</Typography>\r\n          <Link\r\n            component='button'\r\n            variant='body1'\r\n            onClick={() => history.push('/clients')}\r\n          >\r\n            View All({clients.length})\r\n          </Link>\r\n        </Grid>\r\n        <MyMiniCards onSelected={handleSelected} items={clients}>\r\n          {({ renderCards, item }) => (\r\n            <>\r\n              {renderCards({\r\n                item,\r\n                title: `${item.lastname}, ${item.firstname}`,\r\n                subtitle: item.code!,\r\n                initials: `${capitalize(item.lastname!)}${capitalize(\r\n                  item.firstname!,\r\n                )}`,\r\n              })}\r\n            </>\r\n          )}\r\n        </MyMiniCards>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid container xs={12}>\r\n        {isLoading && !employee && (\r\n          <>\r\n            <MySkeletonCard />\r\n            <Grid\r\n              container\r\n              style={{ marginBottom: 10 }}\r\n              xs={12}\r\n              justify='space-between'\r\n            >\r\n              <Typography variant='subtitle1'>Recent Clients</Typography>\r\n              <Link component='button' variant='body1'>\r\n                View All({clients.length})\r\n              </Link>\r\n              <MySkeletonMiniCards />\r\n            </Grid>\r\n          </>\r\n        )}\r\n        {!isLoading && employee && (\r\n          <>\r\n            <MyCard title='Employee Details'>\r\n              <CardContent>\r\n                <Grid container xs={12} justify='space-between'>\r\n                  <Grid\r\n                    style={{ paddingLeft: 10 }}\r\n                    container\r\n                    direction='column'\r\n                    item\r\n                    xs={7}\r\n                    justify='flex-start'\r\n                  >\r\n                    <Typography component='h6' variant='h6'>\r\n                      {`${employee.lastname}, ${employee.firstname} ${employee.middlename}`}\r\n                    </Typography>\r\n                    <Typography variant='subtitle1' color='textSecondary'>\r\n                      {employee.position}\r\n                    </Typography>\r\n                    <Grid item xs={1}>\r\n                      <Chip\r\n                        style={{ marginTop: 5 }}\r\n                        size='small'\r\n                        label={employee.status}\r\n                        variant='default'\r\n                        color={\r\n                          employee.status !== 'active' ? 'secondary' : 'primary'\r\n                        }\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid\r\n                    container\r\n                    item\r\n                    xs={5}\r\n                    justify='center'\r\n                    alignItems='center'\r\n                  >\r\n                    <MyAvatar\r\n                      text={\r\n                        capitalize(employee.lastname!) +\r\n                        capitalize(employee.firstname!)\r\n                      }\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </CardContent>\r\n              <Divider style={{ marginLeft: 20, marginRight: 20 }}></Divider>\r\n              <CardContent>\r\n                <Grid spacing={1} container xs={12} style={{ paddingLeft: 10 }}>\r\n                  {detail('Gender', employee.gender)}\r\n                  {detail('Civil Status', employee.civil)}\r\n                  {detail('Contact', employee.contact)}\r\n                  {detail(\r\n                    'Age',\r\n                    employee.birthdate\r\n                      ? calculateAge(employee.birthdate)\r\n                      : 'N/A',\r\n                  )}\r\n                  {\r\n                    <Grid\r\n                      container\r\n                      alignItems='center'\r\n                      direction='column'\r\n                      item\r\n                      xs={12}\r\n                    >\r\n                      <Typography component='h6' variant='h6'>\r\n                        Address\r\n                      </Typography>\r\n                      <Typography variant='subtitle1' color='textSecondary'>\r\n                        {employee.address}\r\n                      </Typography>\r\n                    </Grid>\r\n                  }\r\n                </Grid>\r\n              </CardContent>\r\n            </MyCard>\r\n            {renderClients(clients)}\r\n            <Grid\r\n              style={{\r\n                paddingLeft: 18,\r\n                paddingTop: 10,\r\n                paddingBottom: 5,\r\n              }}\r\n              container\r\n              xs={12}\r\n              justify='center'\r\n              spacing={2}\r\n            >\r\n              <Grid item xs={6}>\r\n                <Button\r\n                  onClick={() => history.goBack()}\r\n                  style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                  fullWidth\r\n                  variant='contained'\r\n                  color='default'\r\n                >\r\n                  BACK\r\n                </Button>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <Button\r\n                  onClick={() => history.push('/employees/edit/' + employee.id)}\r\n                  style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                  fullWidth\r\n                  variant='contained'\r\n                  color='primary'\r\n                >\r\n                  EDIT\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </>\r\n        )}\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    avatar: {\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n  }),\r\n)\r\n\r\nexport default ViewEmployee\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\index.tsx",["347","348","349"],"import MySearchField from 'components/common/MySearchField'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\r\n\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Fab from '@material-ui/core/Fab'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport { useHistory } from 'react-router-dom'\r\nimport ClientCard from './ClientCard'\r\nimport { useContext, useEffect, useState } from 'react'\r\nimport { getClients } from 'api/clientService'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport { ClientContext } from 'providers/ClientProvicer'\r\nimport MySkeletonCards from 'components/common/MySkeletonCards'\r\nimport MyChips from 'components/common/MyChips'\r\n\r\nexport interface ClientsProps {}\r\n\r\nconst Clients: React.SFC<ClientsProps> = () => {\r\n  const [clientState, clientDispatch] = useContext(ClientContext)!\r\n\r\n  const [globalState, globalDispatch] = useContext(GlobalContext)!\r\n\r\n  const styles = useStyles()\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    globalDispatch({ type: 'SET_TITLE', payload: 'Client Management' })\r\n    clientDispatch({ type: 'SET_IS_LOADING', payload: true })\r\n    globalDispatch({ type: 'SET_IS_LOADING', payload: true })\r\n    getClients().then((clients) => {\r\n      clientDispatch({ type: 'ON_LOAD_CLIENTS', payload: clients })\r\n      globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n    })\r\n  }, [])\r\n\r\n  const isLoading = clientState.isLoading && !clientState.clients.length\r\n\r\n  const chips = ['All', 'Lapse', 'Near', 'Installment', 'Fullpayment']\r\n\r\n  return (\r\n    <>\r\n      <MySearchField\r\n        onClick={() => {\r\n          clientDispatch({ type: 'ON_RELOAD_PLANS' })\r\n        }}\r\n        style={{ marginBottom: 15 }}\r\n      />\r\n\r\n      <MyChips active='All' chips={chips}></MyChips>\r\n\r\n      {isLoading && <MySkeletonCards />}\r\n      {!isLoading && (\r\n        <Grid\r\n          container\r\n          spacing={2}\r\n          direction='column'\r\n          justify='flex-start'\r\n          alignItems='center'\r\n        >\r\n          {clientState.clients.map((client) => (\r\n            <Grid key={client.id} item xs={12}>\r\n              <ClientCard key={client.id} client={client} />\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      )}\r\n\r\n      <Fab\r\n        onClick={() => history.push('/clients/new')}\r\n        className={styles.fab}\r\n        color='primary'\r\n        aria-label='add'\r\n      >\r\n        <AddIcon />\r\n      </Fab>\r\n    </>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    fab: {\r\n      position: 'fixed',\r\n      bottom: 20,\r\n      right: 20,\r\n    },\r\n  }),\r\n)\r\n\r\nexport default Clients\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\ViewClient\\index.tsx",["350","351","352","353","354"],"import React, { useState, useEffect, useContext } from 'react'\r\n\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Chip from '@material-ui/core/Chip'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport userIcon from 'assets/profile-user.svg'\r\nimport { calculateAge } from 'utils/helper'\r\nimport MyCard from 'components/common/MyCard'\r\nimport Client from 'models/client'\r\nimport { ClientContext } from 'providers/ClientProvicer'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\n\r\nimport {\r\n  getClient,\r\n  computeTotalCountPaid,\r\n  computeTotalCountToPay,\r\n} from 'api/clientService'\r\nimport MySkeletonCard from 'components/common/MySkeletonCard'\r\nimport MyAvatar from 'components/common/MyAvatar'\r\nimport { capitalize } from 'utils/helper'\r\n\r\nexport interface ViewClientProps {}\r\n\r\nconst ViewClient: React.SFC<ViewClientProps> = () => {\r\n  const history = useHistory()\r\n\r\n  const { id } = useParams<{ id: string }>()\r\n\r\n  const [_, globalDispatch] = useContext(GlobalContext)!\r\n\r\n  const [clientState] = useContext(ClientContext)!\r\n\r\n  const [client, setClient] = useState<Client>()\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true)\r\n    globalDispatch({ type: 'SET_TITLE', payload: 'Client Details' })\r\n    getClient(clientState.clients, +id).then((client) => {\r\n      setClient(client)\r\n      setIsLoading(false)\r\n    })\r\n  }, [])\r\n\r\n  const detail = (title: string, subtitle: any) => (\r\n    <Grid container alignItems='center' direction='column' item xs={6}>\r\n      <Typography component='h6' variant='h6'>\r\n        {title}\r\n      </Typography>\r\n      <Typography variant='subtitle1' color='textSecondary'>\r\n        {subtitle}\r\n      </Typography>\r\n    </Grid>\r\n  )\r\n\r\n  return (\r\n    <Grid container xs={12}>\r\n      {isLoading && !client && <MySkeletonCard />}\r\n      {client && !isLoading && (\r\n        <>\r\n          <MyCard title={client.code}>\r\n            <CardContent>\r\n              <Grid container xs={12} justify='space-between'>\r\n                <Grid\r\n                  style={{ paddingLeft: 10 }}\r\n                  container\r\n                  direction='column'\r\n                  item\r\n                  xs={7}\r\n                  justify='flex-start'\r\n                >\r\n                  <Typography component='h6' variant='h6'>\r\n                    {`${client.lastname}, ${client.firstname} ${client.middlename}`}\r\n                  </Typography>\r\n                  <Typography variant='subtitle1' color='textSecondary'>\r\n                    {client.plan + ' - ' + client.payment_mode}\r\n                  </Typography>\r\n\r\n                  <Grid item xs={1}>\r\n                    <Chip\r\n                      style={{ marginTop: 5 }}\r\n                      size='small'\r\n                      label={\r\n                        computeTotalCountPaid(client, clientState.plans) +\r\n                        ' Paid'\r\n                      }\r\n                      variant='default'\r\n                      color='secondary'\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid\r\n                  container\r\n                  item\r\n                  xs={5}\r\n                  justify='center'\r\n                  alignItems='center'\r\n                >\r\n                  <MyAvatar\r\n                    text={\r\n                      capitalize(client.lastname!) +\r\n                      capitalize(client.firstname!)\r\n                    }\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n            <Divider style={{ marginLeft: 20, marginRight: 20 }}></Divider>\r\n            <CardContent>\r\n              <Grid spacing={1} container xs={12} style={{ paddingLeft: 10 }}>\r\n                {detail('Period ', client.payment_period)}\r\n                {detail('Balance', 'Php ' + client.balance)}\r\n                {detail('Branch', client.branch)}\r\n                {detail('Insured', client.created_at?.toLocaleDateString())}\r\n              </Grid>\r\n            </CardContent>\r\n            <Divider style={{ marginLeft: 20, marginRight: 20 }}></Divider>\r\n            <CardContent>\r\n              <Grid spacing={1} container xs={12} style={{ paddingLeft: 10 }}>\r\n                {detail('Gender', client.gender)}\r\n                {detail('Civil Status', client.civil)}\r\n                {detail('Contact', client.contact)}\r\n                {detail(\r\n                  'Age',\r\n                  client.birthdate ? calculateAge(client.birthdate) : 'N/A',\r\n                )}\r\n\r\n                <Grid\r\n                  container\r\n                  alignItems='center'\r\n                  direction='column'\r\n                  item\r\n                  xs={12}\r\n                >\r\n                  <Typography component='h6' variant='h6'>\r\n                    Address\r\n                  </Typography>\r\n                  <Typography variant='subtitle1' color='textSecondary'>\r\n                    {client.address}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n          </MyCard>\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 10, paddingBottom: 5 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.goBack()}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.push('/clients/edit/' + client.id)}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='primary'\r\n              >\r\n                EDIT\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default ViewClient\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Employees\\NewEmployee\\index.tsx",["355","356","357","358"],"import React, { useContext, useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport validator from '../../../../validators/saveEmployeeValidator'\r\nimport MyForm, { MyFormProps, InputProps } from 'components/common/MyForm'\r\nimport Employee from 'models/employee'\r\nimport { postImage, saveEmployee } from 'services/employeeService'\r\nimport { EmployeeContext } from 'providers/EmployeeProvider'\r\n\r\nexport interface NewUserProps {}\r\n\r\nconst NewEmployee: React.SFC<NewUserProps> = () => {\r\n  const [_, globalDispatch] = useContext(GlobalContext)!\r\n\r\n  const [employeeState, employeeDispatch] = useContext(EmployeeContext)!\r\n\r\n  const [imageFile, setImageFile] = React.useState<HTMLImageElement | null>(\r\n    null,\r\n  )\r\n\r\n  useEffect(() => {\r\n    globalDispatch({ type: 'SET_TITLE', payload: 'Employee Registration' })\r\n  }, [])\r\n\r\n  const history = useHistory()\r\n\r\n  const [employee, setEmployee] = React.useState<Employee>({\r\n    status: 'deactive',\r\n  })\r\n\r\n  const onSubmit = async (employee: Employee) => {\r\n    globalDispatch({ type: 'SET_IS_LOADING', payload: true })\r\n\r\n    if (!employee?.image?.size) {\r\n      delete employee.image\r\n      return saveEmployee(employee).then((_employee) => {\r\n        employeeDispatch({ type: 'ON_ADD_EMPLOYEE', payload: _employee })\r\n        globalDispatch({\r\n          type: 'SET_ALERT',\r\n          payload: { message: 'Successfully added', type: 'success' },\r\n        })\r\n        globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n      })\r\n    }\r\n\r\n    return postImage(employee?.image!)\r\n      .then((res) => {\r\n        employee.imageUrl = res.data.url\r\n        delete employee.image\r\n        return saveEmployee(employee).then(() => {\r\n          globalDispatch({\r\n            type: 'SET_ALERT',\r\n            payload: { message: 'Successfully added', type: 'success' },\r\n          })\r\n          globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n        })\r\n      })\r\n      .catch((error) => {\r\n        globalDispatch({\r\n          type: 'SET_ALERT',\r\n          payload: { message: 'Error', type: error.message },\r\n        })\r\n        globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n      })\r\n  }\r\n\r\n  const formProps: MyFormProps<Employee> = {\r\n    state: [employee, setEmployee],\r\n    onSubmit,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myInput, mySelect, myDateTimePicker, myButton }) => (\r\n        <>\r\n          {myInput({\r\n            label: 'Firstname',\r\n            value: employee.firstname,\r\n            name: 'firstname',\r\n          })}\r\n          {myInput({\r\n            label: 'Middlename',\r\n            value: employee.middlename,\r\n            name: 'middlename',\r\n          })}\r\n          {myInput({\r\n            label: 'Lastname',\r\n            value: employee.lastname,\r\n            name: 'lastname',\r\n          })}\r\n          {myInput({\r\n            label: 'Contact Number',\r\n            value: employee.contact,\r\n            name: 'contact',\r\n          })}\r\n\r\n          {myInput({\r\n            label: 'Address',\r\n            value: employee.address,\r\n            name: 'address',\r\n            isMultiline: true,\r\n          })}\r\n          {mySelect({\r\n            label: 'Gender',\r\n            value: employee.gender,\r\n            name: 'gender',\r\n            options: [\r\n              { value: 'Male' },\r\n              { value: 'Female' },\r\n              { value: 'Other' },\r\n            ],\r\n          })}\r\n          {mySelect({\r\n            label: 'Civil Status',\r\n            value: employee.civil,\r\n            name: 'civil',\r\n            labelWidth: 80,\r\n            options: [\r\n              { value: 'Single' },\r\n              { value: 'Married' },\r\n              { value: 'Widowed' },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Position',\r\n            value: employee.position,\r\n            name: 'position',\r\n            labelWidth: 55,\r\n            options: [\r\n              { value: 'Sales Agent' },\r\n              { value: 'Branch Manager' },\r\n              { value: 'Agency Manager' },\r\n              { value: 'Supervisor' },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Branch',\r\n            value: employee.branch,\r\n            name: 'branch',\r\n            labelWidth: 55,\r\n            options: [{ value: 'Cebu' }, { value: 'Manila' }],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Team',\r\n            value: employee.team,\r\n            name: 'team',\r\n            labelWidth: 40,\r\n            options: [{ value: 'ABC' }],\r\n          })}\r\n\r\n          {myDateTimePicker({\r\n            label: 'Birthdate',\r\n            value: employee.birthdate,\r\n            name: 'birthdate',\r\n          })}\r\n\r\n          <Grid\r\n            container\r\n            style={{\r\n              paddingLeft: 15,\r\n              paddingRight: 15,\r\n              marginBottom: 10,\r\n            }}\r\n            alignItems='center'\r\n            justify='space-between'\r\n            xs={12}\r\n          >\r\n            <Typography variant='subtitle1'>\r\n              {imageFile?.name || 'Select Photo'}\r\n            </Typography>\r\n            <>\r\n              <input\r\n                accept='image/*'\r\n                style={{\r\n                  display: 'none',\r\n                }}\r\n                name='image'\r\n                id='icon-button-file'\r\n                type='file'\r\n                onChange={(e: any) => {\r\n                  setImageFile(e.target.files[0])\r\n                }}\r\n              />\r\n              <label htmlFor='icon-button-file'>\r\n                <IconButton\r\n                  color='primary'\r\n                  aria-label='upload picture'\r\n                  component='span'\r\n                >\r\n                  <PhotoCamera />\r\n                </IconButton>\r\n              </label>\r\n            </>\r\n          </Grid>\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 10, paddingBottom: 5 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.goBack()}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton()}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\nexport default NewEmployee\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Employees\\EditEmployee\\index.tsx",["359","360","361"],"import React, { useContext, useEffect } from 'react'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport validator from '../../../../validators/saveEmployeeValidator'\r\nimport MyForm, { MyFormProps } from 'components/common/MyForm'\r\nimport Employee from 'models/employee'\r\nimport { EmployeeContext } from 'providers/EmployeeProvider'\r\nimport { getEmployees } from 'services/employeeService'\r\n\r\nexport interface EditUserProps {}\r\n\r\nconst EditEmployee: React.SFC<EditUserProps> = () => {\r\n  const [_, globalDispatch] = useContext(GlobalContext)!\r\n\r\n  const [employeeState, employeeDispatch] = useContext(EmployeeContext)!\r\n\r\n  const history = useHistory()\r\n\r\n  const { id } = useParams<{ id: string }>()\r\n\r\n  const [employee, setEmployee] = React.useState<Employee>({\r\n    address: '',\r\n    firstname: '',\r\n    middlename: '',\r\n    lastname: '',\r\n    contact: '',\r\n  })\r\n\r\n  useEffect(() => {\r\n    globalDispatch({ type: 'SET_TITLE', payload: 'EDIT EMPLOYEE' })\r\n    employeeDispatch({ type: 'ON_GET_EMPLOYEE', payload: +id })\r\n    setEmployee(employeeState.employee)\r\n  }, [employeeState.employee])\r\n\r\n  const onSubmit = async (data: Employee) => {\r\n    console.log(data)\r\n    globalDispatch({\r\n      type: 'SET_ALERT',\r\n      payload: { message: 'Successfully added', type: 'success' },\r\n    })\r\n\r\n    return Promise.resolve()\r\n  }\r\n\r\n  const formProps: MyFormProps<Employee> = {\r\n    state: [employee, setEmployee],\r\n    onSubmit,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({\r\n        myInput,\r\n        mySelect,\r\n        myDateTimePicker,\r\n        myButton,\r\n        myControlledInput,\r\n      }) => (\r\n        <>\r\n          {myControlledInput({\r\n            label: 'Firstname',\r\n            value: employee.firstname,\r\n            name: 'firstname',\r\n          })}\r\n          {myControlledInput({\r\n            label: 'Middlename',\r\n            value: employee.middlename,\r\n            name: 'middlename',\r\n          })}\r\n          {myControlledInput({\r\n            label: 'Lastname',\r\n            value: employee.lastname,\r\n            name: 'lastname',\r\n          })}\r\n          {myControlledInput({\r\n            label: 'Contact Number',\r\n            value: employee.contact,\r\n            name: 'contact',\r\n          })}\r\n\r\n          {myControlledInput({\r\n            label: 'Address',\r\n            value: employee.address,\r\n            name: 'address',\r\n            isMultiline: true,\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Gender',\r\n            value: employee.gender,\r\n            name: 'gender',\r\n            options: [\r\n              { value: 'Male' },\r\n              { value: 'Female' },\r\n              { value: 'Other' },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Civil Status',\r\n            value: employee.civil,\r\n            name: 'civil',\r\n            labelWidth: 80,\r\n            options: [\r\n              { value: 'Single' },\r\n              { value: 'Married' },\r\n              { value: 'Widowed' },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Position',\r\n            value: employee.position,\r\n            name: 'position',\r\n            labelWidth: 55,\r\n            options: [\r\n              { value: 'Sales Agent' },\r\n              { value: 'Branch Manager' },\r\n              { value: 'Agency Manager' },\r\n              { value: 'Supervisor' },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Branch',\r\n            value: employee.branch,\r\n            name: 'branch',\r\n            labelWidth: 55,\r\n            options: [{ value: 'Cebu' }, { value: 'Manila' }],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Team',\r\n            value: employee.team,\r\n            name: 'team',\r\n            labelWidth: 40,\r\n            options: [{ value: 'ABC' }],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Status',\r\n            value: employee.status,\r\n            name: 'status',\r\n            labelWidth: 40,\r\n            options: [\r\n              { value: 'active', name: 'Active' },\r\n              { value: 'deactive', name: 'Deactive' },\r\n              { value: 'deceased', name: 'Deceased' },\r\n            ],\r\n          })}\r\n\r\n          {myDateTimePicker({\r\n            label: 'Birthdate',\r\n            value: employee.birthdate,\r\n            name: 'birthdate',\r\n          })}\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 10, paddingBottom: 5 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.goBack()}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton()}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\nexport default EditEmployee\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\NewClient\\index.tsx",["362","363"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\NewClient\\ClientStepOne.tsx",["364"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\NewClient\\ClientStepTwo.tsx",["365","366","367"],"import React from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport MyForm, { MyFormProps } from 'components/common/MyForm'\r\nimport Client from 'models/client'\r\nimport Commissioner from 'models/commissioner'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport validator from 'validators/clientStepTwoValidator'\r\n\r\nexport interface ClientStepTwoProps {\r\n  onBack: () => void\r\n  onNext: (commissioner: Commissioner) => Promise<void>\r\n  state: [Commissioner, React.Dispatch<React.SetStateAction<Commissioner>>]\r\n}\r\n\r\nexport const ClientStepTwo: React.SFC<ClientStepTwoProps> = ({\r\n  state: [commissioner, setCommissioner],\r\n  onBack,\r\n  onNext,\r\n}) => {\r\n  const formProps: MyFormProps<Commissioner> = {\r\n    state: [commissioner, setCommissioner],\r\n    onSubmit: onNext,\r\n    validator,\r\n    radioButtonDefaultValue: commissioner.position,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myRadio, mySelect, myButton }) => (\r\n        <>\r\n          <Grid\r\n            style={{ paddingLeft: 10, marginTop: 5 }}\r\n            spacing={2}\r\n            container\r\n            xs={12}\r\n          >\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Branch Manager',\r\n                  value: commissioner.branch_manager,\r\n                  name: 'branch_manager',\r\n                  labelWidth: 120,\r\n                  options: [\r\n                    { value: 1, name: 'John Doe' },\r\n                    { value: 2, name: 'John Smith' },\r\n                  ],\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'branch_manager', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Agency Manager',\r\n                  value: commissioner.agency_manager,\r\n                  name: 'agency_manager',\r\n                  labelWidth: 120,\r\n                  options: [\r\n                    { value: 3, name: 'John Joe' },\r\n                    { value: 4, name: 'John Witch' },\r\n                  ],\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'agency_manager', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Supervisor',\r\n                  value: commissioner.supervisor,\r\n                  name: 'supervisor',\r\n                  labelWidth: 80,\r\n                  options: [\r\n                    { value: 5, name: 'John Doex' },\r\n                    { value: 6, name: 'John Smithx' },\r\n                  ],\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'supervisor', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Sales Agent',\r\n                  value: commissioner.sales_agent,\r\n                  name: 'sales_agent',\r\n                  labelWidth: 85,\r\n                  options: [\r\n                    { value: 7, name: 'John Doex' },\r\n                    { value: 8, name: 'John Smithc' },\r\n                  ],\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'sales_agent', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n          </Grid>\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 15, paddingBottom: 15 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => onBack()}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton('NEXT')}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\NewClient\\ClientStepThree.tsx",["368","369","370","371"],"import { useContext, useEffect, useState } from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport MyForm, { MyFormProps, OptionProps } from 'components/common/MyForm'\r\nimport Client from 'models/client'\r\nimport Commissioner from 'models/commissioner'\r\nimport validator from 'validators/clientStepThreeValidator'\r\nimport { getAmountToPay } from 'services/clientService'\r\nimport { ClientContext } from 'providers/ClientProvider'\r\nimport Payment from 'models/payment'\r\n\r\nexport interface ClientStepTwoProps {\r\n  onBack: () => void\r\n  onNext: (client: Client & Payment) => Promise<void>\r\n  state: [\r\n    Client & Payment,\r\n    React.Dispatch<React.SetStateAction<Client & Payment>>,\r\n  ]\r\n}\r\n\r\nexport const ClientStepThree: React.SFC<ClientStepTwoProps> = ({\r\n  state: [client, setClient],\r\n  onBack,\r\n  onNext,\r\n}) => {\r\n  const [clientState, clientDispatch] = useContext(ClientContext)!\r\n  const [planOptions, setPlanOptions] = useState<OptionProps[] | []>([])\r\n\r\n  useEffect(() => {\r\n    if (client.payment_mode && client.plan) {\r\n      setClient((client) => ({\r\n        ...client,\r\n        amount: getAmountToPay(client, clientState.plans) ?? 0,\r\n      }))\r\n    }\r\n  }, [client.payment_mode, client.payment_period, client.plan])\r\n\r\n  useEffect(() => {\r\n    const options: OptionProps[] = clientState.plans.map((plan) => ({\r\n      value: plan.plan,\r\n    }))\r\n    setPlanOptions(options)\r\n  }, [clientState.plans])\r\n\r\n  const formProps: MyFormProps<Client & Payment> = {\r\n    state: [client, setClient],\r\n    onSubmit: onNext,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myControlledInput, myInput, mySelect, myButton }) => (\r\n        <>\r\n          {mySelect({\r\n            label: 'Plan',\r\n            value: client.plan,\r\n            name: 'plan',\r\n            labelWidth: 30,\r\n            options: planOptions,\r\n          })}\r\n          {mySelect({\r\n            label: 'Payment Mode',\r\n            value: client.payment_mode,\r\n            name: 'payment_mode',\r\n            labelWidth: 110,\r\n            options: [{ value: 'Installment' }, { value: 'Fullpayment' }],\r\n          })}\r\n\r\n          {client.payment_mode && client.plan && (\r\n            <>\r\n              {client.payment_mode === 'Installment' &&\r\n                mySelect({\r\n                  label: 'Payment Period',\r\n                  value: client.payment_period,\r\n                  name: 'payment_period',\r\n                  labelWidth: 120,\r\n                  options: [\r\n                    { value: 'Monthly' },\r\n                    { value: 'Quarterly' },\r\n                    { value: 'Semi-Annually' },\r\n                    { value: 'Annually' },\r\n                  ],\r\n                })}\r\n\r\n              <Grid\r\n                xs={12}\r\n                spacing={1}\r\n                style={{\r\n                  marginBottom: 10,\r\n                  marginTop: 5,\r\n                  paddingLeft: 8,\r\n                }}\r\n                container\r\n              >\r\n                {myControlledInput({\r\n                  label: 'Amount',\r\n                  name: 'amount',\r\n                  value: client.amount,\r\n                })}\r\n                <Grid style={{ marginTop: 10 }} xs={12} item>\r\n                  {myInput({\r\n                    label: 'OR Number',\r\n                    name: 'or_number',\r\n                  })}\r\n                </Grid>\r\n              </Grid>\r\n            </>\r\n          )}\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 15, paddingBottom: 15 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => onBack()}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton('PAY')}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Employees\\EmployeeCard\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\ClientCard\\index.tsx",["372","373","374","375"],"import MyCard from 'components/common/MyCard'\r\nimport { useContext } from 'react'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport ViewIcon from '@material-ui/icons/RemoveRedEye'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport Chip from '@material-ui/core/Chip'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport userIcon from 'assets/profile-user.svg'\r\nimport Client from 'models/client'\r\nimport { useHistory } from 'react-router-dom'\r\nimport MyAvatar from 'components/common/MyAvatar'\r\nimport { ClientContext } from 'providers/ClientProvicer'\r\n\r\nimport {\r\n  computeTotalCountPaid,\r\n  computeTotalCountToPay,\r\n} from 'api/clientService'\r\nimport { capitalize } from 'utils/helper'\r\n\r\nexport interface ClientCardProps {\r\n  client: Client\r\n}\r\n\r\nexport const ClientCard: React.SFC<ClientCardProps> = ({ client }) => {\r\n  const history = useHistory()\r\n  const [clientState, clientDispatch] = useContext(ClientContext)!\r\n  return (\r\n    <MyCard title={client.code} style={{ paddingBottom: 5 }}>\r\n      <CardContent>\r\n        <Grid container xs={12} justify='space-between'>\r\n          <Grid\r\n            style={{ paddingLeft: 10 }}\r\n            container\r\n            item\r\n            direction='column'\r\n            xs={7}\r\n            justify='flex-start'\r\n          >\r\n            <Typography component='h6' variant='h6'>\r\n              {`${client.lastname}, ${client.firstname} ${client.middlename}`}\r\n            </Typography>\r\n            <Typography variant='subtitle1' color='textSecondary'>\r\n              {client.plan + ' - ' + client.payment_mode}\r\n            </Typography>\r\n            <Grid item xs={1}>\r\n              <Chip\r\n                style={{ marginTop: 5 }}\r\n                size='small'\r\n                label={\r\n                  computeTotalCountPaid(client, clientState.plans) + ' Paid'\r\n                }\r\n                variant='default'\r\n                color='secondary'\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item xs={5} justify='center' alignItems='center'>\r\n            <MyAvatar\r\n              text={\r\n                capitalize(client.lastname!) + capitalize(client.firstname!)\r\n              }\r\n              onClick={() => history.push('/clients/' + client.id)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n\r\n      <Divider style={{ marginLeft: 20, marginRight: 20 }}></Divider>\r\n      <Grid container xs={12} justify='space-evenly'>\r\n        <IconButton\r\n          onClick={() => history.push('/clients/' + client.id)}\r\n          aria-label='view'\r\n        >\r\n          <ViewIcon />\r\n        </IconButton>\r\n        <IconButton\r\n          onClick={() => history.push('/clients/edit/' + client.id)}\r\n          aria-label='edit'\r\n        >\r\n          <EditIcon />\r\n        </IconButton>\r\n        <IconButton aria-label='archive'>\r\n          <DeleteIcon />\r\n        </IconButton>\r\n      </Grid>\r\n    </MyCard>\r\n  )\r\n}\r\nexport default ClientCard\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MySearchField\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyAvatar\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\layout\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyAlert\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyNav\\index.tsx",["376"],"import * as React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport Typography from '@material-ui/core/Typography'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Menu from '@material-ui/icons/Menu'\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\nimport MyDrawer from 'components/common/MyDrawer'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger'\r\nimport Slide from '@material-ui/core/Slide'\r\nimport LinearProgress from '@material-ui/core/LinearProgress'\r\n\r\nconst Nav: React.FC = (props) => {\r\n  const [state, dispatch] = React.useContext(GlobalContext)!\r\n  const history = useHistory()\r\n  const [isActive, setIsActive] = React.useState(false)\r\n\r\n  const onToggle = (title?: string) => {\r\n    setIsActive((isActive) => !isActive)\r\n\r\n    if (!title) {\r\n      return\r\n    }\r\n    dispatch({ type: 'SET_TITLE', payload: title })\r\n  }\r\n\r\n  interface Props {\r\n    window?: () => Window\r\n    children: React.ReactElement\r\n  }\r\n\r\n  function HideOnScroll(props: Props) {\r\n    const { children, window } = props\r\n    const trigger = useScrollTrigger({ target: window ? window() : undefined })\r\n\r\n    return (\r\n      <Slide appear={false} direction='down' in={!trigger}>\r\n        {children}\r\n      </Slide>\r\n    )\r\n  }\r\n  return (\r\n    <>\r\n      <MyDrawer onToggle={onToggle} isActive={isActive} />\r\n      <HideOnScroll {...props}>\r\n        <AppBar\r\n          style={{\r\n            background:\r\n              'linear-gradient(to right, #9c27b0, #9c27b0, #9c27b0, #9c27b0, #9c27b0, #a721aa, #b119a4, #ba119e, #cb0090, #d80081, #e20672, #e91e63)',\r\n          }}\r\n        >\r\n          <Toolbar>\r\n            <Grid container xs={12} justify='center'>\r\n              <Grid container xs={1} sm={5} md={4} justify='flex-start'>\r\n                <IconButton\r\n                  onClick={() => onToggle()}\r\n                  edge='start'\r\n                  color='inherit'\r\n                  aria-label='menu'\r\n                >\r\n                  <Menu />\r\n                </IconButton>\r\n              </Grid>\r\n              <Grid container xs={11} sm={5} md={4} justify='flex-end'>\r\n                <Typography style={{ paddingTop: 8 }} variant='h6'>\r\n                  {state.title}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Toolbar>\r\n\r\n          <LinearProgress hidden={!state.isLoading} />\r\n        </AppBar>\r\n      </HideOnScroll>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Nav\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyForm\\index.tsx",["377"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyStepper\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyDrawer\\index.tsx",["378","379"],"import React from 'react'\r\nimport Drawer from '@material-ui/core/Drawer'\r\nimport List from '@material-ui/core/List'\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\r\nimport EmployeesIcon from '@material-ui/icons/People'\r\nimport ClientIcon from '@material-ui/icons/SupervisedUserCircle'\r\nimport PaymentIcon from '@material-ui/icons/Receipt'\r\nimport SettingsIcon from '@material-ui/icons/Settings'\r\nimport TransactionIcon from '@material-ui/icons/Payment'\r\nimport ExitIcon from '@material-ui/icons/ExitToApp'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport makeStyles from '@material-ui/core/styles/makeStyles'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport Grid from '@material-ui/core/Grid/Grid'\r\nimport DashboardIcon from '@material-ui/icons/Dashboard'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nexport interface MyDrawerProps {\r\n  isActive: boolean\r\n  onToggle: Function\r\n}\r\n\r\nconst MyDrawer: React.FC<MyDrawerProps> = (props) => {\r\n  const styles = useStyles()\r\n\r\n  const history = useHistory()\r\n\r\n  const [state, dispatch] = React.useContext(GlobalContext)!\r\n\r\n  const menus = [\r\n    { name: 'Dashboard', path: '/dashboard', icon: <DashboardIcon /> },\r\n    {\r\n      name: 'Employee Management',\r\n      path: '/employees',\r\n      icon: <EmployeesIcon />,\r\n    },\r\n    { name: 'Client Management', path: '/clients', icon: <ClientIcon /> },\r\n    {\r\n      name: 'Encode Transaction',\r\n      path: '/clients/transaction',\r\n      icon: <TransactionIcon />,\r\n    },\r\n    {\r\n      name: 'Payment History',\r\n      path: '/payments',\r\n      icon: <PaymentIcon />,\r\n    },\r\n    {\r\n      name: 'Settings',\r\n      path: '/settings',\r\n      icon: <SettingsIcon />,\r\n    },\r\n  ]\r\n\r\n  const list = () => (\r\n    <>\r\n      <List>\r\n        {menus.map((menu, index) => (\r\n          <ListItem style={{ paddingLeft: 0 }} button key={index}>\r\n            <ListItemIcon style={{ paddingLeft: 20 }}>{menu.icon}</ListItemIcon>\r\n\r\n            <ListItemText\r\n              primary={menu.name}\r\n              onClick={() => {\r\n                props.onToggle(menu.name)\r\n                history.replace(menu.path)\r\n              }}\r\n            />\r\n          </ListItem>\r\n        ))}\r\n        <Divider\r\n          style={{\r\n            marginTop: 10,\r\n            marginLeft: 10,\r\n            marginRight: 10,\r\n          }}\r\n        ></Divider>\r\n        <ListItem style={{ paddingLeft: 0 }} button>\r\n          <ListItemIcon style={{ paddingLeft: 20 }}>\r\n            <ExitIcon />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            primary='Logout'\r\n            onClick={() => {\r\n              props.onToggle()\r\n              dispatch({ type: 'SET_IS_AUTHENTIC_USER', payload: false })\r\n            }}\r\n          />\r\n        </ListItem>\r\n      </List>\r\n    </>\r\n  )\r\n\r\n  return (\r\n    <Drawer\r\n      anchor='left'\r\n      open={props.isActive}\r\n      ModalProps={{ onBackdropClick: () => props.onToggle() }}\r\n    >\r\n      <Grid container justify='flex-end'>\r\n        <IconButton\r\n          onClick={() => props.onToggle()}\r\n          edge='start'\r\n          color='inherit'\r\n          aria-label='menu'\r\n        >\r\n          <ChevronLeftIcon />\r\n        </IconButton>\r\n      </Grid>\r\n      {list()}\r\n    </Drawer>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  close: {\r\n    paddingTop: 5,\r\n    paddingRight: 5,\r\n  },\r\n}))\r\n\r\nexport default MyDrawer\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyCard\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Dashboard\\index.tsx",["380","381"],"import { GlobalContext } from 'providers/GlobalProvider'\r\nimport React, { useContext, useEffect } from 'react'\r\n\r\nexport interface DashboardProps {}\r\n\r\nconst Dashboard: React.SFC<DashboardProps> = () => {\r\n  const [state, dispatch] = useContext(GlobalContext)!\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'SET_TITLE', payload: 'Dashboard' })\r\n  }, [])\r\n  return <h3>Under Construction</h3>\r\n}\r\n\r\nexport default Dashboard\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\EmployeeProvider.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MySkeletonCards\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\utils\\http.ts",["382"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MySkeletonCard\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Auth\\SignIn\\index.tsx",["383","384"],"import Grid from '@material-ui/core/Grid'\r\nimport MyForm, { MyFormProps } from 'components/common/MyForm'\r\nimport User from 'models/user'\r\nimport { onSignIn } from 'api/authService'\r\nimport validator from 'validators/signInValidator'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\r\n\r\nimport { useContext, useEffect, useState } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\n\r\nexport interface SignInProps {}\r\n\r\nconst SignIn: React.SFC<SignInProps> = () => {\r\n  const styles = useStyles()\r\n\r\n  const [state, dispatch] = useContext(GlobalContext)!\r\n\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'SET_TITLE', payload: 'BRAND NAME' })\r\n  }, [])\r\n\r\n  const [user, setUser] = useState<User>({ username: '', password: '' })\r\n\r\n  const onSubmit = async () => {\r\n    return onSignIn().then((res) => {\r\n      dispatch({ type: 'SET_IS_AUTHENTIC_USER', payload: true })\r\n      history.replace('/dashboard')\r\n    })\r\n  }\r\n  const formProps: MyFormProps<User> = {\r\n    state: [user, setUser],\r\n    onSubmit,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <Grid\r\n      style={{ minHeight: 450 }}\r\n      justify='space-between'\r\n      container\r\n      direction='column'\r\n      xs={12}\r\n    >\r\n      <Grid\r\n        style={{ paddingTop: 80 }}\r\n        direction='row'\r\n        container\r\n        justify='center'\r\n        alignItems='flex-start'\r\n      >\r\n        <h1>Logo</h1>\r\n      </Grid>\r\n\r\n      <div className={styles.formContainer}>\r\n        <MyForm {...formProps}>\r\n          {({ myInput, myButton }) => (\r\n            <>\r\n              {myInput({\r\n                label: 'Username',\r\n                value: user.username,\r\n                name: 'username',\r\n              })}\r\n              {myInput({\r\n                label: 'Password',\r\n                value: user.password,\r\n                name: 'password',\r\n                type: 'password',\r\n              })}\r\n              {myButton('LOGIN')}\r\n            </>\r\n          )}\r\n        </MyForm>\r\n      </div>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    formContainer: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      justifyContent: 'flex-end',\r\n\r\n      paddingLeft: 20,\r\n      paddingRight: 20,\r\n    },\r\n  }),\r\n)\r\n\r\nexport default SignIn\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\signInValidator.tsx",["385"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyAuthRoute\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\Transaction\\index.tsx",["386","387","388"],"import Grid from '@material-ui/core/Grid'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { getAmountToPay, getClients } from 'api/clientService'\r\nimport MyMiniCards from 'components/common/MyMiniCards'\r\nimport MySearchField from 'components/common/MySearchField'\r\nimport MyAvatar from 'components/common/MyAvatar'\r\nimport Client from 'models/client'\r\nimport { ClientContext } from 'providers/ClientProvicer'\r\nimport { useContext, useEffect, useState } from 'react'\r\nimport { capitalize } from 'utils/helper'\r\nimport CommissionersForm from './TransactionForm'\r\nimport TransactionModel from 'models/transaction'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport MySkeletonMiniCards from 'components/common/MySkeletonMiniCards'\r\n\r\nexport interface TransactionProps {}\r\n\r\nconst Transaction: React.SFC<TransactionProps> = () => {\r\n  const [clientState, clientDispatch] = useContext(ClientContext)!\r\n\r\n  const [globalState, globalDispatch] = useContext(GlobalContext)!\r\n\r\n  const [transaction, setTransaction] = useState<TransactionModel>({\r\n    position: 'sales_agent',\r\n    amount: 0,\r\n  })\r\n\r\n  useEffect(() => {\r\n    clientDispatch({ type: 'SET_IS_LOADING', payload: true })\r\n    globalDispatch({ type: 'SET_TITLE', payload: 'Encode Transaction' })\r\n    getClients().then((clients) => {\r\n      clientDispatch({ type: 'ON_LOAD_CLIENTS_INSTALLMENT', payload: clients })\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (transaction.id) {\r\n      let amount: number = 0\r\n\r\n      switch (transaction.payment_mode) {\r\n        case 'Installment':\r\n          amount = getAmountToPay(transaction, clientState.plans)\r\n          break\r\n        case 'Fullpayment':\r\n          amount = transaction?.balance!\r\n          break\r\n        default:\r\n          break\r\n      }\r\n      setTransaction((transaction) => ({\r\n        ...transaction,\r\n        amount,\r\n      }))\r\n    }\r\n  }, [transaction.payment_mode, transaction.id])\r\n\r\n  const handleSelected = (client: Client) => {\r\n    setTransaction((transaction) => ({\r\n      ...transaction,\r\n      ...client,\r\n    }))\r\n  }\r\n\r\n  const handleSubmit = async (transaction: TransactionModel) => {\r\n    if (!transaction.id) {\r\n      globalDispatch({\r\n        type: 'SET_ALERT',\r\n        payload: { message: 'Please Select a Client!', type: 'error' },\r\n      })\r\n      return\r\n    }\r\n\r\n    const insured_employee = transaction[transaction.position] ?? 0\r\n\r\n    if (!insured_employee) {\r\n      globalDispatch({\r\n        type: 'SET_ALERT',\r\n        payload: {\r\n          message:\r\n            'Sales Agent is not present! Please select another employee.',\r\n          type: 'error',\r\n        },\r\n      })\r\n\r\n      return\r\n    }\r\n\r\n    const {\r\n      id,\r\n      amount,\r\n      or_number,\r\n      branch_manager,\r\n      agency_manager,\r\n      supervisor,\r\n      sales_agent,\r\n    } = transaction\r\n\r\n    console.log({\r\n      client: id,\r\n      insured_employee,\r\n      amount,\r\n      or_number,\r\n      branch_manager,\r\n      agency_manager,\r\n      supervisor,\r\n      sales_agent,\r\n      created_at: new Date(Date.now()).toLocaleDateString(),\r\n    })\r\n  }\r\n\r\n  const isLoading = clientState.isLoading && !clientState.clients.length\r\n\r\n  return (\r\n    <Grid container direction='column' xs={12}>\r\n      <MySearchField labelWidth={140} label='Client Name / Code' />\r\n      {isLoading && <MySkeletonMiniCards></MySkeletonMiniCards>}\r\n\r\n      {!isLoading && (\r\n        <MyMiniCards\r\n          onSelected={handleSelected}\r\n          style={{ marginTop: 10 }}\r\n          items={clientState.clients}\r\n        >\r\n          {({ renderCards, item }) => (\r\n            <>\r\n              {renderCards({\r\n                title: `${item.lastname}, ${item.firstname}`,\r\n                subtitle: item.code!,\r\n                initials: `${capitalize(item.lastname!)}${capitalize(\r\n                  item.firstname!,\r\n                )}`,\r\n                item,\r\n              })}\r\n            </>\r\n          )}\r\n        </MyMiniCards>\r\n      )}\r\n      <Divider style={{ margin: 20 }}></Divider>\r\n      {!transaction.id && (\r\n        <Grid container xs={12} justify='center'>\r\n          <Typography component='h6' variant='h6'>\r\n            No Selected Client\r\n          </Typography>\r\n        </Grid>\r\n      )}\r\n      {transaction.id && (\r\n        <Grid\r\n          style={{ paddingLeft: 10, paddingRight: 10 }}\r\n          xs={12}\r\n          container\r\n          justify='space-between'\r\n        >\r\n          <Grid item xs={8}>\r\n            <Typography component='h6' variant='h6'>\r\n              {`${transaction?.lastname}, ${transaction?.firstname} ${transaction?.middlename}`}\r\n            </Typography>\r\n            <Typography variant='subtitle2' color='textSecondary'>\r\n              {transaction?.code}\r\n            </Typography>\r\n            <Typography variant='subtitle2' color='textSecondary'>\r\n              {transaction?.plan}\r\n            </Typography>\r\n            <Typography variant='subtitle2' color='textSecondary'>\r\n              {transaction?.payment_period}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <MyAvatar\r\n              text={`${capitalize(transaction?.lastname!)}${capitalize(\r\n                transaction?.firstname!,\r\n              )}`}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n\r\n      <Divider style={{ margin: 20 }}></Divider>\r\n\r\n      {!isLoading && transaction.id && (\r\n        <CommissionersForm\r\n          onSubmit={handleSubmit}\r\n          state={[transaction, setTransaction]}\r\n        />\r\n      )}\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default Transaction\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyMiniCards\\index.tsx",["389"],"import Grid, { GridProps } from '@material-ui/core/Grid'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardHeader from '@material-ui/core/CardHeader'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { useState, useContext } from 'react'\r\n\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\n\r\ninterface RenderProps<T> {\r\n  renderCards: (props: RenderCardsProps<T>) => JSX.Element\r\n  item: T\r\n}\r\n\r\ninterface RenderCardsProps<T> {\r\n  title: string\r\n  subtitle: string\r\n  initials: string\r\n  item?: T\r\n}\r\n\r\nexport interface MyMiniCardsProps<T> extends GridProps {\r\n  items: T[]\r\n  onSelected?: (item: T) => void\r\n  children?: (props: RenderProps<T>) => JSX.Element\r\n}\r\n\r\nfunction MyMiniCards<T>({\r\n  items,\r\n  onSelected,\r\n  children,\r\n  ...props\r\n}: MyMiniCardsProps<T>) {\r\n  const [state, _] = useContext(GlobalContext)!\r\n\r\n  const styles = useStyles(state.isDark)()\r\n\r\n  const [selectedItem, setSelectedItem] = useState<T>()\r\n\r\n  const renderCards = ({\r\n    initials,\r\n    title,\r\n    subtitle,\r\n    item,\r\n  }: RenderCardsProps<T>) => {\r\n    return (\r\n      <CardHeader\r\n        className={\r\n          selectedItem === item ? styles.headerSelected : styles.header\r\n        }\r\n        avatar={\r\n          <Avatar className={styles.avatar} aria-label='clients'>\r\n            <Typography color='inherit' variant='h6'>\r\n              {initials}\r\n            </Typography>\r\n          </Avatar>\r\n        }\r\n        title={title}\r\n        subheader={subtitle}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Grid\r\n      {...props}\r\n      container\r\n      xs={12}\r\n      justify='flex-start'\r\n      direction='row'\r\n      spacing={1}\r\n      alignItems='center'\r\n      className={styles.container}\r\n    >\r\n      {items.map((item, index) => (\r\n        <Grid item xs={12} key={index}>\r\n          <Card\r\n            onClick={() => {\r\n              onSelected?.(item)\r\n              setSelectedItem(item)\r\n            }}\r\n          >\r\n            {children?.({ renderCards, item } as RenderProps<T>)}\r\n          </Card>\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  )\r\n}\r\n\r\nconst useStyles = (isDark: boolean) =>\r\n  makeStyles((theme: Theme) =>\r\n    createStyles({\r\n      avatar: {\r\n        backgroundColor: theme.palette.secondary.main,\r\n      },\r\n      headerSelected: {\r\n        width: 230,\r\n        backgroundColor: !isDark\r\n          ? theme.palette.grey[300]\r\n          : theme.palette.grey[700],\r\n      },\r\n      header: {\r\n        width: 230,\r\n      },\r\n      container: {\r\n        marginLeft: 0,\r\n        padding: 0,\r\n        paddingBottom: 5,\r\n        WebkitOverflowScrolling: 'touch',\r\n        overflowX: 'auto',\r\n        flexWrap: 'nowrap',\r\n      },\r\n    }),\r\n  )\r\n\r\nexport default MyMiniCards\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\Transaction\\TransactionForm.tsx",["390","391"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\clientTransactionValidator.tsx",["392"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Settings\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MySkeletonMiniCards\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyChips\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\EditClient\\index.tsx",["393","394","395"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Payments\\index.tsx",["396"],"import { useContext, useEffect } from 'react'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport MyChips from 'components/common/MyChips'\r\nimport MySearchField from 'components/common/MySearchField'\r\nimport { PaymentContext } from 'providers/PaymentProvider'\r\nimport { getPayments } from 'services/paymentService'\r\nimport PaymentCard from './PaymentCard'\r\n\r\nexport interface PaymentHistoryProps {}\r\n\r\nconst PaymentHistory: React.SFC<PaymentHistoryProps> = () => {\r\n  const [paymentState, paymentDispatch] = useContext(PaymentContext)!\r\n\r\n  useEffect(() => {\r\n    getPayments().then((payments) => {\r\n      paymentDispatch({ type: 'ON_LOAD_PAYMENTS', payload: payments })\r\n    })\r\n  }, [])\r\n\r\n  const chips = ['All', 'No commission', 'With Commission']\r\n\r\n  return (\r\n    <>\r\n      <MySearchField style={{ marginBottom: 15 }} />\r\n      <MyChips active='All' chips={chips}></MyChips>\r\n      <Grid\r\n        container\r\n        spacing={2}\r\n        direction='column'\r\n        justify='flex-start'\r\n        alignItems='center'\r\n      >\r\n        {paymentState.payments.map((payment) => (\r\n          <Grid key={payment.id} item xs={12}>\r\n            <PaymentCard payment={payment} />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PaymentHistory\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\PaymentProvider.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Payments\\PaymentCard\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\GlobalProvider.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\ClientProvider.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\services\\clientService.tsx",["397"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\services\\employeeService.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\services\\paymentService.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\services\\authService.tsx",[],{"ruleId":"398","severity":1,"message":"399","line":18,"column":10,"nodeType":"400","messageId":"401","endLine":18,"endColumn":15},{"ruleId":"402","severity":1,"message":"403","line":22,"column":6,"nodeType":"404","endLine":22,"endColumn":8,"suggestions":"405"},{"ruleId":"406","replacedBy":"407"},{"ruleId":"408","replacedBy":"409"},{"ruleId":"398","severity":1,"message":"410","line":7,"column":31,"nodeType":"400","messageId":"401","endLine":7,"endColumn":41},{"ruleId":"398","severity":1,"message":"411","line":13,"column":10,"nodeType":"400","messageId":"401","endLine":13,"endColumn":11},{"ruleId":"398","severity":1,"message":"411","line":13,"column":10,"nodeType":"400","messageId":"401","endLine":13,"endColumn":11},{"ruleId":"398","severity":1,"message":"412","line":2,"column":8,"nodeType":"400","messageId":"401","endLine":2,"endColumn":14},{"ruleId":"398","severity":1,"message":"411","line":20,"column":10,"nodeType":"400","messageId":"401","endLine":20,"endColumn":11},{"ruleId":"402","severity":1,"message":"413","line":31,"column":6,"nodeType":"404","endLine":31,"endColumn":8,"suggestions":"414"},{"ruleId":"398","severity":1,"message":"415","line":12,"column":8,"nodeType":"400","messageId":"401","endLine":12,"endColumn":14},{"ruleId":"398","severity":1,"message":"416","line":13,"column":8,"nodeType":"400","messageId":"401","endLine":13,"endColumn":16},{"ruleId":"398","severity":1,"message":"411","line":27,"column":10,"nodeType":"400","messageId":"401","endLine":27,"endColumn":11},{"ruleId":"402","severity":1,"message":"417","line":36,"column":6,"nodeType":"404","endLine":36,"endColumn":8,"suggestions":"418"},{"ruleId":"398","severity":1,"message":"399","line":19,"column":10,"nodeType":"400","messageId":"401","endLine":19,"endColumn":15},{"ruleId":"402","severity":1,"message":"419","line":26,"column":6,"nodeType":"404","endLine":26,"endColumn":8,"suggestions":"420"},{"ruleId":"398","severity":1,"message":"421","line":1,"column":17,"nodeType":"400","messageId":"401","endLine":1,"endColumn":27},{"ruleId":"398","severity":1,"message":"422","line":4,"column":8,"nodeType":"400","messageId":"401","endLine":4,"endColumn":18},{"ruleId":"398","severity":1,"message":"412","line":6,"column":8,"nodeType":"400","messageId":"401","endLine":6,"endColumn":14},{"ruleId":"398","severity":1,"message":"423","line":8,"column":8,"nodeType":"400","messageId":"401","endLine":8,"endColumn":15},{"ruleId":"398","severity":1,"message":"424","line":1,"column":8,"nodeType":"400","messageId":"401","endLine":1,"endColumn":11},{"ruleId":"398","severity":1,"message":"425","line":2,"column":8,"nodeType":"400","messageId":"401","endLine":2,"endColumn":16},{"ruleId":"398","severity":1,"message":"424","line":1,"column":8,"nodeType":"400","messageId":"401","endLine":1,"endColumn":11},{"ruleId":"398","severity":1,"message":"426","line":7,"column":8,"nodeType":"400","messageId":"401","endLine":7,"endColumn":20},{"ruleId":"398","severity":1,"message":"427","line":2,"column":10,"nodeType":"400","messageId":"401","endLine":2,"endColumn":21},{"ruleId":"406","replacedBy":"428"},{"ruleId":"408","replacedBy":"429"},{"ruleId":"398","severity":1,"message":"427","line":2,"column":10,"nodeType":"400","messageId":"401","endLine":2,"endColumn":21},{"ruleId":"398","severity":1,"message":"430","line":8,"column":8,"nodeType":"400","messageId":"401","endLine":8,"endColumn":16},{"ruleId":"398","severity":1,"message":"411","line":23,"column":10,"nodeType":"400","messageId":"401","endLine":23,"endColumn":11},{"ruleId":"402","severity":1,"message":"403","line":27,"column":6,"nodeType":"404","endLine":27,"endColumn":8,"suggestions":"431"},{"ruleId":"398","severity":1,"message":"411","line":21,"column":10,"nodeType":"400","messageId":"401","endLine":21,"endColumn":11},{"ruleId":"402","severity":1,"message":"432","line":36,"column":6,"nodeType":"404","endLine":36,"endColumn":8,"suggestions":"433"},{"ruleId":"398","severity":1,"message":"434","line":8,"column":8,"nodeType":"400","messageId":"401","endLine":8,"endColumn":18},{"ruleId":"398","severity":1,"message":"435","line":9,"column":8,"nodeType":"400","messageId":"401","endLine":9,"endColumn":12},{"ruleId":"398","severity":1,"message":"415","line":10,"column":8,"nodeType":"400","messageId":"401","endLine":10,"endColumn":14},{"ruleId":"398","severity":1,"message":"436","line":11,"column":8,"nodeType":"400","messageId":"401","endLine":11,"endColumn":18},{"ruleId":"398","severity":1,"message":"430","line":12,"column":8,"nodeType":"400","messageId":"401","endLine":12,"endColumn":16},{"ruleId":"398","severity":1,"message":"437","line":14,"column":8,"nodeType":"400","messageId":"401","endLine":14,"endColumn":16},{"ruleId":"398","severity":1,"message":"416","line":16,"column":8,"nodeType":"400","messageId":"401","endLine":16,"endColumn":16},{"ruleId":"398","severity":1,"message":"438","line":21,"column":8,"nodeType":"400","messageId":"401","endLine":21,"endColumn":18},{"ruleId":"398","severity":1,"message":"439","line":25,"column":10,"nodeType":"400","messageId":"401","endLine":25,"endColumn":23},{"ruleId":"398","severity":1,"message":"440","line":40,"column":9,"nodeType":"400","messageId":"401","endLine":40,"endColumn":15},{"ruleId":"398","severity":1,"message":"411","line":41,"column":10,"nodeType":"400","messageId":"401","endLine":41,"endColumn":11},{"ruleId":"402","severity":1,"message":"403","line":55,"column":6,"nodeType":"404","endLine":55,"endColumn":8,"suggestions":"441"},{"ruleId":"398","severity":1,"message":"442","line":9,"column":33,"nodeType":"400","messageId":"401","endLine":9,"endColumn":41},{"ruleId":"398","severity":1,"message":"443","line":21,"column":10,"nodeType":"400","messageId":"401","endLine":21,"endColumn":21},{"ruleId":"402","severity":1,"message":"413","line":34,"column":6,"nodeType":"404","endLine":34,"endColumn":8,"suggestions":"444"},{"ruleId":"398","severity":1,"message":"434","line":8,"column":8,"nodeType":"400","messageId":"401","endLine":8,"endColumn":18},{"ruleId":"398","severity":1,"message":"416","line":11,"column":8,"nodeType":"400","messageId":"401","endLine":11,"endColumn":16},{"ruleId":"398","severity":1,"message":"445","line":21,"column":3,"nodeType":"400","messageId":"401","endLine":21,"endColumn":25},{"ruleId":"398","severity":1,"message":"411","line":34,"column":10,"nodeType":"400","messageId":"401","endLine":34,"endColumn":11},{"ruleId":"402","severity":1,"message":"417","line":48,"column":6,"nodeType":"404","endLine":48,"endColumn":8,"suggestions":"446"},{"ruleId":"398","severity":1,"message":"410","line":10,"column":31,"nodeType":"400","messageId":"401","endLine":10,"endColumn":41},{"ruleId":"398","severity":1,"message":"411","line":18,"column":10,"nodeType":"400","messageId":"401","endLine":18,"endColumn":11},{"ruleId":"398","severity":1,"message":"447","line":20,"column":10,"nodeType":"400","messageId":"401","endLine":20,"endColumn":23},{"ruleId":"402","severity":1,"message":"448","line":28,"column":6,"nodeType":"404","endLine":28,"endColumn":8,"suggestions":"449"},{"ruleId":"398","severity":1,"message":"450","line":10,"column":10,"nodeType":"400","messageId":"401","endLine":10,"endColumn":22},{"ruleId":"398","severity":1,"message":"411","line":15,"column":10,"nodeType":"400","messageId":"401","endLine":15,"endColumn":11},{"ruleId":"402","severity":1,"message":"451","line":35,"column":6,"nodeType":"404","endLine":35,"endColumn":30,"suggestions":"452"},{"ruleId":"398","severity":1,"message":"399","line":20,"column":10,"nodeType":"400","messageId":"401","endLine":20,"endColumn":15},{"ruleId":"402","severity":1,"message":"419","line":27,"column":6,"nodeType":"404","endLine":27,"endColumn":8,"suggestions":"453"},{"ruleId":"398","severity":1,"message":"421","line":1,"column":17,"nodeType":"400","messageId":"401","endLine":1,"endColumn":27},{"ruleId":"398","severity":1,"message":"422","line":4,"column":8,"nodeType":"400","messageId":"401","endLine":4,"endColumn":18},{"ruleId":"398","severity":1,"message":"412","line":6,"column":8,"nodeType":"400","messageId":"401","endLine":6,"endColumn":14},{"ruleId":"398","severity":1,"message":"423","line":8,"column":8,"nodeType":"400","messageId":"401","endLine":8,"endColumn":15},{"ruleId":"398","severity":1,"message":"422","line":4,"column":8,"nodeType":"400","messageId":"401","endLine":4,"endColumn":18},{"ruleId":"398","severity":1,"message":"426","line":7,"column":8,"nodeType":"400","messageId":"401","endLine":7,"endColumn":20},{"ruleId":"398","severity":1,"message":"454","line":27,"column":23,"nodeType":"400","messageId":"401","endLine":27,"endColumn":37},{"ruleId":"402","severity":1,"message":"455","line":37,"column":6,"nodeType":"404","endLine":37,"endColumn":63,"suggestions":"456"},{"ruleId":"398","severity":1,"message":"415","line":12,"column":8,"nodeType":"400","messageId":"401","endLine":12,"endColumn":14},{"ruleId":"398","severity":1,"message":"416","line":13,"column":8,"nodeType":"400","messageId":"401","endLine":13,"endColumn":16},{"ruleId":"398","severity":1,"message":"445","line":21,"column":3,"nodeType":"400","messageId":"401","endLine":21,"endColumn":25},{"ruleId":"398","severity":1,"message":"454","line":31,"column":23,"nodeType":"400","messageId":"401","endLine":31,"endColumn":37},{"ruleId":"398","severity":1,"message":"457","line":19,"column":9,"nodeType":"400","messageId":"401","endLine":19,"endColumn":16},{"ruleId":"398","severity":1,"message":"399","line":103,"column":10,"nodeType":"400","messageId":"401","endLine":103,"endColumn":15},{"ruleId":"398","severity":1,"message":"440","line":28,"column":9,"nodeType":"400","messageId":"401","endLine":28,"endColumn":15},{"ruleId":"398","severity":1,"message":"399","line":32,"column":10,"nodeType":"400","messageId":"401","endLine":32,"endColumn":15},{"ruleId":"398","severity":1,"message":"399","line":7,"column":10,"nodeType":"400","messageId":"401","endLine":7,"endColumn":15},{"ruleId":"402","severity":1,"message":"403","line":11,"column":6,"nodeType":"404","endLine":11,"endColumn":8,"suggestions":"458"},{"ruleId":"459","severity":1,"message":"460","line":38,"column":1,"nodeType":"461","endLine":44,"endColumn":2},{"ruleId":"398","severity":1,"message":"399","line":17,"column":10,"nodeType":"400","messageId":"401","endLine":17,"endColumn":15},{"ruleId":"402","severity":1,"message":"403","line":23,"column":6,"nodeType":"404","endLine":23,"endColumn":8,"suggestions":"462"},{"ruleId":"398","severity":1,"message":"424","line":1,"column":8,"nodeType":"400","messageId":"401","endLine":1,"endColumn":11},{"ruleId":"398","severity":1,"message":"443","line":22,"column":10,"nodeType":"400","messageId":"401","endLine":22,"endColumn":21},{"ruleId":"402","severity":1,"message":"413","line":35,"column":6,"nodeType":"404","endLine":35,"endColumn":8,"suggestions":"463"},{"ruleId":"402","severity":1,"message":"464","line":56,"column":6,"nodeType":"404","endLine":56,"endColumn":48,"suggestions":"465"},{"ruleId":"398","severity":1,"message":"411","line":35,"column":17,"nodeType":"400","messageId":"401","endLine":35,"endColumn":18},{"ruleId":"398","severity":1,"message":"466","line":3,"column":31,"nodeType":"400","messageId":"401","endLine":3,"endColumn":42},{"ruleId":"398","severity":1,"message":"426","line":5,"column":8,"nodeType":"400","messageId":"401","endLine":5,"endColumn":20},{"ruleId":"398","severity":1,"message":"427","line":2,"column":10,"nodeType":"400","messageId":"401","endLine":2,"endColumn":21},{"ruleId":"398","severity":1,"message":"411","line":17,"column":10,"nodeType":"400","messageId":"401","endLine":17,"endColumn":11},{"ruleId":"398","severity":1,"message":"454","line":19,"column":23,"nodeType":"400","messageId":"401","endLine":19,"endColumn":37},{"ruleId":"402","severity":1,"message":"467","line":35,"column":6,"nodeType":"404","endLine":35,"endColumn":8,"suggestions":"468"},{"ruleId":"402","severity":1,"message":"469","line":18,"column":6,"nodeType":"404","endLine":18,"endColumn":8,"suggestions":"470"},{"ruleId":"471","severity":1,"message":"472","line":128,"column":7,"nodeType":"473","messageId":"474","endLine":128,"endColumn":12},"@typescript-eslint/no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["475"],"no-native-reassign",["476"],"no-negated-in-lhs",["477"],"'InputProps' is defined but never used.","'_' is assigned a value but never used.","'Client' is defined but never used.","React Hook useEffect has missing dependencies: 'clientDispatch' and 'globalDispatch'. Either include them or remove the dependency array.",["478"],"'Avatar' is defined but never used.","'userIcon' is defined but never used.","React Hook useEffect has missing dependencies: 'clientState.clients', 'globalDispatch', and 'id'. Either include them or remove the dependency array.",["479"],"React Hook useEffect has missing dependencies: 'dispatch' and 'scroll'. Either include them or remove the dependency array.",["480"],"'useContext' is defined but never used.","'Typography' is defined but never used.","'Divider' is defined but never used.","'Joi' is defined but never used.","'Employee' is defined but never used.","'Commissioner' is defined but never used.","'lettersOnly' is defined but never used.",["476"],["477"],"'EditIcon' is defined but never used.",["481"],"React Hook useEffect has missing dependencies: 'employeeDispatch' and 'globalDispatch'. Either include them or remove the dependency array.",["482"],"'IconButton' is defined but never used.","'Card' is defined but never used.","'CardHeader' is defined but never used.","'FaceIcon' is defined but never used.","'ClientCard' is defined but never used.","'ClientContext' is defined but never used.","'styles' is assigned a value but never used.",["483"],"'useState' is defined but never used.","'globalState' is assigned a value but never used.",["484"],"'computeTotalCountToPay' is defined but never used.",["485"],"'employeeState' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'globalDispatch'. Either include it or remove the dependency array.",["486"],"'getEmployees' is defined but never used.","React Hook useEffect has missing dependencies: 'employeeDispatch', 'globalDispatch', and 'id'. Either include them or remove the dependency array.",["487"],["488"],"'clientDispatch' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clientState.plans' and 'setClient'. Either include them or remove the dependency array. If 'setClient' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["489"],"'history' is assigned a value but never used.",["490"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["491"],["492"],"React Hook useEffect has missing dependencies: 'clientState.plans' and 'transaction'. Either include them or remove the dependency array.",["493"],"'RenderProps' is defined but never used.","React Hook useEffect has missing dependencies: 'clientState.clients', 'globalDispatch', and 'params.id'. Either include them or remove the dependency array.",["494"],"React Hook useEffect has a missing dependency: 'paymentDispatch'. Either include it or remove the dependency array.",["495"],"no-unreachable","Unreachable code.","BreakStatement","unreachableCode",{"desc":"496","fix":"497"},"no-global-assign","no-unsafe-negation",{"desc":"498","fix":"499"},{"desc":"500","fix":"501"},{"desc":"502","fix":"503"},{"desc":"496","fix":"504"},{"desc":"505","fix":"506"},{"desc":"496","fix":"507"},{"desc":"498","fix":"508"},{"desc":"500","fix":"509"},{"desc":"510","fix":"511"},{"desc":"512","fix":"513"},{"desc":"502","fix":"514"},{"desc":"515","fix":"516"},{"desc":"496","fix":"517"},{"desc":"496","fix":"518"},{"desc":"498","fix":"519"},{"desc":"520","fix":"521"},{"desc":"522","fix":"523"},{"desc":"524","fix":"525"},"Update the dependencies array to be: [dispatch]",{"range":"526","text":"527"},"Update the dependencies array to be: [clientDispatch, globalDispatch]",{"range":"528","text":"529"},"Update the dependencies array to be: [clientState.clients, globalDispatch, id]",{"range":"530","text":"531"},"Update the dependencies array to be: [dispatch, scroll]",{"range":"532","text":"533"},{"range":"534","text":"527"},"Update the dependencies array to be: [employeeDispatch, globalDispatch]",{"range":"535","text":"536"},{"range":"537","text":"527"},{"range":"538","text":"529"},{"range":"539","text":"531"},"Update the dependencies array to be: [globalDispatch]",{"range":"540","text":"541"},"Update the dependencies array to be: [employeeDispatch, employeeState.employee, globalDispatch, id]",{"range":"542","text":"543"},{"range":"544","text":"533"},"Update the dependencies array to be: [client.payment_mode, client.payment_period, client.plan, clientState.plans, setClient]",{"range":"545","text":"546"},{"range":"547","text":"527"},{"range":"548","text":"527"},{"range":"549","text":"529"},"Update the dependencies array to be: [transaction.payment_mode, transaction.id, transaction, clientState.plans]",{"range":"550","text":"551"},"Update the dependencies array to be: [clientState.clients, globalDispatch, params.id]",{"range":"552","text":"553"},"Update the dependencies array to be: [paymentDispatch]",{"range":"554","text":"555"},[757,759],"[dispatch]",[1141,1143],"[clientDispatch, globalDispatch]",[1358,1360],"[clientState.clients, globalDispatch, id]",[1007,1009],"[dispatch, scroll]",[1005,1007],[1422,1424],"[employeeDispatch, globalDispatch]",[2180,2182],[1373,1375],[1652,1654],[1155,1157],"[globalDispatch]",[1228,1252],"[employeeDispatch, employeeState.employee, globalDispatch, id]",[1050,1052],[1276,1333],"[client.payment_mode, client.payment_period, client.plan, clientState.plans, setClient]",[334,336],[755,757],[1446,1448],[1928,1970],"[transaction.payment_mode, transaction.id, transaction, clientState.plans]",[1174,1176],"[clientState.clients, globalDispatch, params.id]",[679,681],"[paymentDispatch]"]