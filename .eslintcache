[{"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\index.tsx":"1","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\App.tsx":"2","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\index.tsx":"3","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\contexts\\globalContext.tsx":"4","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\routes\\index.tsx":"5","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\nav\\index.tsx":"6","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\myDrawer\\index.tsx":"7","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\users\\new\\index.tsx":"8","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\myForm\\index.tsx":"9","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\contexts\\userContext.tsx":"10","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\services\\useUserService.tsx":"11","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\users\\new\\validator.tsx":"12","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\utils\\helper.tsx":"13","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\services\\useGlobalState.tsx":"14","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\myAlert\\index.tsx":"15","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\users\\index.tsx":"16","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\users\\card.tsx":"17"},{"size":324,"mtime":1610876126787,"results":"18","hashOfConfig":"19"},{"size":889,"mtime":1611029415306,"results":"20","hashOfConfig":"19"},{"size":784,"mtime":1611026387783,"results":"21","hashOfConfig":"19"},{"size":526,"mtime":1611055534348,"results":"22","hashOfConfig":"19"},{"size":440,"mtime":1611121307605,"results":"23","hashOfConfig":"19"},{"size":1628,"mtime":1611048526725,"results":"24","hashOfConfig":"19"},{"size":2038,"mtime":1611053606481,"results":"25","hashOfConfig":"19"},{"size":3684,"mtime":1611055510382,"results":"26","hashOfConfig":"19"},{"size":4980,"mtime":1611051281289,"results":"27","hashOfConfig":"19"},{"size":306,"mtime":1611055441432,"results":"28","hashOfConfig":"19"},{"size":346,"mtime":1611054745862,"results":"29","hashOfConfig":"19"},{"size":666,"mtime":1611046340718,"results":"30","hashOfConfig":"19"},{"size":1459,"mtime":1611046274968,"results":"31","hashOfConfig":"19"},{"size":888,"mtime":1611045680200,"results":"32","hashOfConfig":"19"},{"size":837,"mtime":1611053805614,"results":"33","hashOfConfig":"19"},{"size":1130,"mtime":1611128376767,"results":"34","hashOfConfig":"19"},{"size":2717,"mtime":1611128274780,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"csx4bj",{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\index.tsx",[],["73","74"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\App.tsx",["75","76"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\contexts\\globalContext.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\routes\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\nav\\index.tsx",["77"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\myDrawer\\index.tsx",["78"],"import Drawer from '@material-ui/core/Drawer'\r\nimport List from '@material-ui/core/List'\r\nimport ArrowBack from '@material-ui/icons/ArrowBack'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport makeStyles from '@material-ui/core/styles/makeStyles'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport * as React from 'react'\r\nimport Grid from '@material-ui/core/Grid/Grid'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport GlobalContext from 'providers/contexts/globalContext'\r\n\r\nexport interface MyDrawerProps {\r\n  isActive: boolean\r\n  onToggle: Function\r\n}\r\n\r\nconst MyDrawer: React.FC<MyDrawerProps> = (props) => {\r\n  const styles = useStyles()\r\n\r\n  const ctx = React.useContext(GlobalContext)\r\n\r\n  const menus = ['Menu1', 'Menu2', 'Menu3', 'Menu4']\r\n\r\n  const list = () => (\r\n    <>\r\n      <List>\r\n        {menus.map((menu, index) => (\r\n          <ListItem button key={index}>\r\n            <ListItemText primary={menu} onClick={() => props.onToggle(menu)} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </>\r\n  )\r\n\r\n  return (\r\n    <Drawer anchor='left' open={props.isActive}>\r\n      <Grid container justify='flex-end'>\r\n        <IconButton\r\n          onClick={() => props.onToggle()}\r\n          edge='start'\r\n          color='inherit'\r\n          aria-label='menu'\r\n        >\r\n          <ArrowBack />\r\n        </IconButton>\r\n      </Grid>\r\n      {list()}\r\n\r\n      <FormControlLabel\r\n        style={{ marginLeft: 10 }}\r\n        control={\r\n          <Switch\r\n            checked={ctx?.isDark}\r\n            onChange={() => ctx?.setIsDark((isDark) => !isDark)}\r\n            name='checkedA'\r\n            inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n          />\r\n        }\r\n        label='Dark Mode'\r\n      />\r\n    </Drawer>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  close: {\r\n    paddingTop: 5,\r\n    paddingRight: 5,\r\n  },\r\n}))\r\n\r\nexport default MyDrawer\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\users\\new\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\myForm\\index.tsx",["79","80"],"import React, { useContext } from 'react'\nimport Joi from 'joi'\nimport TextField from '@material-ui/core/TextField'\nimport Grid from '@material-ui/core/Grid'\nimport FormControl from '@material-ui/core/FormControl'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Button from '@material-ui/core/Button'\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n} from '@material-ui/pickers'\nimport DateFnsUtils from '@date-io/date-fns/build'\nimport FormHelperText from '@material-ui/core/FormHelperText'\n\nexport interface MyFormProps<T> {\n  state: [T, React.Dispatch<React.SetStateAction<T>>]\n  onSubmit: () => Promise<any>\n  validator?: {}\n  children?: (props: RenderProps) => JSX.Element\n}\n\nexport interface InputProps {\n  value?: any\n  name: string\n  placeholder?: string\n  type?: string | 'text'\n  label: string\n  isMultiline?: boolean\n}\n\nexport interface SelectProps extends InputProps {\n  options: string[]\n}\n\nexport interface RenderProps {\n  myInput: (input: InputProps) => JSX.Element\n  myDateTimePicker: (input: InputProps) => JSX.Element\n  myButton: (text?: string) => JSX.Element\n  mySelect: (select: SelectProps) => JSX.Element\n}\n\nfunction MyForm<T>(props: MyFormProps<T>) {\n  const [data, setData] = props.state\n\n  const [isDisable, setIsDisable] = React.useState<boolean>(false)\n\n  const [errors, setErrors] = React.useState<any>(null)\n\n  const onValidate = () => {\n    const schema = Joi.object(props.validator).options({\n      abortEarly: false,\n    })\n\n    const { error } = schema.validate(data)\n\n    if (!error) return null\n\n    const _errors: any = {}\n\n    error.details.forEach((item) => (_errors[item.path[0]] = item.message))\n\n    return _errors\n  }\n\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n\n    const hasErrors = onValidate()\n\n    setIsDisable(true)\n\n    if (hasErrors) {\n      setErrors(hasErrors)\n      setIsDisable(false)\n      return\n    }\n\n    return props\n      .onSubmit()\n      .then(() => {\n        setErrors({})\n        setIsDisable(false)\n      })\n      .catch((error) => {\n        setIsDisable(false)\n      })\n  }\n\n  const onChange = (e: any) => {\n    const { value, name } = e.target\n\n    setData({\n      ...data,\n      [name]: value,\n    })\n  }\n\n  const myInput = (input: InputProps) => {\n    const error = errors && errors[input.name]\n    return (\n      <Grid item xs={12} key={input.name}>\n        <TextField\n          multiline={input.isMultiline}\n          fullWidth\n          name={input.name}\n          variant='outlined'\n          label={input.label}\n          type={input.type}\n          value={input.value}\n          onChange={onChange}\n          error={!!error}\n          helperText={error}\n        />\n      </Grid>\n    )\n  }\n\n  const myDateTimePicker = (input: InputProps) => {\n    return (\n      <Grid item xs={12} key={input.name}>\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <KeyboardDatePicker\n            fullWidth\n            inputVariant='outlined'\n            disableToolbar\n            variant='dialog'\n            format='MM/dd/yyyy'\n            margin='none'\n            label={input.label}\n            value={input.value}\n            onChange={(date) =>\n              setData({\n                ...data,\n                [input.name]: date?.toLocaleDateString(),\n              })\n            }\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n        </MuiPickersUtilsProvider>\n      </Grid>\n    )\n  }\n\n  const mySelect = (select: SelectProps) => {\n    const error = errors && errors[select.name]\n    return (\n      <Grid item xs={12} key={select.name}>\n        <FormControl fullWidth variant='outlined' error={!!error}>\n          <InputLabel id={select.label}>{select.label}</InputLabel>\n          <Select\n            labelId={select.label}\n            id={select.name}\n            name={select.name}\n            value={select.value === null ? '' : select.value}\n            onChange={onChange}\n          >\n            {select.options.map((option, index) => (\n              <MenuItem value={option}>{option}</MenuItem>\n            ))}\n          </Select>\n          <FormHelperText>{error}</FormHelperText>\n        </FormControl>\n      </Grid>\n    )\n  }\n\n  const myButton = (text?: string) => {\n    return (\n      <Grid item xs={12}>\n        <Button\n          style={{ paddingTop: 15, paddingBottom: 15 }}\n          fullWidth\n          type='submit'\n          variant='contained'\n          color='primary'\n        >\n          {text ?? 'SUBMIT'}\n        </Button>\n      </Grid>\n    )\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      <Grid container spacing={2} direction='column'>\n        {props.children?.call(null, {\n          myInput,\n          mySelect,\n          myDateTimePicker,\n          myButton,\n        } as RenderProps)}\n      </Grid>\n    </form>\n  )\n}\n\nexport default MyForm\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\contexts\\userContext.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\services\\useUserService.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\users\\new\\validator.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\utils\\helper.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\services\\useGlobalState.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\myAlert\\index.tsx",["81"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\users\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\users\\card.tsx",["82"],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":1,"column":17,"nodeType":"89","messageId":"90","endLine":1,"endColumn":27},{"ruleId":"87","severity":1,"message":"91","line":1,"column":29,"nodeType":"89","messageId":"90","endLine":1,"endColumn":37},{"ruleId":"87","severity":1,"message":"92","line":8,"column":8,"nodeType":"89","messageId":"90","endLine":8,"endColumn":14},{"ruleId":"87","severity":1,"message":"93","line":20,"column":9,"nodeType":"89","messageId":"90","endLine":20,"endColumn":15},{"ruleId":"87","severity":1,"message":"88","line":1,"column":17,"nodeType":"89","messageId":"90","endLine":1,"endColumn":27},{"ruleId":"87","severity":1,"message":"94","line":47,"column":10,"nodeType":"89","messageId":"90","endLine":47,"endColumn":19},{"ruleId":"87","severity":1,"message":"95","line":5,"column":25,"nodeType":"89","messageId":"90","endLine":5,"endColumn":36},{"ruleId":"87","severity":1,"message":"96","line":11,"column":8,"nodeType":"89","messageId":"90","endLine":11,"endColumn":13},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"@typescript-eslint/no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'styles' is defined but never used.","'styles' is assigned a value but never used.","'isDisable' is assigned a value but never used.","'GlobalProps' is defined but never used.","'Paper' is defined but never used.","no-global-assign","no-unsafe-negation"]