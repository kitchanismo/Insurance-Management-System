[{"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\index.tsx":"1","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\App.tsx":"2","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\utils\\helper.ts":"3","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\index.tsx":"4","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\NewEmployee\\index.tsx":"5","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\EditEmployee\\index.tsx":"6","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\EmployeeCard\\index.tsx":"7","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\clients\\index.tsx":"8","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MySearchField\\index.tsx":"9","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\index.tsx":"10","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\ClientCard\\index.tsx":"11","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyAvatar\\index.tsx":"12","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\ViewClient\\index.tsx":"13","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\index.tsx":"14","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\ClientStepOne.tsx":"15","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\ClientStepTwo.tsx":"16","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\saveEmployeeValidator.tsx":"17","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\saveProfileValidator.tsx":"18","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\ClientStepThree.tsx":"19","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\clientStepTwoValidator.tsx":"20","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\clientStepThreeValidator.tsx":"21","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\ViewEmployee\\index.tsx":"22","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Employees\\index.tsx":"23","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Employees\\ViewEmployee\\index.tsx":"24","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\index.tsx":"25","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\ViewClient\\index.tsx":"26","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Employees\\NewEmployee\\index.tsx":"27","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Employees\\EditEmployee\\index.tsx":"28","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\NewClient\\index.tsx":"29","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\NewClient\\ClientStepOne.tsx":"30","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\NewClient\\ClientStepTwo.tsx":"31","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\NewClient\\ClientStepThree.tsx":"32","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Employees\\EmployeeCard\\index.tsx":"33","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\ClientCard\\index.tsx":"34","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MySearchField\\index.tsx":"35","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyAvatar\\index.tsx":"36","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\layout\\index.tsx":"37","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyAlert\\index.tsx":"38","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyNav\\index.tsx":"39","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyForm\\index.tsx":"40","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyStepper\\index.tsx":"41","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyDrawer\\index.tsx":"42","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyCard\\index.tsx":"43","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Dashboard\\index.tsx":"44","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\EmployeeProvider.tsx":"45","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MySkeletonCards\\index.tsx":"46","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\utils\\http.ts":"47","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MySkeletonCard\\index.tsx":"48","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Auth\\SignIn\\index.tsx":"49","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\signInValidator.tsx":"50","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyAuthRoute\\index.tsx":"51","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\Transaction\\index.tsx":"52","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyMiniCards\\index.tsx":"53","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\Transaction\\TransactionForm.tsx":"54","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\clientTransactionValidator.tsx":"55","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Settings\\index.tsx":"56","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MySkeletonMiniCards\\index.tsx":"57","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyChips\\index.tsx":"58","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\EditClient\\index.tsx":"59","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Payments\\index.tsx":"60","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\PaymentProvider.tsx":"61","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Payments\\PaymentCard\\index.tsx":"62","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\GlobalProvider.tsx":"63","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\ClientProvider.tsx":"64","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\services\\clientService.tsx":"65","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\services\\employeeService.tsx":"66","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\services\\paymentService.tsx":"67","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\services\\authService.tsx":"68","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Payments\\PaymentView\\index.tsx":"69","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\services\\imageService.tsx":"70","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyAlertDialog\\index.tsx":"71","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Branches\\index.tsx":"72","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\BranchProvider.tsx":"73","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\services\\branchService.tsx":"74","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Branches\\BranchCard\\index.tsx":"75","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Branches\\NewBranch\\index.tsx":"76","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\saveBranchValidator.tsx":"77","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Branches\\EditBranch\\index.tsx":"78"},{"size":357,"mtime":1612608328875,"results":"79","hashOfConfig":"80"},{"size":980,"mtime":1613467058422,"results":"81","hashOfConfig":"80"},{"size":2097,"mtime":1612292428996,"results":"82","hashOfConfig":"80"},{"size":2405,"mtime":1612026326387,"results":"83","hashOfConfig":"80"},{"size":4262,"mtime":1612026038974,"results":"84","hashOfConfig":"80"},{"size":4389,"mtime":1612026139393,"results":"85","hashOfConfig":"80"},{"size":2913,"mtime":1612026087251,"results":"86","hashOfConfig":"80"},{"size":27,"mtime":1611588252955,"results":"87","hashOfConfig":"80"},{"size":1510,"mtime":1612025364106,"results":"88","hashOfConfig":"80"},{"size":2067,"mtime":1612025557633,"results":"89","hashOfConfig":"80"},{"size":2958,"mtime":1612025770740,"results":"90","hashOfConfig":"80"},{"size":400,"mtime":1612025207022,"results":"91","hashOfConfig":"80"},{"size":6132,"mtime":1612025599805,"results":"92","hashOfConfig":"80"},{"size":4334,"mtime":1612025652721,"results":"93","hashOfConfig":"80"},{"size":3116,"mtime":1612025682832,"results":"94","hashOfConfig":"80"},{"size":4540,"mtime":1612025713442,"results":"95","hashOfConfig":"80"},{"size":518,"mtime":1612529121407,"results":"96","hashOfConfig":"80"},{"size":382,"mtime":1612444021661,"results":"97","hashOfConfig":"80"},{"size":4188,"mtime":1612025697638,"results":"98","hashOfConfig":"80"},{"size":389,"mtime":1611869862713,"results":"99","hashOfConfig":"80"},{"size":523,"mtime":1613272835752,"results":"100","hashOfConfig":"80"},{"size":5777,"mtime":1612025945257,"results":"101","hashOfConfig":"80"},{"size":5954,"mtime":1613532426479,"results":"102","hashOfConfig":"80"},{"size":8383,"mtime":1613278561531,"results":"103","hashOfConfig":"80"},{"size":5559,"mtime":1613532441410,"results":"104","hashOfConfig":"80"},{"size":6425,"mtime":1613452789143,"results":"105","hashOfConfig":"80"},{"size":6334,"mtime":1613489472151,"results":"106","hashOfConfig":"80"},{"size":7420,"mtime":1613489579315,"results":"107","hashOfConfig":"80"},{"size":6014,"mtime":1613452729248,"results":"108","hashOfConfig":"80"},{"size":4449,"mtime":1613177089674,"results":"109","hashOfConfig":"80"},{"size":4517,"mtime":1613174632483,"results":"110","hashOfConfig":"80"},{"size":4531,"mtime":1613272743343,"results":"111","hashOfConfig":"80"},{"size":3457,"mtime":1613531604264,"results":"112","hashOfConfig":"80"},{"size":3088,"mtime":1613459378790,"results":"113","hashOfConfig":"80"},{"size":1707,"mtime":1613124423445,"results":"114","hashOfConfig":"80"},{"size":950,"mtime":1613204348433,"results":"115","hashOfConfig":"80"},{"size":2874,"mtime":1613527133444,"results":"116","hashOfConfig":"80"},{"size":856,"mtime":1612608328703,"results":"117","hashOfConfig":"80"},{"size":2606,"mtime":1612608329223,"results":"118","hashOfConfig":"80"},{"size":11116,"mtime":1613216880296,"results":"119","hashOfConfig":"80"},{"size":1391,"mtime":1612055049295,"results":"120","hashOfConfig":"80"},{"size":3775,"mtime":1613466315416,"results":"121","hashOfConfig":"80"},{"size":1057,"mtime":1612470956152,"results":"122","hashOfConfig":"80"},{"size":423,"mtime":1612608329223,"results":"123","hashOfConfig":"80"},{"size":2728,"mtime":1613489679722,"results":"124","hashOfConfig":"80"},{"size":1420,"mtime":1612294543434,"results":"125","hashOfConfig":"80"},{"size":988,"mtime":1613203487693,"results":"126","hashOfConfig":"80"},{"size":1401,"mtime":1612474036715,"results":"127","hashOfConfig":"80"},{"size":2386,"mtime":1612609895816,"results":"128","hashOfConfig":"80"},{"size":197,"mtime":1612302613209,"results":"129","hashOfConfig":"80"},{"size":754,"mtime":1612608328875,"results":"130","hashOfConfig":"80"},{"size":7602,"mtime":1613466060196,"results":"131","hashOfConfig":"80"},{"size":2834,"mtime":1613387847770,"results":"132","hashOfConfig":"80"},{"size":4566,"mtime":1613272767564,"results":"133","hashOfConfig":"80"},{"size":476,"mtime":1613272829349,"results":"134","hashOfConfig":"80"},{"size":1170,"mtime":1612608328813,"results":"135","hashOfConfig":"80"},{"size":1476,"mtime":1613528285057,"results":"136","hashOfConfig":"80"},{"size":1635,"mtime":1613263345681,"results":"137","hashOfConfig":"80"},{"size":5978,"mtime":1613277222163,"results":"138","hashOfConfig":"80"},{"size":3146,"mtime":1613447364144,"results":"139","hashOfConfig":"80"},{"size":1301,"mtime":1613356212641,"results":"140","hashOfConfig":"80"},{"size":2458,"mtime":1613446871088,"results":"141","hashOfConfig":"80"},{"size":2583,"mtime":1612614485358,"results":"142","hashOfConfig":"80"},{"size":2504,"mtime":1613104131331,"results":"143","hashOfConfig":"80"},{"size":3419,"mtime":1613531510496,"results":"144","hashOfConfig":"80"},{"size":1675,"mtime":1613489651995,"results":"145","hashOfConfig":"80"},{"size":911,"mtime":1613385255335,"results":"146","hashOfConfig":"80"},{"size":161,"mtime":1612611908426,"results":"147","hashOfConfig":"80"},{"size":3992,"mtime":1613449278184,"results":"148","hashOfConfig":"80"},{"size":522,"mtime":1613127398068,"results":"149","hashOfConfig":"80"},{"size":1702,"mtime":1613531801295,"results":"150","hashOfConfig":"80"},{"size":3000,"mtime":1613532397191,"results":"151","hashOfConfig":"80"},{"size":1118,"mtime":1613487266357,"results":"152","hashOfConfig":"80"},{"size":821,"mtime":1613531414226,"results":"153","hashOfConfig":"80"},{"size":1911,"mtime":1613531574334,"results":"154","hashOfConfig":"80"},{"size":1984,"mtime":1613489164088,"results":"155","hashOfConfig":"80"},{"size":200,"mtime":1613527784834,"results":"156","hashOfConfig":"80"},{"size":2274,"mtime":1613532516351,"results":"157","hashOfConfig":"80"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},"csx4bj",{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"168"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"168"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"168"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"168"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"168"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"168"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"168"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"168"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"168"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"160"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"160"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"168"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"160"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"160"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"220","messages":"221","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"160"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"225","messages":"226","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"227","messages":"228","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"229","messages":"230","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"231","messages":"232","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"160"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"160"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"160"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"244","messages":"245","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"246","messages":"247","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"160"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"160"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"160"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"160"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"160"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"160"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"160"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"160"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"290","messages":"291","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"292","messages":"293","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"160"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"160"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"302","messages":"303","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"160"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"160"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"160"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"323","messages":"324","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"333","messages":"334","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"339","messages":"340","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"343","messages":"344","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"345","messages":"346","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\index.tsx",[],["347","348"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\App.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\utils\\helper.ts",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\index.tsx",["349","350"],"import React, { useContext, useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Fab from '@material-ui/core/Fab'\r\nimport AddIcon from '@material-ui/icons/Add'\r\n\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\r\n\r\nimport Employee from 'models/employee'\r\nimport EmployeeCard from './EmployeeCard'\r\nimport MySearchField from 'components/Common/MySearchField'\r\nimport { GlobalContext } from 'hooks/useGlobalState'\r\n\r\nexport interface EmployeesProps {}\r\n\r\nconst Employees: React.SFC<EmployeesProps> = () => {\r\n  const [state, dispatch] = useContext(GlobalContext)!\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'setTitle', payload: 'Employee Management' })\r\n  }, [])\r\n\r\n  const employees: Partial<Employee>[] = [\r\n    {\r\n      id: 1,\r\n      firstname: 'Ftname',\r\n      middlename: 'Mee',\r\n      lastname: 'ame',\r\n      position: 'Agency Manager',\r\n      status: 'deactive',\r\n    },\r\n    {\r\n      id: 2,\r\n      firstname: 'Firstname',\r\n      middlename: 'Middlename',\r\n      lastname: 'Lastname',\r\n      position: 'Sales Agent',\r\n      status: 'active',\r\n    },\r\n    {\r\n      id: 3,\r\n      firstname: 'Firstname',\r\n      middlename: 'Middlename',\r\n      lastname: 'Lastname',\r\n      position: 'Branch Manager',\r\n      status: 'deceased',\r\n    },\r\n\r\n    {\r\n      id: 4,\r\n      firstname: 'Firstname',\r\n      middlename: 'Middlename',\r\n      lastname: 'Lastname',\r\n      position: 'Supervisor',\r\n      status: 'active',\r\n    },\r\n  ]\r\n\r\n  const history = useHistory()\r\n\r\n  const styles = useStyles()\r\n  return (\r\n    <>\r\n      <MySearchField style={{ marginBottom: 15 }} />\r\n\r\n      <Grid\r\n        container\r\n        spacing={2}\r\n        direction='column'\r\n        justify='flex-start'\r\n        alignItems='center'\r\n      >\r\n        {employees.map((employee) => (\r\n          <Grid key={employee.id} item xs={12}>\r\n            <EmployeeCard employee={employee} />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n\r\n      <Fab\r\n        onClick={() => history.push('/employees/new')}\r\n        className={styles.fab}\r\n        color='primary'\r\n        aria-label='add'\r\n      >\r\n        <AddIcon />\r\n      </Fab>\r\n    </>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    fab: {\r\n      position: 'fixed',\r\n      bottom: 20,\r\n      right: 20,\r\n    },\r\n  }),\r\n)\r\n\r\nexport default Employees\r\n",["351","352"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\NewEmployee\\index.tsx",["353","354"],"import React, { useContext } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { GlobalContext } from 'hooks/useGlobalState'\r\nimport validator from '../../../../validators/saveEmployeeValidator'\r\nimport MyForm, { MyFormProps, InputProps } from 'components/Common/MyForm'\r\nimport Employee from 'models/employee'\r\n\r\nexport interface NewUserProps {}\r\n\r\nconst NewEmployee: React.SFC<NewUserProps> = () => {\r\n  const [_, dispatch] = useContext(GlobalContext)!\r\n\r\n  const history = useHistory()\r\n\r\n  const [employee, setEmployee] = React.useState<Employee>({\r\n    firstname: 'dfdf',\r\n    middlename: '',\r\n    lastname: '',\r\n    address: '',\r\n    contact: '',\r\n  })\r\n\r\n  const onSubmit = async (data: Employee) => {\r\n    console.log(data)\r\n    dispatch({\r\n      type: 'setAlert',\r\n      payload: { message: 'Successfully added', type: 'success' },\r\n    })\r\n    return Promise.resolve()\r\n  }\r\n\r\n  const formProps: MyFormProps<Employee> = {\r\n    state: [employee, setEmployee],\r\n    onSubmit,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myInput, mySelect, myDateTimePicker, myButton }) => (\r\n        <>\r\n          {myInput({\r\n            label: 'Firstname',\r\n            value: employee.firstname,\r\n            name: 'firstname',\r\n          })}\r\n          {myInput({\r\n            label: 'Middlename',\r\n            value: employee.middlename,\r\n            name: 'middlename',\r\n          })}\r\n          {myInput({\r\n            label: 'Lastname',\r\n            value: employee.lastname,\r\n            name: 'lastname',\r\n          })}\r\n          {myInput({\r\n            label: 'Contact Number',\r\n            value: employee.contact,\r\n            name: 'contact',\r\n          })}\r\n\r\n          {myInput({\r\n            label: 'Address',\r\n            value: employee.address,\r\n            name: 'address',\r\n            isMultiline: true,\r\n          })}\r\n          {mySelect({\r\n            label: 'Gender',\r\n            value: employee.gender,\r\n            name: 'gender',\r\n            options: [\r\n              { value: 'Male' },\r\n              { value: 'Female' },\r\n              { value: 'Other' },\r\n            ],\r\n          })}\r\n          {mySelect({\r\n            label: 'Civil Status',\r\n            value: employee.civil,\r\n            name: 'civil',\r\n            labelWidth: 80,\r\n            options: [\r\n              { value: 'Single' },\r\n              { value: 'Married' },\r\n              { value: 'Widowed' },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Position',\r\n            value: employee.position,\r\n            name: 'position',\r\n            labelWidth: 55,\r\n            options: [\r\n              { value: 'Sales Agent' },\r\n              { value: 'Branch Manager' },\r\n              { value: 'Agency Manager' },\r\n              { value: 'Supervisor' },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Branch',\r\n            value: employee.branch,\r\n            name: 'branch',\r\n            labelWidth: 55,\r\n            options: [{ value: 'Cebu' }, { value: 'Manila' }],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Team',\r\n            value: employee.team,\r\n            name: 'team',\r\n            labelWidth: 40,\r\n            options: [{ value: 'ABC' }],\r\n          })}\r\n\r\n          {myDateTimePicker({\r\n            label: 'Birthdate',\r\n            value: employee.birthdate,\r\n            name: 'birthdate',\r\n          })}\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 10, paddingBottom: 5 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.goBack()}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton()}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\nexport default NewEmployee\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\EditEmployee\\index.tsx",["355"],"import React, { useContext } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { GlobalContext } from 'hooks/useGlobalState'\r\nimport validator from '../../../../validators/saveEmployeeValidator'\r\nimport MyForm, { MyFormProps } from 'components/Common/MyForm'\r\nimport Employee from 'models/employee'\r\n\r\nexport interface EditUserProps {}\r\n\r\nconst EditEmployee: React.SFC<EditUserProps> = () => {\r\n  const [_, dispatch] = useContext(GlobalContext)!\r\n\r\n  const history = useHistory()\r\n\r\n  const [employee, setEmployee] = React.useState<Employee>({\r\n    firstname: 'sds',\r\n    middlename: 'dfdf',\r\n    lastname: 'fgf',\r\n    address: 'fgf',\r\n    contact: 'fgfg',\r\n    gender: 'Male',\r\n    civil: 'Single',\r\n    birthdate: new Date('10/03/1991'),\r\n    position: 'Branch Manager',\r\n  })\r\n\r\n  const onSubmit = async (data: Employee) => {\r\n    console.log(data)\r\n    dispatch({\r\n      type: 'setAlert',\r\n      payload: { message: 'Successfully added', type: 'success' },\r\n    })\r\n\r\n    return Promise.resolve()\r\n  }\r\n\r\n  const formProps: MyFormProps<Employee> = {\r\n    state: [employee, setEmployee],\r\n    onSubmit,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myInput, mySelect, myDateTimePicker, myButton }) => (\r\n        <>\r\n          {myInput({\r\n            label: 'Firstname',\r\n            value: employee.firstname,\r\n            name: 'firstname',\r\n          })}\r\n          {myInput({\r\n            label: 'Middlename',\r\n            value: employee.middlename,\r\n            name: 'middlename',\r\n          })}\r\n          {myInput({\r\n            label: 'Lastname',\r\n            value: employee.lastname,\r\n            name: 'lastname',\r\n          })}\r\n          {myInput({\r\n            label: 'Contact Number',\r\n            value: employee.contact,\r\n            name: 'contact',\r\n          })}\r\n\r\n          {myInput({\r\n            label: 'Address',\r\n            value: employee.address,\r\n            name: 'address',\r\n            isMultiline: true,\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Gender',\r\n            value: employee.gender,\r\n            name: 'gender',\r\n            options: [\r\n              { value: 'Male' },\r\n              { value: 'Female' },\r\n              { value: 'Other' },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Civil Status',\r\n            value: employee.civil,\r\n            name: 'civil',\r\n            labelWidth: 80,\r\n            options: [\r\n              { value: 'Single' },\r\n              { value: 'Married' },\r\n              { value: 'Widowed' },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Position',\r\n            value: employee.position,\r\n            name: 'position',\r\n            labelWidth: 55,\r\n            options: [\r\n              { value: 'Sales Agent' },\r\n              { value: 'Branch Manager' },\r\n              { value: 'Agency Manager' },\r\n              { value: 'Supervisor' },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Branch',\r\n            value: employee.branch,\r\n            name: 'branch',\r\n            labelWidth: 55,\r\n            options: [{ value: 'Cebu' }, { value: 'Manila' }],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Team',\r\n            value: employee.team,\r\n            name: 'team',\r\n            labelWidth: 40,\r\n            options: [{ value: 'ABC' }],\r\n          })}\r\n\r\n          {myDateTimePicker({\r\n            label: 'Birthdate',\r\n            value: employee.birthdate,\r\n            name: 'birthdate',\r\n          })}\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 10, paddingBottom: 5 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.goBack()}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton()}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\nexport default EditEmployee\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\EmployeeCard\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\clients\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MySearchField\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\index.tsx",["356","357","358"],"import MySearchField from 'components/Common/MySearchField'\r\nimport Client from 'models/client'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\r\n\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Fab from '@material-ui/core/Fab'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport { useHistory } from 'react-router-dom'\r\nimport ClientCard from './ClientCard'\r\nimport { useContext, useEffect } from 'react'\r\nimport { getClients } from 'api/clientService'\r\nimport { ClientContext } from 'hooks/useClientState'\r\nimport { GlobalContext } from 'hooks/useGlobalState'\r\n\r\nexport interface ClientsProps {}\r\n\r\nconst Clients: React.SFC<ClientsProps> = () => {\r\n  const [clientState, clientDispatch] = useContext(ClientContext)!\r\n\r\n  const [_, globalDispatch] = useContext(GlobalContext)!\r\n\r\n  const styles = useStyles()\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    globalDispatch({ type: 'setTitle', payload: 'Client Management' })\r\n    clientDispatch({ type: 'setIsLoading', payload: true })\r\n    getClients().then((clients) => {\r\n      clientDispatch({ type: 'onLoad', payload: clients })\r\n    })\r\n  }, [])\r\n\r\n  if (clientState.isLoading && !clientState.clients.length)\r\n    return <h4>Loading...</h4>\r\n\r\n  return (\r\n    <>\r\n      <MySearchField style={{ marginBottom: 15 }} />\r\n      <Grid\r\n        container\r\n        spacing={2}\r\n        direction='column'\r\n        justify='flex-start'\r\n        alignItems='center'\r\n      >\r\n        {clientState.clients.map((client) => (\r\n          <Grid key={client.id} item xs={12}>\r\n            <ClientCard key={client.id} client={client} />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n\r\n      <Fab\r\n        onClick={() => history.push('/clients/new')}\r\n        className={styles.fab}\r\n        color='primary'\r\n        aria-label='add'\r\n      >\r\n        <AddIcon />\r\n      </Fab>\r\n    </>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    fab: {\r\n      position: 'fixed',\r\n      bottom: 20,\r\n      right: 20,\r\n    },\r\n  }),\r\n)\r\n\r\nexport default Clients\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\ClientCard\\index.tsx",["359","360"],"import MyCard from 'components/Common/MyCard'\r\nimport React from 'react'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport ViewIcon from '@material-ui/icons/RemoveRedEye'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport Chip from '@material-ui/core/Chip'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport userIcon from 'assets/profile-user.svg'\r\nimport Client from 'models/client'\r\nimport { useHistory } from 'react-router-dom'\r\nimport MyAvatar from 'components/Common/MyAvatar'\r\nimport { computeTotalPaid, computeTotalPay } from 'api/clientService'\r\n\r\nexport interface ClientCardProps {\r\n  client: Client\r\n}\r\n\r\nexport const ClientCard: React.SFC<ClientCardProps> = ({ client }) => {\r\n  const history = useHistory()\r\n\r\n  return (\r\n    <MyCard title={client.code} style={{ paddingBottom: 5 }}>\r\n      <CardContent>\r\n        <Grid container xs={12} justify='space-between'>\r\n          <Grid\r\n            style={{ paddingLeft: 10 }}\r\n            container\r\n            item\r\n            direction='column'\r\n            xs={7}\r\n            justify='flex-start'\r\n          >\r\n            <Typography component='h6' variant='h6'>\r\n              {`${client.lastname}, ${client.firstname} ${client.middlename}`}\r\n            </Typography>\r\n            <Typography variant='subtitle1' color='textSecondary'>\r\n              {client.plan + ' - ' + client.payment_mode}\r\n            </Typography>\r\n            <Grid item xs={1}>\r\n              <Chip\r\n                style={{ marginTop: 5 }}\r\n                size='small'\r\n                label={\r\n                  computeTotalPaid(client) +\r\n                  '/' +\r\n                  computeTotalPay(client) +\r\n                  ' Paid'\r\n                }\r\n                variant='default'\r\n                color='secondary'\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item xs={5} justify='center' alignItems='center'>\r\n            <MyAvatar onClick={() => history.push('/clients/' + client.id)} />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n\r\n      <Divider style={{ marginLeft: 20, marginRight: 20 }}></Divider>\r\n      <Grid container xs={12} justify='space-evenly'>\r\n        <IconButton\r\n          onClick={() => history.push('/clients/' + client.id)}\r\n          aria-label='view'\r\n        >\r\n          <ViewIcon />\r\n        </IconButton>\r\n        <IconButton\r\n          onClick={() => history.push('/clients/edit/' + client.id)}\r\n          aria-label='edit'\r\n        >\r\n          <EditIcon />\r\n        </IconButton>\r\n        <IconButton aria-label='archive'>\r\n          <DeleteIcon />\r\n        </IconButton>\r\n      </Grid>\r\n    </MyCard>\r\n  )\r\n}\r\nexport default ClientCard\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyAvatar\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\ViewClient\\index.tsx",["361","362"],"import React, { useState, useEffect, useContext } from 'react'\r\n\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Chip from '@material-ui/core/Chip'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport userIcon from 'assets/profile-user.svg'\r\nimport { calculateAge } from 'utils/helper'\r\nimport MyCard from 'components/Common/MyCard'\r\nimport Client from 'models/client'\r\nimport { ClientContext } from 'hooks/useClientState'\r\nimport { GlobalContext } from 'hooks/useGlobalState'\r\n\r\nimport { getClient, computeTotalPaid, computeTotalPay } from 'api/clientService'\r\n\r\nexport interface ViewClientProps {}\r\n\r\nconst ViewClient: React.SFC<ViewClientProps> = () => {\r\n  const history = useHistory()\r\n\r\n  const { id } = useParams<{ id: string }>()\r\n\r\n  const [_, globalDispatch] = useContext(GlobalContext)!\r\n\r\n  const [clientState] = useContext(ClientContext)!\r\n\r\n  const [client, setClient] = useState<Client>()\r\n\r\n  useEffect(() => {\r\n    globalDispatch({ type: 'setTitle', payload: 'Client Details' })\r\n    getClient(clientState.clients, +id).then((client) => setClient(client))\r\n  }, [])\r\n\r\n  const detail = (title: string, subtitle: any) => (\r\n    <Grid container alignItems='center' direction='column' item xs={6}>\r\n      <Typography component='h6' variant='h6'>\r\n        {title}\r\n      </Typography>\r\n      <Typography variant='subtitle1' color='textSecondary'>\r\n        {subtitle}\r\n      </Typography>\r\n    </Grid>\r\n  )\r\n\r\n  return (\r\n    <Grid container xs={12}>\r\n      {client && (\r\n        <>\r\n          <MyCard title={client.code}>\r\n            <CardContent>\r\n              <Grid container xs={12} justify='space-between'>\r\n                <Grid\r\n                  style={{ paddingLeft: 10 }}\r\n                  container\r\n                  direction='column'\r\n                  item\r\n                  xs={7}\r\n                  justify='flex-start'\r\n                >\r\n                  <Typography component='h6' variant='h6'>\r\n                    {`${client.lastname}, ${client.firstname} ${client.middlename}`}\r\n                  </Typography>\r\n                  <Typography variant='subtitle1' color='textSecondary'>\r\n                    {client.plan + ' - ' + client.payment_mode}\r\n                  </Typography>\r\n\r\n                  <Grid item xs={1}>\r\n                    <Chip\r\n                      style={{ marginTop: 5 }}\r\n                      size='small'\r\n                      label={\r\n                        computeTotalPaid(client) +\r\n                        '/' +\r\n                        computeTotalPay(client) +\r\n                        ' Paid'\r\n                      }\r\n                      variant='default'\r\n                      color='secondary'\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid\r\n                  container\r\n                  item\r\n                  xs={5}\r\n                  justify='center'\r\n                  alignItems='center'\r\n                >\r\n                  <IconButton aria-label='play/pause'>\r\n                    <img\r\n                      style={{ width: 100 }}\r\n                      src={userIcon}\r\n                      alt='User Logo'\r\n                    />\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n            <Divider style={{ marginLeft: 20, marginRight: 20 }}></Divider>\r\n            <CardContent>\r\n              <Grid spacing={1} container xs={12} style={{ paddingLeft: 10 }}>\r\n                {detail('Period ', client.payment_period)}\r\n                {detail('Balance', 'Php ' + client.balance)}\r\n                {detail('Branch', client.branch)}\r\n                {detail('Ended', client.end_date?.toLocaleDateString())}\r\n              </Grid>\r\n            </CardContent>\r\n            <Divider style={{ marginLeft: 20, marginRight: 20 }}></Divider>\r\n            <CardContent>\r\n              <Grid spacing={1} container xs={12} style={{ paddingLeft: 10 }}>\r\n                {detail('Gender', client.gender)}\r\n                {detail('Civil Status', client.civil)}\r\n                {detail('Contact', client.contact)}\r\n                {detail(\r\n                  'Age',\r\n                  client.birthdate ? calculateAge(client.birthdate) : 'N/A',\r\n                )}\r\n\r\n                <Grid\r\n                  container\r\n                  alignItems='center'\r\n                  direction='column'\r\n                  item\r\n                  xs={12}\r\n                >\r\n                  <Typography component='h6' variant='h6'>\r\n                    Address\r\n                  </Typography>\r\n                  <Typography variant='subtitle1' color='textSecondary'>\r\n                    {client.address}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n          </MyCard>\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 10, paddingBottom: 5 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.goBack()}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.push('/clients/edit/' + client.id)}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='primary'\r\n              >\r\n                EDIT\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default ViewClient\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\index.tsx",["363","364"],"import React, { useContext, useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Profile from 'models/profile'\r\nimport Client from 'models/client'\r\nimport Commissioner from 'models/commissioner'\r\nimport { ClientStepOne } from './ClientStepOne'\r\nimport { ClientStepTwo } from './ClientStepTwo'\r\nimport MyStepper, { useStepper } from 'components/Common/MyStepper'\r\nimport { ClientStepThree } from './ClientStepThree'\r\nimport Scroll from 'react-scroll'\r\nimport { GlobalContext } from 'hooks/useGlobalState'\r\n\r\nexport interface NewClientProps {}\r\n\r\nconst NewClient: React.SFC<NewClientProps> = () => {\r\n  const [state, dispatch] = useContext(GlobalContext)!\r\n\r\n  const scroll = Scroll.animateScroll\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'setTitle', payload: 'Client Registration' })\r\n    scroll.scrollToTop({ duration: 500 })\r\n  }, [])\r\n\r\n  const history = useHistory()\r\n\r\n  const stepper = useStepper([\r\n    'Create Profile Account',\r\n    'Select All Commissioners',\r\n    'Select Plan And Payment',\r\n  ])\r\n\r\n  const [profile, setProfile] = React.useState<Profile>({})\r\n\r\n  const [commissioner, setCommissioner] = React.useState<Commissioner>({\r\n    position: 'sales_agent',\r\n  })\r\n\r\n  const [client, setClient] = React.useState<Client>({})\r\n\r\n  const onNextOne = async (profile: Profile) => {\r\n    scroll.scrollToTop({ duration: 500 })\r\n    console.log('profile', profile)\r\n    setProfile(profile)\r\n    stepper.handleNext()\r\n  }\r\n\r\n  const onNextTwo = async (commissioner: Commissioner) => {\r\n    const insured_employee = commissioner[commissioner.position] ?? ''\r\n\r\n    if (!insured_employee) {\r\n      dispatch({\r\n        type: 'setAlert',\r\n        payload: {\r\n          message:\r\n            'Sales Agent is not present! Please select another employee.',\r\n          type: 'error',\r\n        },\r\n      })\r\n\r\n      return\r\n    }\r\n\r\n    scroll.scrollToTop({ duration: 500 })\r\n\r\n    setClient((client) => ({ ...client, insured_employee }))\r\n\r\n    setCommissioner(commissioner)\r\n\r\n    stepper.handleNext()\r\n\r\n    console.log(commissioner)\r\n  }\r\n\r\n  const onNextThree = async (client: Client) => {\r\n    scroll.scrollToTop({ duration: 500 })\r\n\r\n    setClient(client)\r\n\r\n    stepper.handleNext()\r\n\r\n    console.log({\r\n      client: { ...profile, ...client },\r\n      commissioner,\r\n    })\r\n  }\r\n\r\n  const onAddNew = () => {\r\n    stepper.handleReset()\r\n    setProfile({})\r\n    setCommissioner({\r\n      position: 'sales_agent',\r\n    })\r\n    setClient({})\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <MyStepper {...stepper} />\r\n      {stepper.activeStep === 0 && (\r\n        <ClientStepOne onNext={onNextOne} state={[profile, setProfile]} />\r\n      )}\r\n      {stepper.activeStep === 1 && (\r\n        <ClientStepTwo\r\n          onBack={() => stepper.handleBack()}\r\n          onNext={onNextTwo}\r\n          state={[commissioner, setCommissioner]}\r\n        />\r\n      )}\r\n      {stepper.activeStep === 2 && (\r\n        <ClientStepThree\r\n          onBack={() => stepper.handleBack()}\r\n          onNext={onNextThree}\r\n          state={[client, setClient]}\r\n        />\r\n      )}\r\n\r\n      {stepper.activeStep === 3 && (\r\n        <Grid container xs={12} direction='column' alignItems='center'>\r\n          <Typography component='h6' variant='subtitle1'>\r\n            All Step Completed!\r\n          </Typography>\r\n          <Grid spacing={2} item container xs={12}>\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.replace('/clients')}\r\n                style={{ paddingTop: 15, paddingBottom: 15, marginTop: 10 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                CLIENT LIST\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={onAddNew}\r\n                style={{ paddingTop: 15, paddingBottom: 15, marginTop: 10 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='primary'\r\n              >\r\n                ADD NEW\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default NewClient\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\ClientStepOne.tsx",["365"],"import React, { useContext } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport MyForm, { MyFormProps } from 'components/Common/MyForm'\r\nimport Profile from 'models/profile'\r\nimport validator from 'validators/saveProfileValidator'\r\n\r\nexport interface ClientStepOneProps {\r\n  state: [Profile, React.Dispatch<React.SetStateAction<Profile>>]\r\n  onNext: (profile: Profile) => Promise<void>\r\n}\r\n\r\nexport const ClientStepOne: React.SFC<ClientStepOneProps> = ({\r\n  state: [profile, setProfile],\r\n  onNext,\r\n}) => {\r\n  const history = useHistory()\r\n\r\n  const formProps: MyFormProps<Profile> = {\r\n    state: [profile, setProfile],\r\n    onSubmit: onNext,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myInput, mySelect, myDateTimePicker, myButton }) => (\r\n        <>\r\n          {myInput({\r\n            label: 'Firstname',\r\n            value: profile.firstname,\r\n            name: 'firstname',\r\n          })}\r\n          {myInput({\r\n            label: 'Middlename',\r\n            value: profile.middlename,\r\n            name: 'middlename',\r\n          })}\r\n          {myInput({\r\n            label: 'Lastname',\r\n            value: profile.lastname,\r\n            name: 'lastname',\r\n          })}\r\n          {myInput({\r\n            label: 'Contact Number',\r\n            value: profile.contact,\r\n            name: 'contact',\r\n          })}\r\n\r\n          {myInput({\r\n            label: 'Address',\r\n            value: profile.address,\r\n            name: 'address',\r\n            isMultiline: true,\r\n          })}\r\n          {mySelect({\r\n            label: 'Gender',\r\n            value: profile.gender,\r\n            name: 'gender',\r\n            options: [\r\n              { value: 'Male' },\r\n              { value: 'Female' },\r\n              { value: 'Other' },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Civil Status',\r\n            value: profile.civil,\r\n            name: 'civil',\r\n            labelWidth: 80,\r\n            options: [\r\n              { value: 'Single' },\r\n              { value: 'Married' },\r\n              { value: 'Widowed' },\r\n            ],\r\n          })}\r\n\r\n          {myDateTimePicker({\r\n            label: 'Birthdate',\r\n            value: profile.birthdate,\r\n            name: 'birthdate',\r\n          })}\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 10, paddingBottom: 5 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.goBack()}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton('NEXT')}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\n\r\nexport default ClientStepOne\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\ClientStepTwo.tsx",["366","367","368"],"import React from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport MyForm, { MyFormProps } from 'components/Common/MyForm'\r\nimport Client from 'models/client'\r\nimport Commissioner from 'models/commissioner'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport validator from 'validators/clientStepTwoValidator'\r\n\r\nexport interface ClientStepTwoProps {\r\n  onBack: () => void\r\n  onNext: (commissioner: Commissioner) => Promise<void>\r\n  state: [Commissioner, React.Dispatch<React.SetStateAction<Commissioner>>]\r\n}\r\n\r\nexport const ClientStepTwo: React.SFC<ClientStepTwoProps> = ({\r\n  state: [commissioner, setCommissioner],\r\n  onBack,\r\n  onNext,\r\n}) => {\r\n  const formProps: MyFormProps<Commissioner> = {\r\n    state: [commissioner, setCommissioner],\r\n    onSubmit: onNext,\r\n    validator,\r\n    radioButtonDefaultValue: commissioner.position,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myRadio, mySelect, myButton }) => (\r\n        <>\r\n          <Grid\r\n            style={{ paddingLeft: 10, marginTop: 5 }}\r\n            spacing={2}\r\n            container\r\n            xs={12}\r\n          >\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Branch Manager',\r\n                  value: commissioner.branch_manager,\r\n                  name: 'branch_manager',\r\n                  labelWidth: 120,\r\n                  options: [\r\n                    { value: 1, name: 'John Doe' },\r\n                    { value: 2, name: 'John Smith' },\r\n                  ],\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'branch_manager', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Agency Manager',\r\n                  value: commissioner.agency_manager,\r\n                  name: 'agency_manager',\r\n                  labelWidth: 120,\r\n                  options: [\r\n                    { value: 3, name: 'John Joe' },\r\n                    { value: 4, name: 'John Witch' },\r\n                  ],\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'agency_manager', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Supervisor',\r\n                  value: commissioner.supervisor,\r\n                  name: 'supervisor',\r\n                  labelWidth: 80,\r\n                  options: [\r\n                    { value: 5, name: 'John Doex' },\r\n                    { value: 6, name: 'John Smithx' },\r\n                  ],\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'supervisor', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Sales Agent',\r\n                  value: commissioner.sales_agent,\r\n                  name: 'sales_agent',\r\n                  labelWidth: 85,\r\n                  options: [\r\n                    { value: 7, name: 'John Doex' },\r\n                    { value: 8, name: 'John Smithc' },\r\n                  ],\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'sales_agent', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n          </Grid>\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 15, paddingBottom: 15 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => onBack()}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton('NEXT')}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\saveEmployeeValidator.tsx",["369","370"],"import Joi from 'joi'\r\nimport Employee from 'models/employee'\r\nimport { lettersOnly, notNull } from 'utils/helper'\r\n\r\nconst saveEmployeeValidator = {\r\n  firstname: lettersOnly('Firstname').min(1).max(50),\r\n  middlename: lettersOnly('Middlename').min(1).max(50),\r\n  lastname: lettersOnly('Lastname').min(1).max(50),\r\n  position: notNull('Position'),\r\n  status: notNull('Status'),\r\n  civil: notNull('Civil Status'),\r\n  gender: notNull('Gender'),\r\n  branch: notNull('Branch'),\r\n}\r\n\r\nexport default saveEmployeeValidator\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\saveProfileValidator.tsx",["371"],"import Joi from 'joi'\r\nimport { lettersOnly, notNull } from 'utils/helper'\r\n\r\nconst saveProfileValidator = {\r\n  firstname: lettersOnly('Firstname').min(1).max(50),\r\n  middlename: lettersOnly('Middlename').min(1).max(50),\r\n  lastname: lettersOnly('Lastname').min(1).max(50),\r\n  civil: notNull('Civil Status'),\r\n  gender: notNull('Gender'),\r\n}\r\n\r\nexport default saveProfileValidator\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\NewClient\\ClientStepThree.tsx",["372"],"import React from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport MyForm, { MyFormProps } from 'components/Common/MyForm'\r\nimport Client from 'models/client'\r\nimport Commissioner from 'models/commissioner'\r\nimport validator from 'validators/clientStepThreeValidator'\r\n\r\nexport interface ClientStepTwoProps {\r\n  onBack: () => void\r\n  onNext: (client: Client) => Promise<void>\r\n  state: [Client, React.Dispatch<React.SetStateAction<Client>>]\r\n}\r\n\r\nexport const ClientStepThree: React.SFC<ClientStepTwoProps> = ({\r\n  state: [client, setClient],\r\n  onBack,\r\n  onNext,\r\n}) => {\r\n  const formProps: MyFormProps<Client> = {\r\n    state: [client, setClient],\r\n    onSubmit: onNext,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myInput, mySelect, myButton }) => (\r\n        <>\r\n          {mySelect({\r\n            label: 'Plan',\r\n            value: client.plan,\r\n            name: 'plan',\r\n            labelWidth: 30,\r\n            options: [\r\n              { value: 'Plan 1' },\r\n              { value: 'Plan 2' },\r\n              { value: 'Plan 3' },\r\n            ],\r\n          })}\r\n          {mySelect({\r\n            label: 'Payment Mode',\r\n            value: client.payment_mode,\r\n            name: 'payment_mode',\r\n            labelWidth: 110,\r\n            options: [{ value: 'Installment' }, { value: 'Fullpayment' }],\r\n          })}\r\n\r\n          {client.payment_mode && client.plan && (\r\n            <>\r\n              {client.payment_mode === 'Installment' &&\r\n                mySelect({\r\n                  label: 'Payment Period',\r\n                  value: client.payment_period,\r\n                  name: 'payment_period',\r\n                  labelWidth: 120,\r\n                  options: [\r\n                    { value: 'Monthly' },\r\n                    { value: 'Quarterly' },\r\n                    { value: 'Semi-Annually' },\r\n                    { value: 'Annually' },\r\n                  ],\r\n                })}\r\n\r\n              <Grid\r\n                xs={12}\r\n                style={{\r\n                  marginBottom: 10,\r\n                  marginTop: 10,\r\n                  paddingRight: 8,\r\n                  paddingLeft: 8,\r\n                }}\r\n                direction='column'\r\n              >\r\n                {myInput({\r\n                  label: 'OR Number',\r\n                  name: 'or_number',\r\n                })}\r\n              </Grid>\r\n\r\n              <Grid style={{ paddingLeft: 10 }} direction='column'>\r\n                {client.payment_period &&\r\n                  client.payment_mode === 'Installment' && (\r\n                    <>\r\n                      <Typography component='h6' variant='subtitle1'>\r\n                        Downpayment\r\n                      </Typography>\r\n                      <Typography color='primary' variant='subtitle1'>\r\n                        Php 388.00\r\n                      </Typography>\r\n                    </>\r\n                  )}\r\n                {client.payment_mode === 'Fullpayment' && (\r\n                  <>\r\n                    <Typography component='h6' variant='subtitle1'>\r\n                      Lumpsum Price\r\n                    </Typography>\r\n                    <Typography color='primary' variant='subtitle1'>\r\n                      Php 23,280.00\r\n                    </Typography>\r\n                  </>\r\n                )}\r\n              </Grid>\r\n            </>\r\n          )}\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 15, paddingBottom: 15 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => onBack()}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton('PAY')}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\clientStepTwoValidator.tsx",["373"],"import Joi from 'joi'\r\nimport { lettersOnly, notNull } from 'utils/helper'\r\n\r\nconst clientStepTwoValidator = {\r\n  branch_manager: notNull('Branch Manager'),\r\n  agency_manager: notNull('Agency Manager'),\r\n  supervisor: notNull('Supervisor'),\r\n  sales_agent: Joi.optional(),\r\n  position: notNull('Position'),\r\n  insured_employee: Joi.optional(),\r\n}\r\n\r\nexport default clientStepTwoValidator\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\clientStepThreeValidator.tsx",["374"],"import Joi from 'joi'\r\nimport { lettersOnly, notNull } from 'utils/helper'\r\n\r\nconst clientStepThreeValidator = {\r\n  plan: notNull('Plan'),\r\n  amount: Joi.number().required().label('Amount'),\r\n  payment_mode: notNull('Payment Mode'),\r\n  or_number: notNull('OR Number'),\r\n  payment_period: Joi.when('payment_mode', {\r\n    is: Joi.string().valid('Fullpayment'),\r\n    then: Joi.valid(null),\r\n    otherwise: notNull('Payment Period'),\r\n  }),\r\n  created_at: notNull('Insure Date'),\r\n}\r\n\r\nexport default clientStepThreeValidator\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\ViewEmployee\\index.tsx",["375","376","377"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Employees\\index.tsx",["378","379"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Employees\\ViewEmployee\\index.tsx",["380","381","382","383"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport Link from '@material-ui/core/Link'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport Chip from '@material-ui/core/Chip'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport { calculateAge, capitalize } from 'utils/helper'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\r\nimport MyCard from 'components/common/MyCard'\r\nimport Employee from 'models/employee'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport Client from 'models/client'\r\nimport MyAvatar from 'components/common/MyAvatar'\r\nimport { getEmployee } from 'services/employeeService'\r\nimport MySkeletonCard from 'components/common/MySkeletonCard'\r\nimport MyMiniCards from 'components/common/MyMiniCards'\r\nimport MySkeletonMiniCards from 'components/common/MySkeletonMiniCards'\r\nimport { EmployeeContext } from 'providers/EmployeeProvider'\r\n\r\nexport interface ViewUserProps {\r\n  title: string\r\n}\r\n\r\nconst ViewEmployee: React.SFC<ViewUserProps> = (props) => {\r\n  const history = useHistory()\r\n  const styles = useStyles()\r\n  const params = useParams<{ id: string }>()\r\n  const [_, dispatch] = useContext(GlobalContext)!\r\n  const [employeeState] = useContext(EmployeeContext)!\r\n\r\n  const [employee, setEmployee] = useState<Employee>()\r\n\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'SET_TITLE', payload: 'View Employee' })\r\n    setIsLoading(true)\r\n    getEmployee(params.id).then((employee) => {\r\n      setEmployee(employee)\r\n      setIsLoading(false)\r\n    })\r\n  }, [])\r\n\r\n  const detail = (title: string, subtitle: any) => (\r\n    <Grid container alignItems='center' direction='column' item xs={6}>\r\n      <Typography component='h6' variant='h6'>\r\n        {title}\r\n      </Typography>\r\n      <Typography variant='subtitle1' color='textSecondary'>\r\n        {subtitle}\r\n      </Typography>\r\n    </Grid>\r\n  )\r\n\r\n  const handleSelected = (client: Client) => {\r\n    history.push('/clients/' + client.id)\r\n  }\r\n\r\n  const branch = employeeState.branches.filter(\r\n    (branch) => branch.id === employee?.branch,\r\n  )[0]\r\n\r\n  const position = employeeState.positions.filter(\r\n    (position) => position.id === employee?.position,\r\n  )[0]\r\n\r\n  const renderClients = (clients: Client[]) => {\r\n    return (\r\n      <>\r\n        <Grid\r\n          container\r\n          style={{ marginTop: 20, marginBottom: 10 }}\r\n          xs={12}\r\n          justify='space-between'\r\n        >\r\n          <Typography variant='subtitle1'>Recent Clients</Typography>\r\n          <Link\r\n            component='button'\r\n            variant='body1'\r\n            onClick={() => history.push('/clients')}\r\n          >\r\n            View All({clients.length})\r\n          </Link>\r\n        </Grid>\r\n        <MyMiniCards onSelected={handleSelected} items={clients}>\r\n          {({ renderCards, item }) => (\r\n            <>\r\n              {renderCards({\r\n                item,\r\n                title: `${item.lastname}, ${item.firstname}`,\r\n                subtitle: item.code!,\r\n                src: item.image_url,\r\n              })}\r\n            </>\r\n          )}\r\n        </MyMiniCards>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid container xs={12}>\r\n        {isLoading && (\r\n          <>\r\n            <MySkeletonCard />\r\n            <Grid\r\n              container\r\n              style={{ marginBottom: 10 }}\r\n              xs={12}\r\n              justify='space-between'\r\n            >\r\n              <Typography variant='subtitle1'>Recent Clients</Typography>\r\n              <Link component='button' variant='body1'>\r\n                View All({employee?.clients?.length})\r\n              </Link>\r\n              <MySkeletonMiniCards />\r\n            </Grid>\r\n          </>\r\n        )}\r\n        {!isLoading && employee && (\r\n          <>\r\n            <MyCard title='Employee Details'>\r\n              <CardContent>\r\n                <Grid container xs={12} justify='space-between'>\r\n                  <Grid\r\n                    style={{ paddingLeft: 10 }}\r\n                    container\r\n                    direction='column'\r\n                    item\r\n                    xs={7}\r\n                    justify='flex-start'\r\n                  >\r\n                    <Typography component='h6' variant='h6'>\r\n                      {`${employee.lastname}, ${employee.firstname} ${employee.middlename}`}\r\n                    </Typography>\r\n                    <Typography variant='subtitle1' color='textSecondary'>\r\n                      {position?.name}\r\n                    </Typography>\r\n                    <Typography variant='subtitle1' color='textSecondary'>\r\n                      {branch?.name}\r\n                    </Typography>\r\n                    <Grid item xs={1}>\r\n                      <Chip\r\n                        style={{ marginTop: 5 }}\r\n                        size='small'\r\n                        label={employee.status}\r\n                        variant='default'\r\n                        color={\r\n                          employee.status !== 'active' ? 'secondary' : 'primary'\r\n                        }\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid\r\n                    container\r\n                    item\r\n                    xs={5}\r\n                    justify='center'\r\n                    alignItems='center'\r\n                  >\r\n                    <MyAvatar src={employee.image_url} />\r\n                  </Grid>\r\n                </Grid>\r\n              </CardContent>\r\n              <Divider style={{ marginLeft: 20, marginRight: 20 }}></Divider>\r\n              <CardContent>\r\n                <Grid spacing={1} container xs={12} style={{ paddingLeft: 10 }}>\r\n                  {detail('Gender', employee.gender)}\r\n                  {detail('Civil Status', employee.civil)}\r\n                  {detail('Contact', employee.contact)}\r\n                  {detail(\r\n                    'Age',\r\n                    employee.birthdate\r\n                      ? calculateAge(employee.birthdate)\r\n                      : 'N/A',\r\n                  )}\r\n                  {\r\n                    <Grid\r\n                      container\r\n                      alignItems='center'\r\n                      direction='column'\r\n                      item\r\n                      xs={12}\r\n                    >\r\n                      <Typography component='h6' variant='h6'>\r\n                        Address\r\n                      </Typography>\r\n                      <Typography variant='subtitle1' color='textSecondary'>\r\n                        {employee.address}\r\n                      </Typography>\r\n                    </Grid>\r\n                  }\r\n                </Grid>\r\n              </CardContent>\r\n            </MyCard>\r\n            {renderClients(employee.clients!)}\r\n            <Grid\r\n              style={{\r\n                paddingLeft: 18,\r\n                paddingTop: 10,\r\n                paddingBottom: 5,\r\n              }}\r\n              container\r\n              xs={12}\r\n              justify='center'\r\n              spacing={2}\r\n            >\r\n              <Grid item xs={6}>\r\n                <Button\r\n                  onClick={() => history.goBack()}\r\n                  style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                  fullWidth\r\n                  variant='contained'\r\n                  color='default'\r\n                >\r\n                  BACK\r\n                </Button>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <Button\r\n                  onClick={() => history.push('/employees/edit/' + employee.id)}\r\n                  style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                  fullWidth\r\n                  variant='contained'\r\n                  color='primary'\r\n                >\r\n                  EDIT\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </>\r\n        )}\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    avatar: {\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n  }),\r\n)\r\n\r\nexport default ViewEmployee\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\index.tsx",["384","385"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\ViewClient\\index.tsx",["386","387","388","389","390","391","392","393"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Employees\\NewEmployee\\index.tsx",["394","395","396","397"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Employees\\EditEmployee\\index.tsx",["398","399","400","401"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\NewClient\\index.tsx",["402","403"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\NewClient\\ClientStepOne.tsx",["404"],"import React, { useContext } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport MyForm, { MyFormProps } from 'components/common/MyForm'\r\nimport Profile from 'models/profile'\r\nimport validator from 'validators/saveProfileValidator'\r\n\r\nexport interface ClientStepOneProps {\r\n  state: [Profile, React.Dispatch<React.SetStateAction<Profile>>]\r\n  onNext: (profile: Profile) => Promise<void>\r\n}\r\n\r\nexport const ClientStepOne: React.SFC<ClientStepOneProps> = ({\r\n  state: [profile, setProfile],\r\n  onNext,\r\n}) => {\r\n  const history = useHistory()\r\n\r\n  const [imageFile, setImageFile] = React.useState<HTMLImageElement | null>(\r\n    null,\r\n  )\r\n\r\n  const formProps: MyFormProps<Profile> = {\r\n    state: [profile, setProfile],\r\n    onSubmit: onNext,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myInput, mySelect, myDateTimePicker, myButton }) => (\r\n        <>\r\n          {myInput({\r\n            label: 'Firstname',\r\n            value: profile.firstname,\r\n            name: 'firstname',\r\n          })}\r\n          {myInput({\r\n            label: 'Middlename',\r\n            value: profile.middlename,\r\n            name: 'middlename',\r\n          })}\r\n          {myInput({\r\n            label: 'Lastname',\r\n            value: profile.lastname,\r\n            name: 'lastname',\r\n          })}\r\n          {myInput({\r\n            label: 'Contact Number',\r\n            value: profile.contact,\r\n            name: 'contact',\r\n          })}\r\n\r\n          {myInput({\r\n            label: 'Address',\r\n            value: profile.address,\r\n            name: 'address',\r\n            isMultiline: true,\r\n          })}\r\n\r\n          {myDateTimePicker({\r\n            label: 'Birthdate',\r\n            value: profile.birthdate,\r\n            name: 'birthdate',\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Gender',\r\n            value: profile.gender,\r\n            name: 'gender',\r\n            options: [\r\n              { value: 'Male' },\r\n              { value: 'Female' },\r\n              { value: 'Other' },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Civil Status',\r\n            value: profile.civil,\r\n            name: 'civil',\r\n            labelWidth: 80,\r\n            options: [\r\n              { value: 'Single' },\r\n              { value: 'Married' },\r\n              { value: 'Widowed' },\r\n            ],\r\n          })}\r\n\r\n          <Grid\r\n            container\r\n            style={{\r\n              paddingLeft: 15,\r\n              paddingRight: 15,\r\n              marginBottom: 10,\r\n            }}\r\n            alignItems='center'\r\n            justify='space-between'\r\n            xs={12}\r\n          >\r\n            <Typography variant='subtitle1'>\r\n              {imageFile?.name || 'Select Photo'}\r\n            </Typography>\r\n            <>\r\n              <input\r\n                accept='image/*'\r\n                style={{\r\n                  display: 'none',\r\n                }}\r\n                name='image'\r\n                id='icon-button-file'\r\n                type='file'\r\n                onChange={(e: any) => {\r\n                  setImageFile(e.target.files[0])\r\n                }}\r\n              />\r\n              <label htmlFor='icon-button-file'>\r\n                <IconButton\r\n                  color='primary'\r\n                  aria-label='upload picture'\r\n                  component='span'\r\n                >\r\n                  <PhotoCamera />\r\n                </IconButton>\r\n              </label>\r\n            </>\r\n          </Grid>\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 10, paddingBottom: 5 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.goBack()}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton('NEXT')}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\n\r\nexport default ClientStepOne\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\NewClient\\ClientStepTwo.tsx",["405","406","407","408","409","410"],"import React, { useEffect, useState } from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport MyForm, { MyFormProps } from 'components/common/MyForm'\r\nimport Client from 'models/client'\r\nimport Commissioner from 'models/commissioner'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport validator from 'validators/clientStepTwoValidator'\r\nimport { getEmployees } from 'services/employeeService'\r\nimport Employee from 'models/employee'\r\n\r\nexport interface ClientStepTwoProps {\r\n  onBack: () => void\r\n  onNext: (commissioner: Commissioner) => Promise<void>\r\n  state: [Commissioner, React.Dispatch<React.SetStateAction<Commissioner>>]\r\n  employees: Employee[]\r\n}\r\n\r\nexport const ClientStepTwo: React.SFC<ClientStepTwoProps> = ({\r\n  state: [commissioner, setCommissioner],\r\n  onBack,\r\n  onNext,\r\n  employees,\r\n}) => {\r\n  const formProps: MyFormProps<Commissioner> = {\r\n    state: [commissioner, setCommissioner],\r\n    onSubmit: onNext,\r\n    validator,\r\n    radioButtonDefaultValue: commissioner.position,\r\n  }\r\n\r\n  const employeeOptions = (id: number) =>\r\n    employees\r\n      .filter((employee) => employee.position?.id === id)\r\n      .map((employee) => ({\r\n        value: employee.id,\r\n        name: `${employee.profile?.lastname}, ${employee.profile?.firstname}`,\r\n      }))\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myRadio, mySelect, myButton }) => (\r\n        <>\r\n          <Grid\r\n            style={{ paddingLeft: 10, marginTop: 5 }}\r\n            spacing={2}\r\n            container\r\n            xs={12}\r\n          >\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Branch Manager',\r\n                  value: commissioner.branch_manager,\r\n                  name: 'branch_manager',\r\n                  labelWidth: 120,\r\n                  options: employeeOptions(1),\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'branch_manager', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Agency Manager',\r\n                  value: commissioner.agency_manager,\r\n                  name: 'agency_manager',\r\n                  labelWidth: 120,\r\n                  options: employeeOptions(2),\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'agency_manager', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Supervisor',\r\n                  value: commissioner.supervisor,\r\n                  name: 'supervisor',\r\n                  labelWidth: 80,\r\n                  options: employeeOptions(3),\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'supervisor', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Sales Agent',\r\n                  value: commissioner.sales_agent,\r\n                  name: 'sales_agent',\r\n                  labelWidth: 85,\r\n                  options: employeeOptions(4),\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'sales_agent', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n          </Grid>\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 15, paddingBottom: 15 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => onBack()}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton('NEXT')}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\NewClient\\ClientStepThree.tsx",["411","412","413","414"],"import { useContext, useEffect, useState } from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport MyForm, { MyFormProps, OptionProps } from 'components/common/MyForm'\r\nimport Client from 'models/client'\r\nimport Commissioner from 'models/commissioner'\r\nimport validator from 'validators/clientStepThreeValidator'\r\nimport { getAmountToPay } from 'services/clientService'\r\nimport { ClientContext } from 'providers/ClientProvider'\r\nimport Payment from 'models/payment'\r\n\r\nexport interface ClientStepTwoProps {\r\n  onBack: () => void\r\n  onNext: (client: Client & Payment) => Promise<void>\r\n  state: [\r\n    Client & Payment,\r\n    React.Dispatch<React.SetStateAction<Client & Payment>>,\r\n  ]\r\n}\r\n\r\nexport const ClientStepThree: React.SFC<ClientStepTwoProps> = ({\r\n  state: [client, setClient],\r\n  onBack,\r\n  onNext,\r\n}) => {\r\n  const [clientState, clientDispatch] = useContext(ClientContext)!\r\n  const [planOptions, setPlanOptions] = useState<OptionProps[] | []>([])\r\n\r\n  useEffect(() => {\r\n    if (client.payment_mode && client.plan) {\r\n      const plan = clientState.plans.filter(\r\n        (plan) => plan.id === (client.plan as any),\r\n      )[0]\r\n      setClient((client) => ({\r\n        ...client,\r\n        amount: getAmountToPay({ ...client, plan }) ?? 0,\r\n      }))\r\n    }\r\n  }, [client.payment_mode, client.payment_period, client.plan])\r\n\r\n  useEffect(() => {\r\n    const options: OptionProps[] = clientState.plans.map((plan) => ({\r\n      value: plan.id,\r\n      name: plan.name,\r\n    }))\r\n    setPlanOptions(options)\r\n  }, [clientState.plans])\r\n\r\n  const formProps: MyFormProps<Client & Payment> = {\r\n    state: [client, setClient],\r\n    onSubmit: onNext,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({\r\n        myControlledInput,\r\n        myInput,\r\n        mySelect,\r\n        myButton,\r\n        myDateTimePicker,\r\n      }) => (\r\n        <>\r\n          {mySelect({\r\n            label: 'Plan',\r\n            value: client.plan,\r\n            name: 'plan',\r\n            labelWidth: 30,\r\n            options: planOptions,\r\n          })}\r\n          {mySelect({\r\n            label: 'Payment Mode',\r\n            value: client.payment_mode,\r\n            name: 'payment_mode',\r\n            labelWidth: 110,\r\n            options: [{ value: 'Installment' }, { value: 'Fullpayment' }],\r\n          })}\r\n\r\n          {client.payment_mode && client.plan && (\r\n            <>\r\n              {client.payment_mode === 'Installment' &&\r\n                mySelect({\r\n                  label: 'Payment Period',\r\n                  value: client.payment_period,\r\n                  name: 'payment_period',\r\n                  labelWidth: 120,\r\n                  options: [\r\n                    { value: 'Monthly' },\r\n                    { value: 'Quarterly' },\r\n                    { value: 'Semi-Annually' },\r\n                    { value: 'Annually' },\r\n                  ],\r\n                })}\r\n              <Grid\r\n                xs={12}\r\n                spacing={1}\r\n                style={{\r\n                  marginBottom: 10,\r\n                  marginTop: 5,\r\n                  paddingLeft: 8,\r\n                }}\r\n                container\r\n              >\r\n                {myControlledInput({\r\n                  label: 'Amount',\r\n                  name: 'amount',\r\n                  value: client.amount,\r\n                })}\r\n                <Grid style={{ marginTop: 10 }} xs={12} item>\r\n                  {myInput({\r\n                    label: 'OR Number',\r\n                    name: 'or_number',\r\n                  })}\r\n                </Grid>\r\n              </Grid>\r\n              {myDateTimePicker({\r\n                label: 'Insure Date',\r\n                value: client.created_at,\r\n                name: 'created_at',\r\n              })}\r\n            </>\r\n          )}\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 15, paddingBottom: 15 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => onBack()}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton('PAY')}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Employees\\EmployeeCard\\index.tsx",["415","416","417"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\ClientCard\\index.tsx",["418"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MySearchField\\index.tsx",["419"],"import FormControl from '@material-ui/core/FormControl'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport OutlinedInput, {\r\n  OutlinedInputProps,\r\n} from '@material-ui/core/OutlinedInput'\r\nimport InputAdornment from '@material-ui/core/InputAdornment'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport { useState } from 'react'\r\nimport { AnyCnameRecord } from 'dns'\r\n\r\nexport interface MySearchFieldProps extends OutlinedInputProps {\r\n  label?: string\r\n  onSearch?: (value: string) => void\r\n}\r\n\r\nconst MySearchField: React.SFC<MySearchFieldProps> = ({\r\n  label,\r\n  onSearch,\r\n  ...props\r\n}) => {\r\n  const [value, setValue] = useState('')\r\n\r\n  const handlePress = (event: any) => {\r\n    if (event.key === 'Enter') {\r\n      onSearch?.call(null, value)\r\n    }\r\n  }\r\n  return (\r\n    <FormControl fullWidth variant='outlined'>\r\n      <InputLabel htmlFor='outlined-adornment-password'>\r\n        {label || 'Search...'}\r\n      </InputLabel>\r\n      <OutlinedInput\r\n        {...props}\r\n        id='outlined-adornment-password'\r\n        name='search'\r\n        type='text'\r\n        labelWidth={props.labelWidth ? props.labelWidth : 65}\r\n        value={value}\r\n        onKeyPress={handlePress}\r\n        onChange={(event) => setValue(event.target.value)}\r\n        endAdornment={\r\n          <InputAdornment position='end'>\r\n            <IconButton\r\n              onClick={() => onSearch?.call(null, value)}\r\n              aria-label='toggle password visibility'\r\n            >\r\n              <SearchIcon />\r\n            </IconButton>\r\n          </InputAdornment>\r\n        }\r\n      />\r\n    </FormControl>\r\n  )\r\n}\r\n\r\nexport default MySearchField\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyAvatar\\index.tsx",["420"],"import IconButton from '@material-ui/core/IconButton'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\r\n\r\nexport interface MyAvatarProps {\r\n  onClick?: () => void\r\n  text?: string\r\n  width?: number\r\n  height?: number\r\n  children?: () => JSX.Element\r\n  src?: string\r\n}\r\n\r\nconst MyAvatar: React.SFC<MyAvatarProps> = ({\r\n  onClick,\r\n  src,\r\n  width,\r\n  height,\r\n  children,\r\n}) => {\r\n  const styles = useStyles()\r\n  return (\r\n    <IconButton onClick={onClick}>\r\n      <Avatar className={styles.avatar} src={src} aria-label='clients'>\r\n        {children?.()}\r\n      </Avatar>\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    avatar: {\r\n      width: 100,\r\n      height: 100,\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n  }),\r\n)\r\n\r\nexport default MyAvatar\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\layout\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyAlert\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyNav\\index.tsx",["421"],"import * as React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport Typography from '@material-ui/core/Typography'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Menu from '@material-ui/icons/Menu'\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\nimport MyDrawer from 'components/common/MyDrawer'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger'\r\nimport Slide from '@material-ui/core/Slide'\r\nimport LinearProgress from '@material-ui/core/LinearProgress'\r\n\r\nconst Nav: React.FC = (props) => {\r\n  const [state, dispatch] = React.useContext(GlobalContext)!\r\n  const history = useHistory()\r\n  const [isActive, setIsActive] = React.useState(false)\r\n\r\n  const onToggle = (title?: string) => {\r\n    setIsActive((isActive) => !isActive)\r\n\r\n    if (!title) {\r\n      return\r\n    }\r\n    dispatch({ type: 'SET_TITLE', payload: title })\r\n  }\r\n\r\n  interface Props {\r\n    window?: () => Window\r\n    children: React.ReactElement\r\n  }\r\n\r\n  function HideOnScroll(props: Props) {\r\n    const { children, window } = props\r\n    const trigger = useScrollTrigger({ target: window ? window() : undefined })\r\n\r\n    return (\r\n      <Slide appear={false} direction='down' in={!trigger}>\r\n        {children}\r\n      </Slide>\r\n    )\r\n  }\r\n  return (\r\n    <>\r\n      <MyDrawer onToggle={onToggle} isActive={isActive} />\r\n      <HideOnScroll {...props}>\r\n        <AppBar\r\n          style={{\r\n            background:\r\n              'linear-gradient(to right, #9c27b0, #9c27b0, #9c27b0, #9c27b0, #9c27b0, #a721aa, #b119a4, #ba119e, #cb0090, #d80081, #e20672, #e91e63)',\r\n          }}\r\n        >\r\n          <Toolbar>\r\n            <Grid container xs={12} justify='center'>\r\n              <Grid container xs={1} sm={5} md={4} justify='flex-start'>\r\n                <IconButton\r\n                  onClick={() => onToggle()}\r\n                  edge='start'\r\n                  color='inherit'\r\n                  aria-label='menu'\r\n                >\r\n                  <Menu />\r\n                </IconButton>\r\n              </Grid>\r\n              <Grid container xs={11} sm={5} md={4} justify='flex-end'>\r\n                <Typography style={{ paddingTop: 8 }} variant='h6'>\r\n                  {state.title}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Toolbar>\r\n\r\n          <LinearProgress hidden={!state.isLoading} />\r\n        </AppBar>\r\n      </HideOnScroll>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Nav\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyForm\\index.tsx",["422","423"],"import React, { useContext, memo } from 'react'\r\nimport Joi from 'joi'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport Select from '@material-ui/core/Select'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Button from '@material-ui/core/Button'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Radio from '@material-ui/core/Radio'\r\nimport DateFnsUtils from '@date-io/date-fns/build'\r\nimport FormHelperText from '@material-ui/core/FormHelperText'\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput'\r\nimport InputAdornment from '@material-ui/core/InputAdornment'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff'\r\nimport Visibility from '@material-ui/icons/Visibility'\r\nimport {\r\n  KeyboardDatePicker,\r\n  MuiPickersUtilsProvider,\r\n} from '@material-ui/pickers'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport { DateRange } from '@material-ui/icons'\r\n\r\nexport interface MyFormProps<T> {\r\n  state: [T, React.Dispatch<React.SetStateAction<T>>]\r\n  onSubmit: (data: T) => Promise<any>\r\n  validator?: {}\r\n  radioButtonDefaultValue?: string\r\n  children?: (props: RenderProps) => JSX.Element\r\n}\r\n\r\nexport interface InputProps {\r\n  value?: any\r\n  name: string\r\n  placeholder?: string\r\n  type?: string | 'text'\r\n  label?: string\r\n  isMultiline?: boolean\r\n  onChange?: (e: React.FormEvent) => void\r\n  onTogglePassword?: React.Dispatch<React.SetStateAction<boolean>>\r\n}\r\n\r\nexport interface OptionProps {\r\n  name?: string\r\n  value: any\r\n}\r\n\r\nexport interface SelectProps extends InputProps {\r\n  options: OptionProps[]\r\n  labelWidth?: number\r\n}\r\n\r\nexport interface RenderProps {\r\n  myInput: (input: InputProps) => JSX.Element\r\n  myInputPassword: (input: InputProps) => JSX.Element\r\n  myDateTimePicker: (input: InputProps) => JSX.Element\r\n  myButton: (text?: string) => JSX.Element\r\n  mySelect: (select: SelectProps) => JSX.Element\r\n  myRadio: (input: InputProps) => JSX.Element\r\n  myControlledInput: (input: InputProps) => JSX.Element\r\n  MyButtonMemo: React.MemoExoticComponent<\r\n    (props: { text?: string }) => JSX.Element\r\n  >\r\n}\r\n\r\nconst MyButtonMemo = (isDisable: boolean) =>\r\n  memo((props: { text?: string }) => {\r\n    console.log('hit memo')\r\n    return (\r\n      <Grid item xs={12}>\r\n        <Button\r\n          disabled={isDisable}\r\n          style={{ paddingTop: 15, paddingBottom: 15 }}\r\n          fullWidth\r\n          type='submit'\r\n          variant='contained'\r\n          color='primary'\r\n          startIcon={\r\n            isDisable && (\r\n              <CircularProgress\r\n                color='primary'\r\n                size={24}\r\n                style={{\r\n                  position: 'absolute',\r\n                  top: '50%',\r\n                  left: '50%',\r\n                  marginTop: -12,\r\n                  marginLeft: -12,\r\n                }}\r\n              />\r\n            )\r\n          }\r\n        >\r\n          {props.text ?? 'SUBMIT'}\r\n        </Button>\r\n      </Grid>\r\n    )\r\n  })\r\n\r\nfunction MyForm<T>(props: MyFormProps<T>) {\r\n  const [state, dispatch] = useContext(GlobalContext)!\r\n\r\n  const [data, setData] = props.state\r\n\r\n  const [isDisable, setIsDisable] = React.useState<boolean>(false)\r\n\r\n  const [selectedValue, setSelectedValue] = React.useState(\r\n    props.radioButtonDefaultValue ?? '',\r\n  )\r\n\r\n  const [errors, setErrors] = React.useState<any>(null)\r\n\r\n  const onValidate = (_data: T) => {\r\n    const schema = Joi.object(props.validator).options({\r\n      abortEarly: false,\r\n      allowUnknown: true,\r\n    })\r\n\r\n    const { error } = schema.validate(_data)\r\n\r\n    if (!error) return null\r\n\r\n    console.log(error)\r\n\r\n    const _errors: any = {}\r\n\r\n    error.details.forEach((item) => (_errors[item.path[0]] = item.message))\r\n\r\n    return _errors\r\n  }\r\n\r\n  const onChangeRadio = (e: any) => {\r\n    setSelectedValue(e.target.value)\r\n  }\r\n\r\n  const onSubmit = (e: any) => {\r\n    e.preventDefault()\r\n\r\n    const newData = { ...data } as any\r\n\r\n    for (let [key, value] of new FormData(e.target).entries()) {\r\n      newData[key] = value\r\n    }\r\n    const hasErrors = onValidate(newData)\r\n\r\n    setIsDisable(true)\r\n\r\n    if (hasErrors) {\r\n      dispatch({\r\n        type: 'SET_ALERT',\r\n        payload: {\r\n          message: 'Fill out all the fields.',\r\n          type: 'error',\r\n        },\r\n      })\r\n      setErrors(hasErrors)\r\n      setIsDisable(false)\r\n      return\r\n    }\r\n\r\n    return props\r\n      .onSubmit(newData)\r\n      .then(() => {\r\n        setErrors({})\r\n        setIsDisable(false)\r\n      })\r\n      .catch((error) => {\r\n        setIsDisable(false)\r\n      })\r\n  }\r\n\r\n  const myInput = (input: InputProps) => {\r\n    const error = errors && errors[input.name]\r\n\r\n    return (\r\n      <Grid item xs={12} key={input.name}>\r\n        <TextField\r\n          defaultValue={input.value}\r\n          multiline={input.isMultiline}\r\n          fullWidth\r\n          name={input.name}\r\n          variant='outlined'\r\n          label={input.label}\r\n          type={input.type}\r\n          error={!!error}\r\n          helperText={error}\r\n        />\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  const myControlledInput = (input: InputProps) => {\r\n    const error = errors && errors[input.name]\r\n\r\n    return (\r\n      <Grid item xs={12} key={input.name}>\r\n        <TextField\r\n          value={input.value}\r\n          multiline={input.isMultiline}\r\n          fullWidth\r\n          name={input.name}\r\n          variant='outlined'\r\n          label={input.label}\r\n          type={input.type}\r\n          error={!!error}\r\n          helperText={error}\r\n          onChange={(e) =>\r\n            input.onChange\r\n              ? input.onChange(e)\r\n              : setData((data) => ({ ...data, [input.name]: e.target.value }))\r\n          }\r\n        />\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  const myInputPassword = (input: InputProps) => {\r\n    const error = errors && errors[input.name]\r\n\r\n    return (\r\n      <Grid item xs={12} key={input.name}>\r\n        <FormControl fullWidth variant='outlined' error={!!error}>\r\n          <InputLabel htmlFor={input.label}>{input.label}</InputLabel>\r\n          <OutlinedInput\r\n            defaultValue={input.value}\r\n            id={input.name}\r\n            name={input.name}\r\n            type={input.type}\r\n            labelWidth={70}\r\n            endAdornment={\r\n              <InputAdornment position='end'>\r\n                <IconButton\r\n                  aria-label='toggle password visibility'\r\n                  onClick={() =>\r\n                    input.onTogglePassword?.call(\r\n                      null,\r\n                      (isVisible) => !isVisible,\r\n                    )\r\n                  }\r\n                >\r\n                  {input.type !== 'password' ? (\r\n                    <Visibility />\r\n                  ) : (\r\n                    <VisibilityOff />\r\n                  )}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n          />\r\n          <FormHelperText>{error}</FormHelperText>\r\n        </FormControl>\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  const myDateTimePicker = (input: InputProps) => {\r\n    const error = errors && errors[input.name]\r\n\r\n    return (\r\n      <Grid item xs={12} key={input.name}>\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n          <KeyboardDatePicker\r\n            fullWidth\r\n            inputVariant='outlined'\r\n            disableToolbar\r\n            variant='dialog'\r\n            format='MM/dd/yyyy'\r\n            margin='none'\r\n            error={!!error}\r\n            helperText={error}\r\n            label={input.label}\r\n            value={input.value ?? null}\r\n            onChange={(date) => {\r\n              setData({\r\n                ...data,\r\n                [input.name]: date?.toLocaleDateString(),\r\n              })\r\n            }}\r\n            KeyboardButtonProps={{\r\n              'aria-label': 'change date',\r\n            }}\r\n          />\r\n        </MuiPickersUtilsProvider>\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  const myRadio = (input: InputProps) => {\r\n    return (\r\n      <Radio\r\n        checked={selectedValue === input.value}\r\n        onChange={onChangeRadio}\r\n        value={input.value}\r\n        name={input.name}\r\n      />\r\n    )\r\n  }\r\n\r\n  const mySelect = (select: SelectProps) => {\r\n    const error = errors && errors[select.name ?? select.value]\r\n    return (\r\n      <Grid item xs={12} key={select.name ?? select.value}>\r\n        <FormControl fullWidth variant='outlined' error={!!error}>\r\n          <InputLabel id={select.label}>{select.label}</InputLabel>\r\n          <Select\r\n            labelId={select.label}\r\n            id={select.name ?? select.value}\r\n            name={select.name ?? select.value}\r\n            value={select.value || ''}\r\n            onChange={(e: any) => {\r\n              const { value } = e.target\r\n              if (error && value !== 'clear') {\r\n                const _errors = { ...errors }\r\n                delete _errors[select.name]\r\n                setErrors(_errors)\r\n              }\r\n              setData({\r\n                ...data,\r\n                [select.name]: value !== 'clear' ? value : '',\r\n              })\r\n            }}\r\n            labelWidth={select.labelWidth ?? 60}\r\n          >\r\n            {select.options.map((option) => (\r\n              <MenuItem value={option.value}>\r\n                {option.name ?? option.value}\r\n              </MenuItem>\r\n            ))}\r\n            <Divider style={{ marginLeft: 15, marginRight: 15 }}></Divider>\r\n            <MenuItem value='clear'>Clear</MenuItem>\r\n          </Select>\r\n          <FormHelperText>{error}</FormHelperText>\r\n        </FormControl>\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  const myButton = (text?: string) => {\r\n    return (\r\n      <Grid item xs={12}>\r\n        <Button\r\n          disabled={isDisable}\r\n          fullWidth\r\n          type='submit'\r\n          variant='contained'\r\n          color='primary'\r\n          startIcon={\r\n            isDisable && (\r\n              <CircularProgress\r\n                color='primary'\r\n                size={24}\r\n                style={{\r\n                  position: 'absolute',\r\n                  top: '50%',\r\n                  left: '50%',\r\n                  marginTop: -12,\r\n                  marginLeft: -12,\r\n                }}\r\n              />\r\n            )\r\n          }\r\n        >\r\n          {text ?? 'SUBMIT'}\r\n        </Button>\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <Grid\r\n        style={{ pointerEvents: isDisable ? 'none' : 'all' }}\r\n        container\r\n        spacing={2}\r\n        direction='column'\r\n      >\r\n        {props.children?.({\r\n          myInput,\r\n          myControlledInput,\r\n          myInputPassword,\r\n          mySelect,\r\n          myDateTimePicker,\r\n          myButton,\r\n          myRadio,\r\n          MyButtonMemo: MyButtonMemo(isDisable),\r\n        } as RenderProps)}\r\n      </Grid>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default MyForm\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyStepper\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyDrawer\\index.tsx",["424","425"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyCard\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Dashboard\\index.tsx",["426","427"],"import { GlobalContext } from 'providers/GlobalProvider'\r\nimport React, { useContext, useEffect } from 'react'\r\n\r\nexport interface DashboardProps {}\r\n\r\nconst Dashboard: React.SFC<DashboardProps> = () => {\r\n  const [state, dispatch] = useContext(GlobalContext)!\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'SET_TITLE', payload: 'Dashboard' })\r\n  }, [])\r\n  return <h3>Under Construction</h3>\r\n}\r\n\r\nexport default Dashboard\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\EmployeeProvider.tsx",["428"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MySkeletonCards\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\utils\\http.ts",["429","430","431"],"import axios, { AxiosError } from 'axios'\nimport { apiUrlProd, apiUrlDev, apiUrlMobile } from 'configs/index.json'\nimport createAuthRefreshInterceptor from 'axios-auth-refresh'\n\n//intercept requests\naxios.interceptors.request.use((config) => {\n  config.baseURL =\n    process.env.NODE_ENV === 'development' ? apiUrlDev : apiUrlProd\n\n  // config.withCredentials = true\n  return config\n})\n\naxios.interceptors.response.use(\n  (response) => response,\n  (error: AxiosError) => {\n    if (error.message === 'Network Error') {\n      throw Error(error.message)\n    }\n\n    throw error\n  },\n)\n\n// createAuthRefreshInterceptor(\n//   axios,\n//   (failedRequest) => {\n//     return axios.get('/auth/refresh-token').then(({ data }) => {\n//       return Promise.resolve()\n//     })\n//   },\n//   {\n//     statusCodes: [403],\n//     pauseInstanceWhileRefreshing: true,\n//   },\n// )\n\nexport default {\n  get: axios.get,\n  post: axios.post,\n  put: axios.put,\n  delete: axios.delete,\n  axios: axios.create(),\n}\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MySkeletonCard\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Auth\\SignIn\\index.tsx",["432","433"],"import Grid from '@material-ui/core/Grid'\r\nimport MyForm, { MyFormProps } from 'components/common/MyForm'\r\nimport User from 'models/user'\r\nimport { onSignIn } from 'api/authService'\r\nimport validator from 'validators/signInValidator'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\r\n\r\nimport { useContext, useEffect, useState } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\n\r\nexport interface SignInProps {}\r\n\r\nconst SignIn: React.SFC<SignInProps> = () => {\r\n  const styles = useStyles()\r\n\r\n  const [state, dispatch] = useContext(GlobalContext)!\r\n\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'SET_TITLE', payload: 'BRAND NAME' })\r\n  }, [])\r\n\r\n  const [user, setUser] = useState<User>({ username: '', password: '' })\r\n\r\n  const onSubmit = async () => {\r\n    return onSignIn().then((res) => {\r\n      dispatch({ type: 'SET_IS_AUTHENTIC_USER', payload: true })\r\n      history.replace('/dashboard')\r\n    })\r\n  }\r\n  const formProps: MyFormProps<User> = {\r\n    state: [user, setUser],\r\n    onSubmit,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <Grid\r\n      style={{ minHeight: 450 }}\r\n      justify='space-between'\r\n      container\r\n      direction='column'\r\n      xs={12}\r\n    >\r\n      <Grid\r\n        style={{ paddingTop: 80 }}\r\n        direction='row'\r\n        container\r\n        justify='center'\r\n        alignItems='flex-start'\r\n      >\r\n        <h1>Logo</h1>\r\n      </Grid>\r\n\r\n      <div className={styles.formContainer}>\r\n        <MyForm {...formProps}>\r\n          {({ myInput, myButton }) => (\r\n            <>\r\n              {myInput({\r\n                label: 'Username',\r\n                value: user.username,\r\n                name: 'username',\r\n              })}\r\n              {myInput({\r\n                label: 'Password',\r\n                value: user.password,\r\n                name: 'password',\r\n                type: 'password',\r\n              })}\r\n              {myButton('LOGIN')}\r\n            </>\r\n          )}\r\n        </MyForm>\r\n      </div>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    formContainer: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      justifyContent: 'flex-end',\r\n\r\n      paddingLeft: 20,\r\n      paddingRight: 20,\r\n    },\r\n  }),\r\n)\r\n\r\nexport default SignIn\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\signInValidator.tsx",["434"],"import Joi from 'joi'\r\nimport { notNull } from 'utils/helper'\r\n\r\nconst signInValidator = {\r\n  username: notNull('Username'),\r\n  password: notNull('Password'),\r\n}\r\n\r\nexport default signInValidator\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyAuthRoute\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\Transaction\\index.tsx",["435","436","437"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyMiniCards\\index.tsx",["438","439"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\Transaction\\TransactionForm.tsx",["440","441","442"],"import React, { useEffect } from 'react'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport MyForm, { MyFormProps, RenderProps } from 'components/common/MyForm'\r\nimport Client from 'models/client'\r\nimport Commissioner from 'models/commissioner'\r\nimport validator from 'validators/clientTransactionValidator'\r\nimport Transaction from 'models/transaction'\r\nimport Employee from 'models/employee'\r\n\r\nexport interface ClientStepTwoProps {\r\n  onSubmit: (transaction: Transaction) => Promise<void>\r\n  state: [\r\n    Transaction,\r\n    React.Dispatch<React.SetStateAction<Transaction & Client>>,\r\n  ]\r\n  employees: Employee[]\r\n}\r\n\r\nexport const CommissionersForm: React.SFC<ClientStepTwoProps> = ({\r\n  state: [transaction, setTransaction],\r\n  onSubmit,\r\n  employees,\r\n}) => {\r\n  const formProps: MyFormProps<Transaction> = {\r\n    state: [transaction, setTransaction],\r\n    onSubmit,\r\n    validator,\r\n    radioButtonDefaultValue: transaction.position,\r\n  }\r\n\r\n  const employeeOptions = (id: number) =>\r\n    employees\r\n      .filter((employee) => employee.position?.id === id)\r\n      .map((employee) => ({\r\n        value: employee.id,\r\n        name: `${employee.profile?.lastname}, ${employee.profile?.firstname}`,\r\n      }))\r\n\r\n  const labelMode =\r\n    transaction.payment_mode !== 'Installment'\r\n      ? transaction.payment_mode === 'Fullpayment'\r\n        ? 'Balance'\r\n        : 'Amount'\r\n      : 'Amount'\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myRadio, mySelect, myButton, myControlledInput, myInput }) => (\r\n        <>\r\n          <Grid\r\n            style={{ paddingLeft: 10, marginTop: 5, marginBottom: 10 }}\r\n            spacing={2}\r\n            container\r\n            xs={12}\r\n          >\r\n            {mySelect({\r\n              label: 'Payment Mode',\r\n              value: transaction.payment_mode,\r\n              name: 'payment_mode',\r\n              labelWidth: 110,\r\n              options: [{ value: 'Installment' }, { value: 'Fullpayment' }],\r\n            })}\r\n            {myControlledInput({\r\n              label: labelMode,\r\n              value: transaction.amount,\r\n              name: 'amount',\r\n            })}\r\n            {myInput({\r\n              label: 'OR Number',\r\n              value: transaction.or_number,\r\n              name: 'or_number',\r\n            })}\r\n\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Branch Manager',\r\n                  value: transaction.branch_manager,\r\n                  name: 'branch_manager',\r\n                  labelWidth: 120,\r\n                  options: employeeOptions(1),\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'branch_manager', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Agency Manager',\r\n                  value: transaction.agency_manager,\r\n                  name: 'agency_manager',\r\n                  labelWidth: 120,\r\n                  options: employeeOptions(2),\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'agency_manager', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Supervisor',\r\n                  value: transaction.supervisor,\r\n                  name: 'supervisor',\r\n                  labelWidth: 80,\r\n                  options: employeeOptions(3),\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'supervisor', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Sales Agent',\r\n                  value: transaction.sales_agent,\r\n                  name: 'sales_agent',\r\n                  labelWidth: 85,\r\n                  options: employeeOptions(4),\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'sales_agent', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n\r\n            {myButton()}\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\n\r\nexport default CommissionersForm\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\clientTransactionValidator.tsx",["443"],"import Joi from 'joi'\r\nimport { lettersOnly, notNull } from 'utils/helper'\r\n\r\nconst clientTransactionValidator = {\r\n  branch_manager: notNull('Branch Manager'),\r\n  agency_manager: notNull('Agency Manager'),\r\n  supervisor: notNull('Supervisor'),\r\n  position: notNull('Position'),\r\n  amount: Joi.number().positive().not(0).required().label('Amount'),\r\n  payment_mode: notNull('Payment Mode'),\r\n  or_number: notNull('OR Number'),\r\n}\r\n\r\nexport default clientTransactionValidator\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Settings\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MySkeletonMiniCards\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyChips\\index.tsx",["444"],"import { useState } from 'react'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Chip from '@material-ui/core/Chip'\r\nimport Badge from '@material-ui/core/Badge'\r\n\r\nexport interface MyChipsProps {\r\n  chips: MyChip[]\r\n  onChipSelected?: (chip: MyChip) => void\r\n  active: MyChip\r\n  count?: number\r\n}\r\n\r\nexport interface MyChip {\r\n  value: any\r\n  name: string\r\n}\r\n\r\nconst MyChips: React.SFC<MyChipsProps> = ({\r\n  chips,\r\n  active,\r\n  onChipSelected,\r\n  count,\r\n}) => {\r\n  const renderChips = (chip: MyChip) => {\r\n    return (\r\n      <Grid item>\r\n        <Badge\r\n          invisible={active.value !== chip.value}\r\n          badgeContent={count! >= 100 ? '99+' : count}\r\n          color='primary'\r\n        >\r\n          <Chip\r\n            onClick={() => onChipSelected?.(chip)}\r\n            color={active.value === chip.value ? 'secondary' : 'default'}\r\n            variant={active.value === chip.value ? 'default' : 'outlined'}\r\n            size='medium'\r\n            label={chip.name}\r\n          />\r\n        </Badge>\r\n      </Grid>\r\n    )\r\n  }\r\n  return (\r\n    <>\r\n      <Grid\r\n        style={{\r\n          marginLeft: 0,\r\n          padding: 0,\r\n          marginBottom: 10,\r\n          paddingBottom: 0,\r\n          paddingTop: 10,\r\n          WebkitOverflowScrolling: 'touch',\r\n          overflowX: 'auto',\r\n          flexWrap: 'nowrap',\r\n        }}\r\n        container\r\n        xs={12}\r\n        justify='flex-start'\r\n        direction='row'\r\n        spacing={1}\r\n        alignItems='center'\r\n      >\r\n        {chips.map((chip) => (\r\n          <>{renderChips(chip)}</>\r\n        ))}\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MyChips\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Clients\\EditClient\\index.tsx",["445","446","447"],"import { useHistory, useParams } from 'react-router-dom'\r\nimport { useContext, useEffect, useState } from 'react'\r\nimport MyForm, { MyFormProps } from 'components/common/MyForm'\r\nimport validator from 'validators/saveProfileValidator'\r\nimport Profile from 'models/profile'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Button from '@material-ui/core/Button'\r\nimport { ClientContext } from 'providers/ClientProvider'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { postImage } from 'services/imageService'\r\nimport { updateClient } from 'services/clientService'\r\n\r\nexport interface EditClientProps {}\r\n\r\nconst EditClient: React.SFC<EditClientProps> = () => {\r\n  const history = useHistory()\r\n  const params = useParams<{ id: string }>()\r\n\r\n  const [_, globalDispatch] = useContext(GlobalContext)!\r\n\r\n  const [clientState, clientDispatch] = useContext(ClientContext)!\r\n\r\n  const [imageFile, setImageFile] = useState<HTMLImageElement | null>(null)\r\n\r\n  const [profile, setProfile] = useState<Profile>({\r\n    firstname: '',\r\n    middlename: '',\r\n    lastname: '',\r\n    address: '',\r\n    contact: '',\r\n  })\r\n\r\n  useEffect(() => {\r\n    globalDispatch({ type: 'SET_TITLE', payload: 'Edit Client Profile' })\r\n    const profile = clientState.clients.filter(\r\n      (client) => client.id === +params.id,\r\n    )[0]\r\n    setProfile(profile)\r\n  }, [])\r\n\r\n  const onSubmit = async (profile: Profile) => {\r\n    return postImage(profile?.image!, (image_url: string) => {\r\n      delete profile.image\r\n\r\n      return updateClient({\r\n        ...profile,\r\n        image_url: !!image_url ? image_url : profile.image_url,\r\n      })\r\n        .then(() => {\r\n          globalDispatch({\r\n            type: 'SET_ALERT',\r\n            payload: { message: 'Successfully added', type: 'success' },\r\n          })\r\n          globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.status === 400) {\r\n            globalDispatch({\r\n              type: 'SET_ALERT',\r\n              payload: { message: error.response.data.error, type: 'error' },\r\n            })\r\n          }\r\n          globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n        })\r\n    })\r\n  }\r\n\r\n  const formProps: MyFormProps<Profile> = {\r\n    state: [profile, setProfile],\r\n    onSubmit,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myControlledInput, mySelect, myDateTimePicker, myButton }) => (\r\n        <>\r\n          {myControlledInput({\r\n            label: 'Firstname',\r\n            value: profile.firstname,\r\n            name: 'firstname',\r\n          })}\r\n          {myControlledInput({\r\n            label: 'Middlename',\r\n            value: profile.middlename,\r\n            name: 'middlename',\r\n          })}\r\n          {myControlledInput({\r\n            label: 'Lastname',\r\n            value: profile.lastname,\r\n            name: 'lastname',\r\n          })}\r\n          {myControlledInput({\r\n            label: 'Contact Number',\r\n            value: profile.contact,\r\n            name: 'contact',\r\n          })}\r\n\r\n          {myControlledInput({\r\n            label: 'Address',\r\n            value: profile.address,\r\n            name: 'address',\r\n            isMultiline: true,\r\n          })}\r\n          {mySelect({\r\n            label: 'Gender',\r\n            value: profile.gender,\r\n            name: 'gender',\r\n            options: [\r\n              { value: 'Male' },\r\n              { value: 'Female' },\r\n              { value: 'Other' },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Civil Status',\r\n            value: profile.civil,\r\n            name: 'civil',\r\n            labelWidth: 80,\r\n            options: [\r\n              { value: 'Single' },\r\n              { value: 'Married' },\r\n              { value: 'Widowed' },\r\n            ],\r\n          })}\r\n\r\n          {myDateTimePicker({\r\n            label: 'Birthdate',\r\n            value: profile.birthdate,\r\n            name: 'birthdate',\r\n          })}\r\n\r\n          <Grid\r\n            container\r\n            style={{\r\n              paddingLeft: 15,\r\n              paddingRight: 15,\r\n              marginBottom: 10,\r\n            }}\r\n            alignItems='center'\r\n            justify='space-between'\r\n            xs={12}\r\n          >\r\n            <Typography variant='subtitle1'>\r\n              {imageFile?.name || 'Select Photo'}\r\n            </Typography>\r\n            <>\r\n              <input\r\n                accept='image/*'\r\n                style={{\r\n                  display: 'none',\r\n                }}\r\n                name='image'\r\n                id='icon-button-file'\r\n                type='file'\r\n                onChange={(e: any) => {\r\n                  setImageFile(e.target.files[0])\r\n                }}\r\n              />\r\n              <label htmlFor='icon-button-file'>\r\n                <IconButton\r\n                  color='primary'\r\n                  aria-label='upload picture'\r\n                  component='span'\r\n                >\r\n                  <PhotoCamera />\r\n                </IconButton>\r\n              </label>\r\n            </>\r\n          </Grid>\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 10, paddingBottom: 5 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.goBack()}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton()}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\n\r\nexport default EditClient\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Payments\\index.tsx",["448","449"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\PaymentProvider.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Payments\\PaymentCard\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\GlobalProvider.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\ClientProvider.tsx",["450"],"import { createContext, Dispatch, useEffect, useReducer } from 'react'\r\nimport { produce } from 'immer'\r\nimport Client from 'models/client'\r\nimport Plan from 'models/plan'\r\nimport { plans } from 'services/clientService'\r\n\r\nexport const ClientContext = createContext<\r\n  [state: ClientState, dispatch: Dispatch<ClientAction>] | null\r\n>(null)\r\n\r\ninterface ClientState {\r\n  clients: Client[]\r\n  plans: Plan[]\r\n  isLoading: boolean\r\n  onReloadPlans: boolean\r\n  pages: number\r\n  total: number\r\n}\r\n\r\nexport type ClientAction =\r\n  | { type: 'TOGGLE_LOADING' | 'ON_RELOAD_PLANS' }\r\n  | {\r\n      type: 'ON_LOAD_CLIENTS'\r\n      payload: { clients: Client[]; total?: number; pages?: number }\r\n    }\r\n  | { type: 'ON_LOAD_CLIENTS_INSTALLMENT'; payload: Client[] }\r\n  | { type: 'ON_LOAD_PLANS'; payload: Plan[] }\r\n  | { type: 'SET_IS_LOADING'; payload: boolean }\r\n  | { type: 'SET_TOTAL'; payload: number }\r\n  | { type: 'SET_PAGES'; payload: number }\r\n\r\nconst reducer = (state: ClientState, action: ClientAction) => {\r\n  switch (action.type) {\r\n    case 'ON_LOAD_PLANS':\r\n      state.plans = action.payload\r\n      break\r\n    case 'ON_RELOAD_PLANS':\r\n      state.onReloadPlans = !state.onReloadPlans\r\n      break\r\n    case 'ON_LOAD_CLIENTS':\r\n      state.clients = action.payload.clients\r\n      state.total = action.payload.total!\r\n      state.pages = action.payload.pages!\r\n      state.isLoading = false\r\n      break\r\n    case 'ON_LOAD_CLIENTS_INSTALLMENT':\r\n      state.clients = action.payload.filter(\r\n        (client) => client.payment_mode === 'Installment',\r\n      )\r\n      state.isLoading = false\r\n      break\r\n    case 'SET_IS_LOADING':\r\n      state.isLoading = action.payload\r\n      break\r\n    case 'TOGGLE_LOADING':\r\n      state.isLoading = !state.isLoading\r\n      break\r\n    case 'SET_PAGES':\r\n      state.pages = action.payload\r\n      break\r\n    case 'SET_TOTAL':\r\n      state.total = action.payload\r\n      break\r\n    default:\r\n      return state\r\n  }\r\n  return state\r\n}\r\n\r\nexport const ClientProvider: React.FC = (props) => {\r\n  const [state, dispatch] = useReducer(produce(reducer), {\r\n    clients: [],\r\n    plans,\r\n    isLoading: false,\r\n    onReloadPlans: false,\r\n    pages: 0,\r\n    total: 0,\r\n  })\r\n\r\n  // useEffect(() => {\r\n  //   getPlans().then((plans) => {\r\n  //     dispatch({ type: 'ON_LOAD_PLANS', payload: plans })\r\n  //   })\r\n  // }, [state.onReloadPlans])\r\n\r\n  return (\r\n    <ClientContext.Provider value={[state, dispatch]}>\r\n      {props.children}\r\n    </ClientContext.Provider>\r\n  )\r\n}\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\services\\clientService.tsx",["451","452","453","454"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\services\\employeeService.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\services\\paymentService.tsx",["455"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\services\\authService.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Payments\\PaymentView\\index.tsx",["456","457","458","459"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\services\\imageService.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\common\\MyAlertDialog\\index.tsx",["460"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Branches\\index.tsx",["461","462"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\BranchProvider.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\services\\branchService.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Branches\\BranchCard\\index.tsx",["463","464","465"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Branches\\NewBranch\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\validators\\saveBranchValidator.tsx",["466","467"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\pages\\Branches\\EditBranch\\index.tsx",["468","469"],{"ruleId":"470","replacedBy":"471"},{"ruleId":"472","replacedBy":"473"},{"ruleId":"474","severity":1,"message":"475","line":18,"column":10,"nodeType":"476","messageId":"477","endLine":18,"endColumn":15},{"ruleId":"478","severity":1,"message":"479","line":22,"column":6,"nodeType":"480","endLine":22,"endColumn":8,"suggestions":"481"},{"ruleId":"470","replacedBy":"482"},{"ruleId":"472","replacedBy":"483"},{"ruleId":"474","severity":1,"message":"484","line":7,"column":31,"nodeType":"476","messageId":"477","endLine":7,"endColumn":41},{"ruleId":"474","severity":1,"message":"485","line":13,"column":10,"nodeType":"476","messageId":"477","endLine":13,"endColumn":11},{"ruleId":"474","severity":1,"message":"485","line":13,"column":10,"nodeType":"476","messageId":"477","endLine":13,"endColumn":11},{"ruleId":"474","severity":1,"message":"486","line":2,"column":8,"nodeType":"476","messageId":"477","endLine":2,"endColumn":14},{"ruleId":"474","severity":1,"message":"485","line":20,"column":10,"nodeType":"476","messageId":"477","endLine":20,"endColumn":11},{"ruleId":"478","severity":1,"message":"487","line":31,"column":6,"nodeType":"480","endLine":31,"endColumn":8,"suggestions":"488"},{"ruleId":"474","severity":1,"message":"489","line":12,"column":8,"nodeType":"476","messageId":"477","endLine":12,"endColumn":14},{"ruleId":"474","severity":1,"message":"490","line":13,"column":8,"nodeType":"476","messageId":"477","endLine":13,"endColumn":16},{"ruleId":"474","severity":1,"message":"485","line":27,"column":10,"nodeType":"476","messageId":"477","endLine":27,"endColumn":11},{"ruleId":"478","severity":1,"message":"491","line":36,"column":6,"nodeType":"480","endLine":36,"endColumn":8,"suggestions":"492"},{"ruleId":"474","severity":1,"message":"475","line":19,"column":10,"nodeType":"476","messageId":"477","endLine":19,"endColumn":15},{"ruleId":"478","severity":1,"message":"493","line":26,"column":6,"nodeType":"480","endLine":26,"endColumn":8,"suggestions":"494"},{"ruleId":"474","severity":1,"message":"495","line":1,"column":17,"nodeType":"476","messageId":"477","endLine":1,"endColumn":27},{"ruleId":"474","severity":1,"message":"496","line":4,"column":8,"nodeType":"476","messageId":"477","endLine":4,"endColumn":18},{"ruleId":"474","severity":1,"message":"486","line":6,"column":8,"nodeType":"476","messageId":"477","endLine":6,"endColumn":14},{"ruleId":"474","severity":1,"message":"497","line":8,"column":8,"nodeType":"476","messageId":"477","endLine":8,"endColumn":15},{"ruleId":"474","severity":1,"message":"498","line":1,"column":8,"nodeType":"476","messageId":"477","endLine":1,"endColumn":11},{"ruleId":"474","severity":1,"message":"499","line":2,"column":8,"nodeType":"476","messageId":"477","endLine":2,"endColumn":16},{"ruleId":"474","severity":1,"message":"498","line":1,"column":8,"nodeType":"476","messageId":"477","endLine":1,"endColumn":11},{"ruleId":"474","severity":1,"message":"500","line":7,"column":8,"nodeType":"476","messageId":"477","endLine":7,"endColumn":20},{"ruleId":"474","severity":1,"message":"501","line":2,"column":10,"nodeType":"476","messageId":"477","endLine":2,"endColumn":21},{"ruleId":"474","severity":1,"message":"501","line":2,"column":10,"nodeType":"476","messageId":"477","endLine":2,"endColumn":21},{"ruleId":"474","severity":1,"message":"502","line":8,"column":8,"nodeType":"476","messageId":"477","endLine":8,"endColumn":16},{"ruleId":"474","severity":1,"message":"485","line":23,"column":10,"nodeType":"476","messageId":"477","endLine":23,"endColumn":11},{"ruleId":"478","severity":1,"message":"479","line":27,"column":6,"nodeType":"480","endLine":27,"endColumn":8,"suggestions":"503"},{"ruleId":"474","severity":1,"message":"485","line":27,"column":10,"nodeType":"476","messageId":"477","endLine":27,"endColumn":11},{"ruleId":"478","severity":1,"message":"504","line":51,"column":6,"nodeType":"480","endLine":51,"endColumn":8,"suggestions":"505"},{"ruleId":"474","severity":1,"message":"506","line":10,"column":24,"nodeType":"476","messageId":"477","endLine":10,"endColumn":34},{"ruleId":"474","severity":1,"message":"507","line":29,"column":9,"nodeType":"476","messageId":"477","endLine":29,"endColumn":15},{"ruleId":"474","severity":1,"message":"485","line":31,"column":10,"nodeType":"476","messageId":"477","endLine":31,"endColumn":11},{"ruleId":"478","severity":1,"message":"508","line":45,"column":6,"nodeType":"480","endLine":45,"endColumn":8,"suggestions":"509"},{"ruleId":"474","severity":1,"message":"510","line":27,"column":10,"nodeType":"476","messageId":"477","endLine":27,"endColumn":21},{"ruleId":"478","severity":1,"message":"504","line":50,"column":6,"nodeType":"480","endLine":50,"endColumn":8,"suggestions":"511"},{"ruleId":"474","severity":1,"message":"512","line":8,"column":8,"nodeType":"476","messageId":"477","endLine":8,"endColumn":18},{"ruleId":"474","severity":1,"message":"490","line":11,"column":8,"nodeType":"476","messageId":"477","endLine":11,"endColumn":16},{"ruleId":"474","severity":1,"message":"513","line":15,"column":10,"nodeType":"476","messageId":"477","endLine":15,"endColumn":23},{"ruleId":"474","severity":1,"message":"514","line":17,"column":10,"nodeType":"476","messageId":"477","endLine":17,"endColumn":25},{"ruleId":"474","severity":1,"message":"515","line":22,"column":3,"nodeType":"476","messageId":"477","endLine":22,"endColumn":25},{"ruleId":"474","severity":1,"message":"506","line":26,"column":10,"nodeType":"476","messageId":"477","endLine":26,"endColumn":20},{"ruleId":"474","severity":1,"message":"485","line":35,"column":10,"nodeType":"476","messageId":"477","endLine":35,"endColumn":11},{"ruleId":"478","severity":1,"message":"516","line":48,"column":6,"nodeType":"480","endLine":48,"endColumn":8,"suggestions":"517"},{"ruleId":"474","severity":1,"message":"484","line":10,"column":31,"nodeType":"476","messageId":"477","endLine":10,"endColumn":41},{"ruleId":"474","severity":1,"message":"485","line":21,"column":10,"nodeType":"476","messageId":"477","endLine":21,"endColumn":11},{"ruleId":"474","severity":1,"message":"518","line":23,"column":25,"nodeType":"476","messageId":"477","endLine":23,"endColumn":41},{"ruleId":"478","severity":1,"message":"519","line":37,"column":6,"nodeType":"480","endLine":37,"endColumn":8,"suggestions":"520"},{"ruleId":"474","severity":1,"message":"485","line":21,"column":10,"nodeType":"476","messageId":"477","endLine":21,"endColumn":11},{"ruleId":"474","severity":1,"message":"518","line":23,"column":25,"nodeType":"476","messageId":"477","endLine":23,"endColumn":41},{"ruleId":"474","severity":1,"message":"521","line":31,"column":10,"nodeType":"476","messageId":"477","endLine":31,"endColumn":19},{"ruleId":"478","severity":1,"message":"522","line":53,"column":6,"nodeType":"480","endLine":53,"endColumn":8,"suggestions":"523"},{"ruleId":"474","severity":1,"message":"510","line":24,"column":10,"nodeType":"476","messageId":"477","endLine":24,"endColumn":21},{"ruleId":"478","severity":1,"message":"524","line":37,"column":6,"nodeType":"480","endLine":37,"endColumn":8,"suggestions":"525"},{"ruleId":"474","severity":1,"message":"495","line":1,"column":17,"nodeType":"476","messageId":"477","endLine":1,"endColumn":27},{"ruleId":"474","severity":1,"message":"526","line":1,"column":17,"nodeType":"476","messageId":"477","endLine":1,"endColumn":26},{"ruleId":"474","severity":1,"message":"527","line":1,"column":28,"nodeType":"476","messageId":"477","endLine":1,"endColumn":36},{"ruleId":"474","severity":1,"message":"496","line":4,"column":8,"nodeType":"476","messageId":"477","endLine":4,"endColumn":18},{"ruleId":"474","severity":1,"message":"486","line":6,"column":8,"nodeType":"476","messageId":"477","endLine":6,"endColumn":14},{"ruleId":"474","severity":1,"message":"497","line":8,"column":8,"nodeType":"476","messageId":"477","endLine":8,"endColumn":15},{"ruleId":"474","severity":1,"message":"528","line":10,"column":10,"nodeType":"476","messageId":"477","endLine":10,"endColumn":22},{"ruleId":"474","severity":1,"message":"496","line":4,"column":8,"nodeType":"476","messageId":"477","endLine":4,"endColumn":18},{"ruleId":"474","severity":1,"message":"500","line":7,"column":8,"nodeType":"476","messageId":"477","endLine":7,"endColumn":20},{"ruleId":"474","severity":1,"message":"529","line":27,"column":23,"nodeType":"476","messageId":"477","endLine":27,"endColumn":37},{"ruleId":"478","severity":1,"message":"530","line":40,"column":6,"nodeType":"480","endLine":40,"endColumn":63,"suggestions":"531"},{"ruleId":"474","severity":1,"message":"495","line":1,"column":17,"nodeType":"476","messageId":"477","endLine":1,"endColumn":27},{"ruleId":"474","severity":1,"message":"527","line":1,"column":29,"nodeType":"476","messageId":"477","endLine":1,"endColumn":37},{"ruleId":"474","severity":1,"message":"514","line":17,"column":10,"nodeType":"476","messageId":"477","endLine":17,"endColumn":25},{"ruleId":"474","severity":1,"message":"495","line":2,"column":10,"nodeType":"476","messageId":"477","endLine":2,"endColumn":20},{"ruleId":"474","severity":1,"message":"532","line":10,"column":10,"nodeType":"476","messageId":"477","endLine":10,"endColumn":24},{"ruleId":"474","severity":1,"message":"496","line":3,"column":8,"nodeType":"476","messageId":"477","endLine":3,"endColumn":18},{"ruleId":"474","severity":1,"message":"533","line":19,"column":9,"nodeType":"476","messageId":"477","endLine":19,"endColumn":16},{"ruleId":"474","severity":1,"message":"534","line":25,"column":10,"nodeType":"476","messageId":"477","endLine":25,"endColumn":19},{"ruleId":"474","severity":1,"message":"475","line":104,"column":10,"nodeType":"476","messageId":"477","endLine":104,"endColumn":15},{"ruleId":"474","severity":1,"message":"507","line":29,"column":9,"nodeType":"476","messageId":"477","endLine":29,"endColumn":15},{"ruleId":"474","severity":1,"message":"475","line":33,"column":10,"nodeType":"476","messageId":"477","endLine":33,"endColumn":15},{"ruleId":"474","severity":1,"message":"475","line":7,"column":10,"nodeType":"476","messageId":"477","endLine":7,"endColumn":15},{"ruleId":"478","severity":1,"message":"479","line":11,"column":6,"nodeType":"480","endLine":11,"endColumn":8,"suggestions":"535"},{"ruleId":"474","severity":1,"message":"526","line":1,"column":47,"nodeType":"476","messageId":"477","endLine":1,"endColumn":56},{"ruleId":"474","severity":1,"message":"536","line":2,"column":33,"nodeType":"476","messageId":"477","endLine":2,"endColumn":45},{"ruleId":"474","severity":1,"message":"537","line":3,"column":8,"nodeType":"476","messageId":"477","endLine":3,"endColumn":36},{"ruleId":"538","severity":1,"message":"539","line":38,"column":1,"nodeType":"540","endLine":44,"endColumn":2},{"ruleId":"474","severity":1,"message":"475","line":17,"column":10,"nodeType":"476","messageId":"477","endLine":17,"endColumn":15},{"ruleId":"478","severity":1,"message":"479","line":23,"column":6,"nodeType":"480","endLine":23,"endColumn":8,"suggestions":"541"},{"ruleId":"474","severity":1,"message":"498","line":1,"column":8,"nodeType":"476","messageId":"477","endLine":1,"endColumn":11},{"ruleId":"474","severity":1,"message":"510","line":31,"column":10,"nodeType":"476","messageId":"477","endLine":31,"endColumn":21},{"ruleId":"478","severity":1,"message":"487","line":53,"column":6,"nodeType":"480","endLine":53,"endColumn":8,"suggestions":"542"},{"ruleId":"478","severity":1,"message":"543","line":87,"column":6,"nodeType":"480","endLine":87,"endColumn":48,"suggestions":"544"},{"ruleId":"474","severity":1,"message":"496","line":5,"column":8,"nodeType":"476","messageId":"477","endLine":5,"endColumn":18},{"ruleId":"474","severity":1,"message":"485","line":35,"column":17,"nodeType":"476","messageId":"477","endLine":35,"endColumn":18},{"ruleId":"474","severity":1,"message":"526","line":1,"column":17,"nodeType":"476","messageId":"477","endLine":1,"endColumn":26},{"ruleId":"474","severity":1,"message":"545","line":3,"column":31,"nodeType":"476","messageId":"477","endLine":3,"endColumn":42},{"ruleId":"474","severity":1,"message":"500","line":5,"column":8,"nodeType":"476","messageId":"477","endLine":5,"endColumn":20},{"ruleId":"474","severity":1,"message":"501","line":2,"column":10,"nodeType":"476","messageId":"477","endLine":2,"endColumn":21},{"ruleId":"474","severity":1,"message":"527","line":1,"column":10,"nodeType":"476","messageId":"477","endLine":1,"endColumn":18},{"ruleId":"474","severity":1,"message":"485","line":22,"column":10,"nodeType":"476","messageId":"477","endLine":22,"endColumn":11},{"ruleId":"474","severity":1,"message":"529","line":24,"column":23,"nodeType":"476","messageId":"477","endLine":24,"endColumn":37},{"ruleId":"478","severity":1,"message":"546","line":42,"column":6,"nodeType":"480","endLine":42,"endColumn":8,"suggestions":"547"},{"ruleId":"474","severity":1,"message":"485","line":16,"column":10,"nodeType":"476","messageId":"477","endLine":16,"endColumn":11},{"ruleId":"478","severity":1,"message":"504","line":37,"column":6,"nodeType":"480","endLine":37,"endColumn":8,"suggestions":"548"},{"ruleId":"474","severity":1,"message":"526","line":1,"column":35,"nodeType":"476","messageId":"477","endLine":1,"endColumn":44},{"ruleId":"474","severity":1,"message":"549","line":1,"column":8,"nodeType":"476","messageId":"477","endLine":1,"endColumn":14},{"ruleId":"474","severity":1,"message":"500","line":3,"column":8,"nodeType":"476","messageId":"477","endLine":3,"endColumn":20},{"ruleId":"474","severity":1,"message":"550","line":4,"column":8,"nodeType":"476","messageId":"477","endLine":4,"endColumn":15},{"ruleId":"551","severity":1,"message":"552","line":123,"column":7,"nodeType":"553","messageId":"554","endLine":123,"endColumn":12},{"ruleId":"474","severity":1,"message":"550","line":1,"column":8,"nodeType":"476","messageId":"477","endLine":1,"endColumn":15},{"ruleId":"474","severity":1,"message":"555","line":10,"column":22,"nodeType":"476","messageId":"477","endLine":10,"endColumn":33},{"ruleId":"474","severity":1,"message":"556","line":11,"column":10,"nodeType":"476","messageId":"477","endLine":11,"endColumn":24},{"ruleId":"474","severity":1,"message":"510","line":24,"column":10,"nodeType":"476","messageId":"477","endLine":24,"endColumn":21},{"ruleId":"478","severity":1,"message":"557","line":29,"column":6,"nodeType":"480","endLine":29,"endColumn":8,"suggestions":"558"},{"ruleId":"474","severity":1,"message":"559","line":8,"column":10,"nodeType":"476","messageId":"477","endLine":8,"endColumn":36},{"ruleId":"474","severity":1,"message":"510","line":19,"column":10,"nodeType":"476","messageId":"477","endLine":19,"endColumn":21},{"ruleId":"478","severity":1,"message":"560","line":26,"column":6,"nodeType":"480","endLine":26,"endColumn":8,"suggestions":"561"},{"ruleId":"474","severity":1,"message":"562","line":3,"column":8,"nodeType":"476","messageId":"477","endLine":3,"endColumn":14},{"ruleId":"474","severity":1,"message":"563","line":6,"column":8,"nodeType":"476","messageId":"477","endLine":6,"endColumn":12},{"ruleId":"474","severity":1,"message":"564","line":12,"column":8,"nodeType":"476","messageId":"477","endLine":12,"endColumn":16},{"ruleId":"474","severity":1,"message":"501","line":2,"column":10,"nodeType":"476","messageId":"477","endLine":2,"endColumn":21},{"ruleId":"474","severity":1,"message":"565","line":2,"column":23,"nodeType":"476","messageId":"477","endLine":2,"endColumn":30},{"ruleId":"474","severity":1,"message":"566","line":8,"column":21,"nodeType":"476","messageId":"477","endLine":8,"endColumn":31},{"ruleId":"478","severity":1,"message":"567","line":25,"column":6,"nodeType":"480","endLine":25,"endColumn":8,"suggestions":"568"},"no-native-reassign",["569"],"no-negated-in-lhs",["570"],"@typescript-eslint/no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["571"],["569"],["570"],"'InputProps' is defined but never used.","'_' is assigned a value but never used.","'Client' is defined but never used.","React Hook useEffect has missing dependencies: 'clientDispatch' and 'globalDispatch'. Either include them or remove the dependency array.",["572"],"'Avatar' is defined but never used.","'userIcon' is defined but never used.","React Hook useEffect has missing dependencies: 'clientState.clients', 'globalDispatch', and 'id'. Either include them or remove the dependency array.",["573"],"React Hook useEffect has missing dependencies: 'dispatch' and 'scroll'. Either include them or remove the dependency array.",["574"],"'useContext' is defined but never used.","'Typography' is defined but never used.","'Divider' is defined but never used.","'Joi' is defined but never used.","'Employee' is defined but never used.","'Commissioner' is defined but never used.","'lettersOnly' is defined but never used.","'EditIcon' is defined but never used.",["575"],"React Hook useEffect has missing dependencies: 'globalDispatch', 'location.search', and 'onLoad'. Either include them or remove the dependency array.",["576"],"'capitalize' is defined but never used.","'styles' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'params.id'. Either include them or remove the dependency array.",["577"],"'globalState' is assigned a value but never used.",["578"],"'IconButton' is defined but never used.","'ClientContext' is defined but never used.","'EmployeeContext' is defined but never used.","'computeTotalCountToPay' is defined but never used.","React Hook useEffect has missing dependencies: 'globalDispatch' and 'id'. Either include them or remove the dependency array.",["579"],"'employeeDispatch' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'branchDispatch' and 'globalDispatch'. Either include them or remove the dependency array.",["580"],"'isLoading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'branchDispatch', 'globalDispatch', and 'params.id'. Either include them or remove the dependency array.",["581"],"React Hook useEffect has missing dependencies: 'globalDispatch' and 'scroll'. Either include them or remove the dependency array.",["582"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'getEmployees' is defined but never used.","'clientDispatch' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clientState.plans' and 'setClient'. Either include them or remove the dependency array. If 'setClient' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["583"],"'AnyCnameRecord' is defined but never used.","'history' is assigned a value but never used.","'DateRange' is defined but never used.",["584"],"'apiUrlMobile' is defined but never used.","'createAuthRefreshInterceptor' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["585"],["586"],"React Hook useEffect has a missing dependency: 'transaction'. Either include it or remove the dependency array.",["587"],"'RenderProps' is defined but never used.","React Hook useEffect has missing dependencies: 'clientState.clients', 'globalDispatch', and 'params.id'. Either include them or remove the dependency array.",["588"],["589"],"'Branch' is defined but never used.","'Payment' is defined but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'getPayments' is defined but never used.","'PaymentContext' is defined but never used.","React Hook useEffect has missing dependencies: 'globalDispatch' and 'params.id'. Either include them or remove the dependency array.",["590"],"'ToggleCheckBoxOutlineBlank' is defined but never used.","React Hook useEffect has missing dependencies: 'globalDispatch' and 'onLoad'. Either include them or remove the dependency array.",["591"],"'Button' is defined but never used.","'Chip' is defined but never used.","'ViewIcon' is defined but never used.","'notNull' is defined but never used.","'saveBranch' is defined but never used.","React Hook useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.",["592"],"no-global-assign","no-unsafe-negation",{"desc":"593","fix":"594"},{"desc":"595","fix":"596"},{"desc":"597","fix":"598"},{"desc":"599","fix":"600"},{"desc":"593","fix":"601"},{"desc":"602","fix":"603"},{"desc":"604","fix":"605"},{"desc":"602","fix":"606"},{"desc":"607","fix":"608"},{"desc":"609","fix":"610"},{"desc":"611","fix":"612"},{"desc":"613","fix":"614"},{"desc":"615","fix":"616"},{"desc":"593","fix":"617"},{"desc":"593","fix":"618"},{"desc":"595","fix":"619"},{"desc":"620","fix":"621"},{"desc":"622","fix":"623"},{"desc":"602","fix":"624"},{"desc":"625","fix":"626"},{"desc":"627","fix":"628"},{"desc":"629","fix":"630"},"Update the dependencies array to be: [dispatch]",{"range":"631","text":"632"},"Update the dependencies array to be: [clientDispatch, globalDispatch]",{"range":"633","text":"634"},"Update the dependencies array to be: [clientState.clients, globalDispatch, id]",{"range":"635","text":"636"},"Update the dependencies array to be: [dispatch, scroll]",{"range":"637","text":"638"},{"range":"639","text":"632"},"Update the dependencies array to be: [globalDispatch, location.search, onLoad]",{"range":"640","text":"641"},"Update the dependencies array to be: [dispatch, params.id]",{"range":"642","text":"643"},{"range":"644","text":"641"},"Update the dependencies array to be: [globalDispatch, id]",{"range":"645","text":"646"},"Update the dependencies array to be: [branchDispatch, globalDispatch]",{"range":"647","text":"648"},"Update the dependencies array to be: [branchDispatch, globalDispatch, params.id]",{"range":"649","text":"650"},"Update the dependencies array to be: [globalDispatch, scroll]",{"range":"651","text":"652"},"Update the dependencies array to be: [client.payment_mode, client.payment_period, client.plan, clientState.plans, setClient]",{"range":"653","text":"654"},{"range":"655","text":"632"},{"range":"656","text":"632"},{"range":"657","text":"634"},"Update the dependencies array to be: [transaction.payment_mode, transaction.id, transaction]",{"range":"658","text":"659"},"Update the dependencies array to be: [clientState.clients, globalDispatch, params.id]",{"range":"660","text":"661"},{"range":"662","text":"641"},"Update the dependencies array to be: [globalDispatch, params.id]",{"range":"663","text":"664"},"Update the dependencies array to be: [globalDispatch, onLoad]",{"range":"665","text":"666"},"Update the dependencies array to be: [params.id]",{"range":"667","text":"668"},[757,759],"[dispatch]",[1141,1143],"[clientDispatch, globalDispatch]",[1358,1360],"[clientState.clients, globalDispatch, id]",[1007,1009],"[dispatch, scroll]",[1005,1007],[1865,1867],"[globalDispatch, location.search, onLoad]",[1811,1813],"[dispatch, params.id]",[1738,1740],[1658,1660],"[globalDispatch, id]",[1501,1503],"[branchDispatch, globalDispatch]",[1935,1937],"[branchDispatch, globalDispatch, params.id]",[1476,1478],"[globalDispatch, scroll]",[1386,1443],"[client.payment_mode, client.payment_period, client.plan, clientState.plans, setClient]",[334,336],[755,757],[1837,1839],[2809,2851],"[transaction.payment_mode, transaction.id, transaction]",[1527,1529],"[clientState.clients, globalDispatch, params.id]",[1284,1286],[1252,1254],"[globalDispatch, params.id]",[1014,1016],"[globalDispatch, onLoad]",[802,804],"[params.id]"]