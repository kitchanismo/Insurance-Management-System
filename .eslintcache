[{"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\index.tsx":"1","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\App.tsx":"2","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\index.tsx":"3","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Layout\\index.tsx":"4","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyNav\\index.tsx":"5","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyAlert\\index.tsx":"6","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Layout\\Layout.tsx":"7","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyNav\\MyNav.tsx":"8","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyAlert\\MyAlert.tsx":"9","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyDrawer\\index.tsx":"10","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Dashboard\\index.tsx":"11","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyDrawer\\MyDrawer.tsx":"12","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Dashboard\\Dashboard.tsx":"13","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyCard\\index.tsx":"14","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\utils\\helper.ts":"15","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyForm\\index.tsx":"16","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyCard\\MyCard.tsx":"17","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyForm\\MyForm.tsx":"18","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\ViewEmployee\\index.ts":"19","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\index.tsx":"20","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\NewEmployee\\index.tsx":"21","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\EditEmployee\\index.tsx":"22","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\ViewEmployee\\ViewEmployee.tsx":"23","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\Employees.tsx":"24","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\NewEmployee\\NewEmployee.tsx":"25","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\validator.tsx":"26","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\EmployeeCard\\index.tsx":"27","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\EmployeeCard\\EmployeeCard.tsx":"28","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\EditEmployee\\EditEmployee.tsx":"29","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\GlobalProvider.tsx":"30","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\contexts\\globalContext.tsx":"31","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\hooks\\useGlobalState.tsx":"32","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\clients\\index.tsx":"33","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\clients\\Clients.tsx":"34","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MySearchField\\index.tsx":"35","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MySearchField\\MySearchField.tsx":"36","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\index.tsx":"37","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\Clients.tsx":"38","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\ClientCard\\index.tsx":"39","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\ClientCard\\ClientCard.tsx":"40","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyAvatar\\MyAvatar.tsx":"41","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyAvatar\\index.tsx":"42"},{"size":346,"mtime":1611444149721,"results":"43","hashOfConfig":"44"},{"size":382,"mtime":1611244726267,"results":"45","hashOfConfig":"44"},{"size":34,"mtime":1611444179233,"results":"46","hashOfConfig":"44"},{"size":26,"mtime":1611243048475,"results":"47","hashOfConfig":"44"},{"size":25,"mtime":1611243034734,"results":"48","hashOfConfig":"44"},{"size":27,"mtime":1611243005833,"results":"49","hashOfConfig":"44"},{"size":1473,"mtime":1611588165545,"results":"50","hashOfConfig":"44"},{"size":2255,"mtime":1611586819884,"results":"51","hashOfConfig":"44"},{"size":793,"mtime":1611444297309,"results":"52","hashOfConfig":"44"},{"size":28,"mtime":1611243022211,"results":"53","hashOfConfig":"44"},{"size":29,"mtime":1611242987395,"results":"54","hashOfConfig":"44"},{"size":2955,"mtime":1611586932195,"results":"55","hashOfConfig":"44"},{"size":160,"mtime":1611243717257,"results":"56","hashOfConfig":"44"},{"size":26,"mtime":1611243015451,"results":"57","hashOfConfig":"44"},{"size":2452,"mtime":1611596976632,"results":"58","hashOfConfig":"44"},{"size":26,"mtime":1611243030289,"results":"59","hashOfConfig":"44"},{"size":1093,"mtime":1611595218947,"results":"60","hashOfConfig":"44"},{"size":6884,"mtime":1611570710617,"results":"61","hashOfConfig":"44"},{"size":32,"mtime":1611441646075,"results":"62","hashOfConfig":"44"},{"size":29,"mtime":1611441516334,"results":"63","hashOfConfig":"44"},{"size":31,"mtime":1611441646075,"results":"64","hashOfConfig":"44"},{"size":32,"mtime":1611443972842,"results":"65","hashOfConfig":"44"},{"size":5378,"mtime":1611583509110,"results":"66","hashOfConfig":"44"},{"size":2152,"mtime":1611598972828,"results":"67","hashOfConfig":"44"},{"size":3980,"mtime":1611483189735,"results":"68","hashOfConfig":"44"},{"size":570,"mtime":1611583285994,"results":"69","hashOfConfig":"44"},{"size":32,"mtime":1611441603701,"results":"70","hashOfConfig":"44"},{"size":2903,"mtime":1611600317791,"results":"71","hashOfConfig":"44"},{"size":3973,"mtime":1611583688940,"results":"72","hashOfConfig":"44"},{"size":1069,"mtime":1611444260248,"results":"73","hashOfConfig":"44"},{"size":535,"mtime":1611443387518,"results":"74","hashOfConfig":"44"},{"size":452,"mtime":1611444260249,"results":"75","hashOfConfig":"44"},{"size":27,"mtime":1611588252955,"results":"76","hashOfConfig":"44"},{"size":1430,"mtime":1611592088807,"results":"77","hashOfConfig":"44"},{"size":33,"mtime":1611587258405,"results":"78","hashOfConfig":"44"},{"size":1485,"mtime":1611588084183,"results":"79","hashOfConfig":"44"},{"size":27,"mtime":1611588252955,"results":"80","hashOfConfig":"44"},{"size":1881,"mtime":1611599005883,"results":"81","hashOfConfig":"44"},{"size":30,"mtime":1611591748681,"results":"82","hashOfConfig":"44"},{"size":2933,"mtime":1611600287399,"results":"83","hashOfConfig":"44"},{"size":382,"mtime":1611600266836,"results":"84","hashOfConfig":"44"},{"size":28,"mtime":1611599202475,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"csx4bj",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"88"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"88"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"88"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"88"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"88"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"88"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\index.tsx",[],["177","178"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\App.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Layout\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyNav\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyAlert\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Layout\\Layout.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyNav\\MyNav.tsx",["179"],"import * as React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport Typography from '@material-ui/core/Typography'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Menu from '@material-ui/icons/Menu'\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\nimport { MyDrawer } from 'components/Common/MyDrawer'\r\nimport GlobalContext from 'contexts/globalContext'\r\n\r\nexport const Nav: React.FC = () => {\r\n  const ctx = React.useContext(GlobalContext)\r\n  const history = useHistory()\r\n  const [isActive, setIsActive] = React.useState(false)\r\n\r\n  React.useEffect(() => {\r\n    console.log(history)\r\n    const path = history.location.pathname.substring(1)\r\n\r\n    if (path.includes('employees')) {\r\n      if (path.includes('new')) {\r\n        ctx?.setTitle('Add New Employee')\r\n        return\r\n      }\r\n      if (path.includes('edit')) {\r\n        ctx?.setTitle('Edit Employee')\r\n        return\r\n      }\r\n      ctx?.setTitle('Employee Management')\r\n      return\r\n    }\r\n\r\n    if (path.includes('dashboard')) {\r\n      ctx?.setTitle('Dashboard')\r\n      return\r\n    }\r\n  }, [])\r\n\r\n  const onToggle = (title?: string) => {\r\n    setIsActive((isActive) => !isActive)\r\n\r\n    if (!title) {\r\n      return\r\n    }\r\n\r\n    ctx?.setTitle(title)\r\n  }\r\n\r\n  return (\r\n    <AppBar\r\n      style={{\r\n        background:\r\n          'linear-gradient(to left, #e91e63, #df0077, #d0008b, #ba119e, #9c27b0)',\r\n      }}\r\n      position='sticky'\r\n    >\r\n      <MyDrawer onToggle={onToggle} isActive={isActive}></MyDrawer>\r\n      <Toolbar>\r\n        <Grid container xs={12} justify='center'>\r\n          <Grid container xs={1} sm={5} md={4} justify='flex-start'>\r\n            <IconButton\r\n              onClick={() => onToggle()}\r\n              edge='start'\r\n              color='inherit'\r\n              aria-label='menu'\r\n            >\r\n              <Menu />\r\n            </IconButton>\r\n          </Grid>\r\n          <Grid container xs={11} sm={5} md={4} justify='flex-end'>\r\n            <Typography style={{ paddingTop: 8 }} variant='h6'>\r\n              {ctx?.title}\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </Toolbar>\r\n    </AppBar>\r\n  )\r\n}\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyAlert\\MyAlert.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyDrawer\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Dashboard\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyDrawer\\MyDrawer.tsx",["180"],"import React from 'react'\r\nimport Drawer from '@material-ui/core/Drawer'\r\nimport List from '@material-ui/core/List'\r\nimport ArrowBack from '@material-ui/icons/ArrowBack'\r\nimport EmployeesIcon from '@material-ui/icons/People'\r\nimport ClientIcon from '@material-ui/icons/SupervisedUserCircle'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport makeStyles from '@material-ui/core/styles/makeStyles'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport Grid from '@material-ui/core/Grid/Grid'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport DashboardIcon from '@material-ui/icons/Dashboard'\r\nimport GlobalContext from 'contexts/globalContext'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nexport interface MyDrawerProps {\r\n  isActive: boolean\r\n  onToggle: Function\r\n}\r\n\r\nexport const MyDrawer: React.FC<MyDrawerProps> = (props) => {\r\n  const styles = useStyles()\r\n\r\n  const history = useHistory()\r\n\r\n  const ctx = React.useContext(GlobalContext)\r\n\r\n  const menus = [\r\n    { name: 'Dashboard', path: '/dashboard', icon: <DashboardIcon /> },\r\n    {\r\n      name: 'Employee Management',\r\n      path: '/employees',\r\n      icon: <EmployeesIcon />,\r\n    },\r\n    { name: 'Client Management', path: '/clients', icon: <ClientIcon /> },\r\n  ]\r\n\r\n  const list = () => (\r\n    <>\r\n      <List>\r\n        {menus.map((menu, index) => (\r\n          <ListItem style={{ paddingLeft: 0 }} button key={index}>\r\n            <ListItemIcon style={{ paddingLeft: 20 }}>{menu.icon}</ListItemIcon>\r\n\r\n            <ListItemText\r\n              primary={menu.name}\r\n              onClick={() => {\r\n                props.onToggle(menu.name)\r\n                history.replace(menu.path)\r\n              }}\r\n            />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </>\r\n  )\r\n\r\n  return (\r\n    <Drawer anchor='left' open={props.isActive}>\r\n      <Grid container justify='flex-end'>\r\n        <IconButton\r\n          onClick={() => props.onToggle()}\r\n          edge='start'\r\n          color='inherit'\r\n          aria-label='menu'\r\n        >\r\n          <ArrowBack />\r\n        </IconButton>\r\n      </Grid>\r\n      {list()}\r\n      <Divider style={{ marginLeft: 10, marginRight: 10 }}></Divider>\r\n      <FormControlLabel\r\n        style={{ marginLeft: 10, marginTop: 10 }}\r\n        control={\r\n          <Switch\r\n            checked={ctx?.isDark}\r\n            onChange={() => ctx?.setIsDark((isDark) => !isDark)}\r\n            name='checkedA'\r\n            inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n          />\r\n        }\r\n        label='Dark Mode'\r\n      />\r\n    </Drawer>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  close: {\r\n    paddingTop: 5,\r\n    paddingRight: 5,\r\n  },\r\n}))\r\n\r\nexport default MyDrawer\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Dashboard\\Dashboard.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyCard\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\utils\\helper.ts",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyForm\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyCard\\MyCard.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyForm\\MyForm.tsx",["181","182","183","184"],"import React, { useRef, RefObject, MutableRefObject } from 'react'\nimport Joi from 'joi'\nimport TextField from '@material-ui/core/TextField'\nimport Grid from '@material-ui/core/Grid'\nimport FormControl from '@material-ui/core/FormControl'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Button from '@material-ui/core/Button'\nimport IconButton from '@material-ui/core/IconButton'\nimport DateFnsUtils from '@date-io/date-fns/build'\nimport FormHelperText from '@material-ui/core/FormHelperText'\nimport OutlinedInput from '@material-ui/core/OutlinedInput'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport VisibilityOff from '@material-ui/icons/VisibilityOff'\nimport Visibility from '@material-ui/icons/Visibility'\nimport {\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider,\n} from '@material-ui/pickers'\nimport { endOfYesterday } from 'date-fns'\n\nexport interface MyFormProps<T> {\n  state: [T, React.Dispatch<React.SetStateAction<T>>]\n  onSubmit: (data: T) => Promise<any>\n  validator?: {}\n  children?: (props: RenderProps) => JSX.Element\n}\n\nexport interface InputProps {\n  value?: any\n  name: string\n  placeholder?: string\n  type?: string | 'text'\n  label: string\n  isMultiline?: boolean\n  onTogglePassword?: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nexport interface SelectProps extends InputProps {\n  options: string[]\n}\n\nexport interface RenderProps {\n  myInput: (input: InputProps) => JSX.Element\n  myInputPassword: (input: InputProps) => JSX.Element\n  myDateTimePicker: (input: InputProps) => JSX.Element\n  myButton: (text?: string) => JSX.Element\n  mySelect: (select: SelectProps) => JSX.Element\n}\n\nexport function MyForm<T>(props: MyFormProps<T>) {\n  const [data, setData] = props.state\n\n  const [isDisable, setIsDisable] = React.useState<boolean>(false)\n\n  const [errors, setErrors] = React.useState<any>(null)\n\n  const onValidate = (_data: T) => {\n    const schema = Joi.object(props.validator).options({\n      abortEarly: false,\n    })\n\n    const { error } = schema.validate(_data)\n\n    if (!error) return null\n\n    const _errors: any = {}\n\n    error.details.forEach((item) => (_errors[item.path[0]] = item.message))\n\n    return _errors\n  }\n\n  const onSubmit = (e: any) => {\n    e.preventDefault()\n\n    const newData = { ...data } as any\n\n    for (let [key, value] of new FormData(e.target).entries()) {\n      newData[key] = value\n    }\n    const hasErrors = onValidate(newData)\n\n    setIsDisable(true)\n\n    if (hasErrors) {\n      setErrors(hasErrors)\n      setIsDisable(false)\n      return\n    }\n\n    return props\n      .onSubmit(newData)\n      .then(() => {\n        setErrors({})\n        setIsDisable(false)\n      })\n      .catch((error) => {\n        setIsDisable(false)\n      })\n  }\n\n  const myInput = (input: InputProps) => {\n    const error = errors && errors[input.name]\n\n    return (\n      <Grid item xs={12} key={input.name}>\n        <TextField\n          defaultValue={input.value}\n          multiline={input.isMultiline}\n          fullWidth\n          name={input.name}\n          variant='outlined'\n          label={input.label}\n          type={input.type}\n          error={!!error}\n          helperText={error}\n        />\n      </Grid>\n    )\n  }\n\n  const myInputPassword = (input: InputProps) => {\n    const error = errors && errors[input.name]\n\n    return (\n      <Grid item xs={12} key={input.name}>\n        <FormControl fullWidth variant='outlined' error={!!error}>\n          <InputLabel htmlFor={input.label}>{input.label}</InputLabel>\n          <OutlinedInput\n            defaultValue={input.value}\n            id={input.name}\n            name={input.name}\n            type={input.type}\n            labelWidth={70}\n            endAdornment={\n              <InputAdornment position='end'>\n                <IconButton\n                  aria-label='toggle password visibility'\n                  onClick={() =>\n                    input.onTogglePassword?.call(\n                      null,\n                      (isVisible) => !isVisible,\n                    )\n                  }\n                >\n                  {input.type !== 'password' ? (\n                    <Visibility />\n                  ) : (\n                    <VisibilityOff />\n                  )}\n                </IconButton>\n              </InputAdornment>\n            }\n          />\n          <FormHelperText>{error}</FormHelperText>\n        </FormControl>\n      </Grid>\n    )\n  }\n\n  const myDateTimePicker = (input: InputProps) => {\n    return (\n      <Grid item xs={12} key={input.name}>\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <KeyboardDatePicker\n            fullWidth\n            inputVariant='outlined'\n            disableToolbar\n            variant='dialog'\n            format='MM/dd/yyyy'\n            margin='none'\n            label={input.label}\n            value={input.value}\n            onChange={(date) =>\n              setData({\n                ...data,\n                [input.name]: date?.toLocaleDateString(),\n              })\n            }\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n        </MuiPickersUtilsProvider>\n      </Grid>\n    )\n  }\n\n  const mySelect = (select: SelectProps) => {\n    const error = errors && errors[select.name]\n    return (\n      <Grid item xs={12} key={select.name}>\n        <FormControl fullWidth variant='outlined' error={!!error}>\n          <InputLabel id={select.label}>{select.label}</InputLabel>\n          <Select\n            labelId={select.label}\n            id={select.name}\n            name={select.name}\n            value={select.value === null ? '' : select.value}\n            onChange={(e: any) => {\n              const { value, name } = e.target\n              setData({\n                ...data,\n                [name]: value,\n              })\n            }}\n            labelWidth={60}\n          >\n            {select.options.map((option, index) => (\n              <MenuItem value={option}>{option}</MenuItem>\n            ))}\n          </Select>\n          <FormHelperText>{error}</FormHelperText>\n        </FormControl>\n      </Grid>\n    )\n  }\n\n  const myButton = (text?: string) => {\n    return (\n      <Grid item xs={12}>\n        <Button\n          disabled={isDisable}\n          style={{ paddingTop: 15, paddingBottom: 15 }}\n          fullWidth\n          type='submit'\n          variant='contained'\n          color='primary'\n        >\n          {text ?? 'SUBMIT'}\n        </Button>\n      </Grid>\n    )\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      <Grid container spacing={2} direction='column'>\n        {props.children?.call(null, {\n          myInput,\n          myInputPassword,\n          mySelect,\n          myDateTimePicker,\n          myButton,\n        } as RenderProps)}\n      </Grid>\n    </form>\n  )\n}\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\ViewEmployee\\index.ts",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\NewEmployee\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\EditEmployee\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\ViewEmployee\\ViewEmployee.tsx",["185"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport GlobalContext from 'contexts/globalContext'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport Chip from '@material-ui/core/Chip'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport userIcon from 'assets/profile-user.svg'\r\nimport { calculateAge } from 'utils/helper'\r\n\r\nimport { MyCard } from 'components/Common/MyCard'\r\nimport Employee from 'models/employee'\r\n\r\nexport interface ViewUserProps {\r\n  title: string\r\n}\r\n\r\nexport const ViewEmployee: React.SFC<ViewUserProps> = (props) => {\r\n  const ctx = useContext(GlobalContext)\r\n\r\n  useEffect(() => {\r\n    ctx?.setTitle('View Employee')\r\n  }, [])\r\n\r\n  const history = useHistory()\r\n  const [employee, setEmployee] = useState<Partial<Employee> | null>(null)\r\n\r\n  useEffect(() => {\r\n    setEmployee({\r\n      id: 1,\r\n      firstname: 'Firstname',\r\n      middlename: 'Middlename',\r\n      lastname: 'Lastname',\r\n      position: 'Branch Manager',\r\n      civil: 'Single',\r\n      gender: 'Male',\r\n      address: 'Somewhere ssdsdsd sdfdfdfdf sfdfdff',\r\n      contact: '09234545866',\r\n      status: 'active',\r\n      birthdate: new Date('10/03/1991'),\r\n    })\r\n  }, [])\r\n\r\n  const info = (title: string, subtitle: any) => (\r\n    <Grid container alignItems='center' direction='column' item xs={6}>\r\n      <Typography component='h6' variant='h6'>\r\n        {title}\r\n      </Typography>\r\n      <Typography variant='subtitle1' color='textSecondary'>\r\n        {subtitle}\r\n      </Typography>\r\n    </Grid>\r\n  )\r\n\r\n  return (\r\n    <Grid container xs={12}>\r\n      {employee && (\r\n        <>\r\n          <MyCard\r\n            title='Personal Details'\r\n            endIcon={\r\n              <EditIcon\r\n                style={{ color: 'white', marginTop: 5 }}\r\n                onClick={() => history.push('/employees/edit/' + employee.id)}\r\n              />\r\n            }\r\n          >\r\n            <CardContent>\r\n              <Grid container xs={12} justify='space-between'>\r\n                <Grid\r\n                  style={{ paddingLeft: 10 }}\r\n                  container\r\n                  direction='column'\r\n                  item\r\n                  xs={7}\r\n                  justify='flex-start'\r\n                >\r\n                  <Typography component='h6' variant='h6'>\r\n                    {`${employee.lastname}, ${employee.firstname} ${employee.middlename}`}\r\n                  </Typography>\r\n                  <Typography variant='subtitle1' color='textSecondary'>\r\n                    {employee.position}\r\n                  </Typography>\r\n                  <Grid item xs={1}>\r\n                    <Chip\r\n                      style={{ marginTop: 5 }}\r\n                      size='small'\r\n                      label={employee.status}\r\n                      variant='default'\r\n                      color={\r\n                        employee.status !== 'active' ? 'secondary' : 'primary'\r\n                      }\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid\r\n                  container\r\n                  item\r\n                  xs={5}\r\n                  justify='center'\r\n                  alignItems='center'\r\n                >\r\n                  <IconButton aria-label='play/pause'>\r\n                    <img\r\n                      style={{ width: 100 }}\r\n                      src={userIcon}\r\n                      alt='User Logo'\r\n                    />\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n            <Divider style={{ marginLeft: 20, marginRight: 20 }}></Divider>\r\n            <CardContent>\r\n              <Grid spacing={1} container xs={12} style={{ paddingLeft: 10 }}>\r\n                {info('Gender', employee.gender)}\r\n                {info('Civil Status', employee.civil)}\r\n                {info('Contact', employee.contact)}\r\n                {info(\r\n                  'Age',\r\n                  employee.birthdate ? calculateAge(employee.birthdate) : 'N/A',\r\n                )}\r\n                {\r\n                  <Grid\r\n                    container\r\n                    alignItems='center'\r\n                    direction='column'\r\n                    item\r\n                    xs={12}\r\n                  >\r\n                    <Typography component='h6' variant='h6'>\r\n                      Address\r\n                    </Typography>\r\n                    <Typography variant='subtitle1' color='textSecondary'>\r\n                      {employee.address}\r\n                    </Typography>\r\n                  </Grid>\r\n                }\r\n              </Grid>\r\n            </CardContent>\r\n          </MyCard>\r\n          <Grid style={{ marginTop: 15 }} container xs={5}>\r\n            <Button\r\n              onClick={() => history.goBack()}\r\n              style={{ paddingTop: 15, paddingBottom: 15 }}\r\n              fullWidth\r\n              variant='contained'\r\n              color='default'\r\n            >\r\n              BACK\r\n            </Button>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </Grid>\r\n  )\r\n}\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\Employees.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\NewEmployee\\NewEmployee.tsx",["186","187"],"import React, { useContext } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport GlobalContext from 'contexts/globalContext'\r\nimport validator from '../validator'\r\nimport { MyForm, MyFormProps, InputProps } from 'components/Common/MyForm'\r\nimport Employee from 'models/employee'\r\nimport { EmployeesProps } from '../Employees'\r\n\r\nexport interface NewUserProps {}\r\n\r\nexport const NewEmployee: React.SFC<NewUserProps> = () => {\r\n  const ctx = useContext(GlobalContext)\r\n\r\n  const history = useHistory()\r\n\r\n  const [employee, setEmployee] = React.useState<Employee>({\r\n    firstname: 'dfdf',\r\n    middlename: '',\r\n    lastname: '',\r\n    address: '',\r\n    contact: '',\r\n    gender: null,\r\n    civil: null,\r\n    birthdate: null,\r\n    position: null,\r\n    branch: null,\r\n    team: null,\r\n  })\r\n\r\n  const onSubmit = async (data: Employee) => {\r\n    console.log(data)\r\n    ctx?.setAlert({ message: 'Successfully added', type: 'success' })\r\n    return Promise.resolve()\r\n  }\r\n\r\n  const formProps: MyFormProps<Employee> = {\r\n    state: [employee, setEmployee],\r\n    onSubmit,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myInput, mySelect, myDateTimePicker, myButton }) => (\r\n        <>\r\n          {myInput({\r\n            label: 'Firstname',\r\n            value: employee.firstname,\r\n            name: 'firstname',\r\n          })}\r\n          {myInput({\r\n            label: 'Middlename',\r\n            value: employee.middlename,\r\n            name: 'middlename',\r\n          })}\r\n          {myInput({\r\n            label: 'Lastname',\r\n            value: employee.lastname,\r\n            name: 'lastname',\r\n          })}\r\n          {myInput({\r\n            label: 'Contact Number',\r\n            value: employee.contact,\r\n            name: 'contact',\r\n          })}\r\n\r\n          {myInput({\r\n            label: 'Address',\r\n            value: employee.address,\r\n            name: 'address',\r\n            isMultiline: true,\r\n          })}\r\n          {mySelect({\r\n            label: 'Gender',\r\n            value: employee.gender,\r\n            name: 'gender',\r\n            options: ['Male', 'Female', 'Other'],\r\n          })}\r\n          {mySelect({\r\n            label: 'Civil Status',\r\n            value: employee.civil,\r\n            name: 'civil',\r\n            options: ['Single', 'Married', 'Widowed'],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Position',\r\n            value: employee.position,\r\n            name: 'position',\r\n            options: [\r\n              'Sales Agent',\r\n              'Branch Manager',\r\n              'Agency Manager',\r\n              'Supervisor',\r\n              'Admin',\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Branch',\r\n            value: employee.branch,\r\n            name: 'branch',\r\n            options: ['CEBU', 'MAKATI', 'MANILA'],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Team',\r\n            value: employee.team,\r\n            name: 'team',\r\n            options: ['ABC', '123', 'XYZ'],\r\n          })}\r\n\r\n          {myDateTimePicker({\r\n            label: 'Birthdate',\r\n            value: employee.birthdate,\r\n            name: 'birthdate',\r\n          })}\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 10, paddingBottom: 5 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.goBack()}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton()}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\validator.tsx",["188"],"import Joi from 'joi'\r\nimport Employee from 'models/employee'\r\nimport { lettersOnly, notNull, alphaNumeric } from 'utils/helper'\r\n\r\nexport default {\r\n  firstname: lettersOnly('Firstname').min(1).max(50),\r\n  middlename: lettersOnly('Middlename').min(1).max(50),\r\n  lastname: lettersOnly('Lastname').min(1).max(50),\r\n  position: notNull('Position'),\r\n  civil: notNull('Civil Status'),\r\n  gender: notNull('Gender'),\r\n  branch: notNull('Branch'),\r\n  team: Joi.optional(),\r\n  contact: Joi.optional(),\r\n  address: Joi.optional(),\r\n  birthdate: Joi.optional(),\r\n} as Employee\r\n","C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\EmployeeCard\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\EmployeeCard\\EmployeeCard.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Employees\\EditEmployee\\EditEmployee.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\providers\\GlobalProvider.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\contexts\\globalContext.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\hooks\\useGlobalState.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\clients\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\clients\\Clients.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MySearchField\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MySearchField\\MySearchField.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\Clients.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\ClientCard\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Pages\\Clients\\ClientCard\\ClientCard.tsx",["189","190"],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyAvatar\\MyAvatar.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\client\\src\\components\\Common\\MyAvatar\\index.tsx",[],{"ruleId":"191","replacedBy":"192"},{"ruleId":"193","replacedBy":"194"},{"ruleId":"195","severity":1,"message":"196","line":40,"column":6,"nodeType":"197","endLine":40,"endColumn":8,"suggestions":"198"},{"ruleId":"199","severity":1,"message":"200","line":26,"column":9,"nodeType":"201","messageId":"202","endLine":26,"endColumn":15},{"ruleId":"199","severity":1,"message":"203","line":1,"column":17,"nodeType":"201","messageId":"202","endLine":1,"endColumn":23},{"ruleId":"199","severity":1,"message":"204","line":1,"column":25,"nodeType":"201","messageId":"202","endLine":1,"endColumn":34},{"ruleId":"199","severity":1,"message":"205","line":1,"column":36,"nodeType":"201","messageId":"202","endLine":1,"endColumn":52},{"ruleId":"199","severity":1,"message":"206","line":21,"column":10,"nodeType":"201","messageId":"202","endLine":21,"endColumn":24},{"ruleId":"195","severity":1,"message":"207","line":27,"column":6,"nodeType":"197","endLine":27,"endColumn":8,"suggestions":"208"},{"ruleId":"199","severity":1,"message":"209","line":7,"column":31,"nodeType":"201","messageId":"202","endLine":7,"endColumn":41},{"ruleId":"199","severity":1,"message":"210","line":9,"column":10,"nodeType":"201","messageId":"202","endLine":9,"endColumn":24},{"ruleId":"199","severity":1,"message":"211","line":3,"column":32,"nodeType":"201","messageId":"202","endLine":3,"endColumn":44},{"ruleId":"199","severity":1,"message":"212","line":12,"column":8,"nodeType":"201","messageId":"202","endLine":12,"endColumn":14},{"ruleId":"199","severity":1,"message":"213","line":13,"column":8,"nodeType":"201","messageId":"202","endLine":13,"endColumn":16},"no-native-reassign",["214"],"no-negated-in-lhs",["215"],"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'ctx' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["216"],"@typescript-eslint/no-unused-vars","'styles' is assigned a value but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'RefObject' is defined but never used.","'MutableRefObject' is defined but never used.","'endOfYesterday' is defined but never used.","React Hook useEffect has a missing dependency: 'ctx'. Either include it or remove the dependency array.",["217"],"'InputProps' is defined but never used.","'EmployeesProps' is defined but never used.","'alphaNumeric' is defined but never used.","'Avatar' is defined but never used.","'userIcon' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},"Update the dependencies array to be: [ctx, history]",{"range":"222","text":"223"},"Update the dependencies array to be: [ctx]",{"range":"224","text":"225"},[1182,1184],"[ctx, history]",[977,979],"[ctx]"]