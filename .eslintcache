[{"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\index.tsx":"1","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\App.tsx":"2","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\providers\\GlobalProvider.tsx":"3","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\providers\\ClientProvider.tsx":"4","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\providers\\PaymentProvider.tsx":"5","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\providers\\EmployeeProvider.tsx":"6","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\providers\\CommissionProvider.tsx":"7","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\providers\\BranchProvider.tsx":"8","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\utils\\helper.ts":"9","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\layout\\index.tsx":"10","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MyAlert\\index.tsx":"11","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MyNav\\index.tsx":"12","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\services\\clientService.tsx":"13","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\NotFound\\index.tsx":"14","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MyDrawer\\index.tsx":"15","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MyAuthRoute\\index.tsx":"16","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MyGuestRoute\\index.tsx":"17","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Employees\\EditEmployee\\index.tsx":"18","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Dashboard\\index.tsx":"19","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\utils\\http.ts":"20","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Clients\\EditClient\\index.tsx":"21","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Clients\\NewClient\\index.tsx":"22","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Payments\\index.tsx":"23","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Employees\\ViewEmployee\\index.tsx":"24","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Clients\\index.tsx":"25","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Branches\\NewBranch\\index.tsx":"26","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Branches\\index.tsx":"27","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Clients\\ViewClient\\index.tsx":"28","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Employees\\index.tsx":"29","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Payments\\PaymentView\\index.tsx":"30","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Commissions\\index.tsx":"31","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Branches\\EditBranch\\index.tsx":"32","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Auth\\SignIn\\index.tsx":"33","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Transactions\\ReleaseTransaction\\index.tsx":"34","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Transactions\\EncodeTransaction\\index.tsx":"35","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Transactions\\EncodeTransaction\\TransactionForm.tsx":"36","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\services\\authService.tsx":"37","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\services\\branchService.tsx":"38","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Commissions\\CommissionCard\\index.tsx":"39","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\services\\paymentService.tsx":"40","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\services\\employeeService.tsx":"41","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\validators\\signInValidator.tsx":"42","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\validators\\saveBranchValidator.tsx":"43","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\services\\commissionService.tsx":"44","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Transactions\\ReleaseTransaction\\ReleaseCard\\index.tsx":"45","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MyAvatar\\index.tsx":"46","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MyCard\\index.tsx":"47","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MySkeletonCard\\index.tsx":"48","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MyAlertDialog\\index.tsx":"49","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MyForm\\index.tsx":"50","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MySkeletonMiniCards\\index.tsx":"51","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MySearchField\\index.tsx":"52","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MyMiniCards\\index.tsx":"53","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\validators\\clientTransactionValidator.tsx":"54","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MyChips\\index.tsx":"55","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Clients\\NewClient\\ClientStepThree.tsx":"56","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Clients\\NewClient\\ClientStepTwo.tsx":"57","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Clients\\NewClient\\ClientStepOne.tsx":"58","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\validators\\saveEmployeeValidator.tsx":"59","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Employees\\EmployeeCard\\index.tsx":"60","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Branches\\BranchCard\\index.tsx":"61","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Clients\\ClientCard\\index.tsx":"62","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\services\\imageService.tsx":"63","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Payments\\PaymentCard\\index.tsx":"64","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\validators\\saveProfileValidator.tsx":"65","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MySkeletonCards\\index.tsx":"66","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MyStepper\\index.tsx":"67","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\validators\\clientStepTwoValidator.tsx":"68","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\validators\\clientStepThreeValidator.tsx":"69","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Users\\index.tsx":"70","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Users\\UserCard\\index.tsx":"71","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\providers\\UserProvider.tsx":"72","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\services\\userService.tsx":"73","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Employees\\NewEmployee\\index.tsx":"74","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Users\\NewUser\\index.tsx":"75","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\validators\\saveUserValidator.tsx":"76","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Users\\EditUser\\index.tsx":"77","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\validators\\editUserValidator.tsx":"78","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Settings\\General\\index.tsx":"79","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Settings\\Account\\index.tsx":"80","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MyGraph\\index.tsx":"81","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MyNavFooter\\index.tsx":"82","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\services\\statisticService.tsx":"83","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Dashboard\\StatisticGraph\\index.tsx":"84","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Notifications\\index.tsx":"85","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\providers\\StatisticProvider.tsx":"86","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\services\\notificationService.tsx":"87","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\providers\\NotificationProvider.tsx":"88","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Notifications\\NotificationCard\\index.tsx":"89","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\services\\settingService.tsx":"90","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\validators\\settingValidator.tsx":"91","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\serviceWorker.tsx":"92"},{"size":411,"mtime":1615504609976,"results":"93","hashOfConfig":"94"},{"size":1950,"mtime":1615287863221,"results":"95","hashOfConfig":"94"},{"size":9834,"mtime":1615257730266,"results":"96","hashOfConfig":"94"},{"size":2504,"mtime":1613977803039,"results":"97","hashOfConfig":"94"},{"size":1562,"mtime":1614186359419,"results":"98","hashOfConfig":"94"},{"size":2728,"mtime":1613977803039,"results":"99","hashOfConfig":"94"},{"size":1632,"mtime":1613977803039,"results":"100","hashOfConfig":"94"},{"size":1118,"mtime":1613977803039,"results":"101","hashOfConfig":"94"},{"size":2395,"mtime":1614538559923,"results":"102","hashOfConfig":"94"},{"size":4204,"mtime":1615255430210,"results":"103","hashOfConfig":"94"},{"size":856,"mtime":1613977802976,"results":"104","hashOfConfig":"94"},{"size":2606,"mtime":1613977802993,"results":"105","hashOfConfig":"94"},{"size":3716,"mtime":1615245173865,"results":"106","hashOfConfig":"94"},{"size":359,"mtime":1614195826017,"results":"107","hashOfConfig":"94"},{"size":9591,"mtime":1615148280265,"results":"108","hashOfConfig":"94"},{"size":1193,"mtime":1614046666492,"results":"109","hashOfConfig":"94"},{"size":837,"mtime":1613977802993,"results":"110","hashOfConfig":"94"},{"size":7407,"mtime":1614624699140,"results":"111","hashOfConfig":"94"},{"size":9220,"mtime":1615303919912,"results":"112","hashOfConfig":"94"},{"size":1525,"mtime":1615060486919,"results":"113","hashOfConfig":"94"},{"size":5975,"mtime":1615245177593,"results":"114","hashOfConfig":"94"},{"size":6559,"mtime":1615296441752,"results":"115","hashOfConfig":"94"},{"size":3959,"mtime":1614547407532,"results":"116","hashOfConfig":"94"},{"size":8305,"mtime":1615146977331,"results":"117","hashOfConfig":"94"},{"size":6029,"mtime":1615765519170,"results":"118","hashOfConfig":"94"},{"size":1984,"mtime":1613977803008,"results":"119","hashOfConfig":"94"},{"size":3633,"mtime":1614194282446,"results":"120","hashOfConfig":"94"},{"size":6442,"mtime":1615245244735,"results":"121","hashOfConfig":"94"},{"size":6111,"mtime":1615146129580,"results":"122","hashOfConfig":"94"},{"size":5383,"mtime":1615147126416,"results":"123","hashOfConfig":"94"},{"size":3903,"mtime":1614290351480,"results":"124","hashOfConfig":"94"},{"size":2274,"mtime":1613977803008,"results":"125","hashOfConfig":"94"},{"size":3623,"mtime":1615592554664,"results":"126","hashOfConfig":"94"},{"size":5230,"mtime":1614291174526,"results":"127","hashOfConfig":"94"},{"size":9094,"mtime":1615421023524,"results":"128","hashOfConfig":"94"},{"size":5852,"mtime":1615163124481,"results":"129","hashOfConfig":"94"},{"size":339,"mtime":1614203142900,"results":"130","hashOfConfig":"94"},{"size":821,"mtime":1613977803055,"results":"131","hashOfConfig":"94"},{"size":2782,"mtime":1614295274416,"results":"132","hashOfConfig":"94"},{"size":988,"mtime":1614538610143,"results":"133","hashOfConfig":"94"},{"size":1675,"mtime":1613977803055,"results":"134","hashOfConfig":"94"},{"size":234,"mtime":1614529570494,"results":"135","hashOfConfig":"94"},{"size":200,"mtime":1613977803069,"results":"136","hashOfConfig":"94"},{"size":1687,"mtime":1614538616977,"results":"137","hashOfConfig":"94"},{"size":2906,"mtime":1614290903927,"results":"138","hashOfConfig":"94"},{"size":1184,"mtime":1614702518906,"results":"139","hashOfConfig":"94"},{"size":1186,"mtime":1615147690052,"results":"140","hashOfConfig":"94"},{"size":1441,"mtime":1614280699468,"results":"141","hashOfConfig":"94"},{"size":1702,"mtime":1613977802976,"results":"142","hashOfConfig":"94"},{"size":11440,"mtime":1615150206261,"results":"143","hashOfConfig":"94"},{"size":1476,"mtime":1613977802993,"results":"144","hashOfConfig":"94"},{"size":1707,"mtime":1613977802993,"results":"145","hashOfConfig":"94"},{"size":3015,"mtime":1615147710196,"results":"146","hashOfConfig":"94"},{"size":476,"mtime":1613977803068,"results":"147","hashOfConfig":"94"},{"size":1746,"mtime":1615147539739,"results":"148","hashOfConfig":"94"},{"size":4529,"mtime":1615150806653,"results":"149","hashOfConfig":"94"},{"size":5830,"mtime":1615150782858,"results":"150","hashOfConfig":"94"},{"size":4673,"mtime":1614049311970,"results":"151","hashOfConfig":"94"},{"size":518,"mtime":1613977803071,"results":"152","hashOfConfig":"94"},{"size":3465,"mtime":1615143762543,"results":"153","hashOfConfig":"94"},{"size":1917,"mtime":1613977802993,"results":"154","hashOfConfig":"94"},{"size":3782,"mtime":1614632330692,"results":"155","hashOfConfig":"94"},{"size":648,"mtime":1614697683197,"results":"156","hashOfConfig":"94"},{"size":2983,"mtime":1614547329081,"results":"157","hashOfConfig":"94"},{"size":382,"mtime":1613977803072,"results":"158","hashOfConfig":"94"},{"size":1420,"mtime":1613977802993,"results":"159","hashOfConfig":"94"},{"size":1391,"mtime":1613977802993,"results":"160","hashOfConfig":"94"},{"size":389,"mtime":1613977803055,"results":"161","hashOfConfig":"94"},{"size":523,"mtime":1613977803055,"results":"162","hashOfConfig":"94"},{"size":4605,"mtime":1614527318978,"results":"163","hashOfConfig":"94"},{"size":2748,"mtime":1614525724051,"results":"164","hashOfConfig":"94"},{"size":1506,"mtime":1614337198029,"results":"165","hashOfConfig":"94"},{"size":1080,"mtime":1614612048114,"results":"166","hashOfConfig":"94"},{"size":6469,"mtime":1614511117864,"results":"167","hashOfConfig":"94"},{"size":5440,"mtime":1614513414595,"results":"168","hashOfConfig":"94"},{"size":556,"mtime":1614526978291,"results":"169","hashOfConfig":"94"},{"size":4317,"mtime":1614613392233,"results":"170","hashOfConfig":"94"},{"size":485,"mtime":1614527003887,"results":"171","hashOfConfig":"94"},{"size":3363,"mtime":1615435881028,"results":"172","hashOfConfig":"94"},{"size":6455,"mtime":1614614253341,"results":"173","hashOfConfig":"94"},{"size":6543,"mtime":1615072960185,"results":"174","hashOfConfig":"94"},{"size":4018,"mtime":1615328734947,"results":"175","hashOfConfig":"94"},{"size":536,"mtime":1615057051825,"results":"176","hashOfConfig":"94"},{"size":1544,"mtime":1615075321406,"results":"177","hashOfConfig":"94"},{"size":3070,"mtime":1615427952665,"results":"178","hashOfConfig":"94"},{"size":1271,"mtime":1615287381507,"results":"179","hashOfConfig":"94"},{"size":720,"mtime":1615299516859,"results":"180","hashOfConfig":"94"},{"size":1534,"mtime":1615435994410,"results":"181","hashOfConfig":"94"},{"size":4260,"mtime":1615301940966,"results":"182","hashOfConfig":"94"},{"size":356,"mtime":1615328013870,"results":"183","hashOfConfig":"94"},{"size":205,"mtime":1615328236615,"results":"184","hashOfConfig":"94"},{"size":4602,"mtime":1615504556652,"results":"185","hashOfConfig":"94"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},"z4cawg",{"filePath":"189","messages":"190","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"188"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"188"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"188"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"188"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"188"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"188"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"188"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"188"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"188"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"188"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"188"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"188"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"188"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"188"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"188"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"188"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"188"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"188"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"188"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"188"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"188"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"188"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"188"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"188"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"188"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"188"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"188"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"188"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"188"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"188"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"188"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"188"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"188"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"188"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"188"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"188"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"188"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"188"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"188"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"188"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"188"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"188"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"188"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"188"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"188"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"188"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"188"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"188"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375","usedDeprecatedRules":"188"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"188"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385","usedDeprecatedRules":"188"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388","usedDeprecatedRules":"188"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"393","usedDeprecatedRules":"188"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"188"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"188"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404","usedDeprecatedRules":"405"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"408","usedDeprecatedRules":"188"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"413","usedDeprecatedRules":"188"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"416","usedDeprecatedRules":"188"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"419","usedDeprecatedRules":"188"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"426","usedDeprecatedRules":"188"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"431","usedDeprecatedRules":"188"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\index.tsx",[],["434","435"],"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\App.tsx",["436","437"],"import React, { useContext, useEffect } from 'react'\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\nimport Nav from 'components/common/MyNav'\r\nimport MyAlert from 'components/common/MyAlert'\r\nimport Layout from 'components/layout'\r\nimport { ClientProvider } from 'providers/ClientProvider'\r\nimport { EmployeeProvider } from 'providers/EmployeeProvider'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport { PaymentProvider } from 'providers/PaymentProvider'\r\nimport { BranchProvider } from 'providers/BranchProvider'\r\nimport { CommissionProvider } from 'providers/CommissionProvider'\r\nimport { NotificationProvider } from 'providers/NotificationProvider'\r\nimport wave from 'assets/wave.svg'\r\nimport { UserProvider } from 'providers/UserProvider'\r\nimport MyNavFooter from 'components/common/MyNavFooter'\r\nimport { StatisticProvider } from 'providers/StatisticProvider'\r\n\r\nconst App: React.FC = (props) => {\r\n  const [state, dispatch] = useContext(GlobalContext)!\r\n\r\n  return (\r\n    <>\r\n      <CssBaseline />\r\n      <MyAlert />\r\n      {!state.currentUser && (\r\n        <img\r\n          style={{ position: 'absolute', top: 0 }}\r\n          width='100%'\r\n          src={wave}\r\n          alt='wave logo'\r\n        />\r\n      )}\r\n      {state.currentUser && <Nav />}\r\n      <BranchProvider>\r\n        <UserProvider>\r\n          <EmployeeProvider>\r\n            <ClientProvider>\r\n              <PaymentProvider>\r\n                <CommissionProvider>\r\n                  <StatisticProvider>\r\n                    <NotificationProvider>\r\n                      <Layout />\r\n                      {state.currentUser && <MyNavFooter />}\r\n                    </NotificationProvider>\r\n                  </StatisticProvider>\r\n                </CommissionProvider>\r\n              </PaymentProvider>\r\n            </ClientProvider>\r\n          </EmployeeProvider>\r\n        </UserProvider>\r\n      </BranchProvider>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\providers\\GlobalProvider.tsx",[],"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\providers\\ClientProvider.tsx",["438"],"import { createContext, Dispatch, useEffect, useReducer } from 'react'\r\nimport { produce } from 'immer'\r\nimport Client from 'models/client'\r\nimport Plan from 'models/plan'\r\nimport { plans } from 'services/clientService'\r\n\r\nexport const ClientContext = createContext<\r\n  [state: ClientState, dispatch: Dispatch<ClientAction>] | null\r\n>(null)\r\n\r\ninterface ClientState {\r\n  clients: Client[]\r\n  plans: Plan[]\r\n  isLoading: boolean\r\n  onReloadPlans: boolean\r\n  pages: number\r\n  total: number\r\n}\r\n\r\nexport type ClientAction =\r\n  | { type: 'TOGGLE_LOADING' | 'ON_RELOAD_PLANS' }\r\n  | {\r\n      type: 'ON_LOAD_CLIENTS'\r\n      payload: { clients: Client[]; total?: number; pages?: number }\r\n    }\r\n  | { type: 'ON_LOAD_CLIENTS_INSTALLMENT'; payload: Client[] }\r\n  | { type: 'ON_LOAD_PLANS'; payload: Plan[] }\r\n  | { type: 'SET_IS_LOADING'; payload: boolean }\r\n  | { type: 'SET_TOTAL'; payload: number }\r\n  | { type: 'SET_PAGES'; payload: number }\r\n\r\nconst reducer = (state: ClientState, action: ClientAction) => {\r\n  switch (action.type) {\r\n    case 'ON_LOAD_PLANS':\r\n      state.plans = action.payload\r\n      break\r\n    case 'ON_RELOAD_PLANS':\r\n      state.onReloadPlans = !state.onReloadPlans\r\n      break\r\n    case 'ON_LOAD_CLIENTS':\r\n      state.clients = action.payload.clients\r\n      state.total = action.payload.total!\r\n      state.pages = action.payload.pages!\r\n      state.isLoading = false\r\n      break\r\n    case 'ON_LOAD_CLIENTS_INSTALLMENT':\r\n      state.clients = action.payload.filter(\r\n        (client) => client.payment_mode === 'Installment',\r\n      )\r\n      state.isLoading = false\r\n      break\r\n    case 'SET_IS_LOADING':\r\n      state.isLoading = action.payload\r\n      break\r\n    case 'TOGGLE_LOADING':\r\n      state.isLoading = !state.isLoading\r\n      break\r\n    case 'SET_PAGES':\r\n      state.pages = action.payload\r\n      break\r\n    case 'SET_TOTAL':\r\n      state.total = action.payload\r\n      break\r\n    default:\r\n      return state\r\n  }\r\n  return state\r\n}\r\n\r\nexport const ClientProvider: React.FC = (props) => {\r\n  const [state, dispatch] = useReducer(produce(reducer), {\r\n    clients: [],\r\n    plans,\r\n    isLoading: false,\r\n    onReloadPlans: false,\r\n    pages: 0,\r\n    total: 0,\r\n  })\r\n\r\n  // useEffect(() => {\r\n  //   getPlans().then((plans) => {\r\n  //     dispatch({ type: 'ON_LOAD_PLANS', payload: plans })\r\n  //   })\r\n  // }, [state.onReloadPlans])\r\n\r\n  return (\r\n    <ClientContext.Provider value={[state, dispatch]}>\r\n      {props.children}\r\n    </ClientContext.Provider>\r\n  )\r\n}\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\providers\\PaymentProvider.tsx",[],"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\providers\\EmployeeProvider.tsx",["439"],"import { Dispatch, createContext, useReducer, useEffect } from 'react'\r\nimport Employee from 'models/employee'\r\nimport { produce } from 'immer'\r\nimport Branch from 'models/branch'\r\nimport Position from 'models/position'\r\n\r\ninterface EmployeeState {\r\n  employees: Employee[]\r\n  isLoading: boolean\r\n  employee: Employee\r\n  branches: Branch[]\r\n  positions: Position[]\r\n  pages: number\r\n  total: number\r\n}\r\n\r\ntype EmployeeAction =\r\n  | {\r\n      type: 'ON_ADD_EMPLOYEE'\r\n      payload: Employee\r\n    }\r\n  | {\r\n      type: 'ON_GET_EMPLOYEE'\r\n      payload: number\r\n    }\r\n  | {\r\n      type: 'ON_LOAD_EMPLOYEES'\r\n      payload: { employees: Employee[]; pages?: number; total?: number }\r\n    }\r\n  | {\r\n      type: 'SET_IS_LOADING'\r\n      payload: boolean\r\n    }\r\n  | {\r\n      type: 'ON_LOAD_BRANCHES'\r\n      payload: Branch[]\r\n    }\r\n  | {\r\n      type: 'ON_LOAD_POSITIONS'\r\n      payload: Position[]\r\n    }\r\n  | {\r\n      type: 'SET_PAGES'\r\n      payload: number\r\n    }\r\n  | {\r\n      type: 'SET_TOTAL'\r\n      payload: number\r\n    }\r\n\r\nconst reducer = (state: EmployeeState, action: EmployeeAction) => {\r\n  switch (action.type) {\r\n    case 'ON_LOAD_BRANCHES':\r\n      state.branches = action.payload\r\n      break\r\n    case 'ON_LOAD_POSITIONS':\r\n      state.positions = action.payload\r\n      break\r\n    case 'ON_LOAD_EMPLOYEES':\r\n      state.employees = action.payload.employees\r\n      state.pages = action.payload.pages!\r\n      state.total = action.payload.total!\r\n      state.isLoading = false\r\n      break\r\n    case 'ON_ADD_EMPLOYEE':\r\n      state.employees = [...state.employees, action.payload]\r\n      break\r\n    case 'ON_GET_EMPLOYEE':\r\n      state.employee = state.employees.filter(\r\n        (employee) => employee.id === action.payload,\r\n      )[0]\r\n      break\r\n    case 'SET_IS_LOADING':\r\n      state.isLoading = action.payload\r\n      break\r\n    case 'SET_PAGES':\r\n      state.pages = action.payload\r\n      break\r\n    case 'SET_TOTAL':\r\n      state.total = action.payload\r\n      break\r\n    default:\r\n      return state\r\n  }\r\n  return state\r\n}\r\n\r\nexport const EmployeeContext = createContext<\r\n  [state: EmployeeState, dispatch: Dispatch<EmployeeAction>] | null\r\n>(null)\r\n\r\nexport const EmployeeProvider: React.FC = (props) => {\r\n  const [state, dispatch] = useReducer(produce(reducer), {\r\n    employees: [],\r\n    isLoading: false,\r\n    employee: {},\r\n    branches: [],\r\n    positions: [\r\n      { id: 1, name: 'Branch Manager' },\r\n      { id: 2, name: 'Agency Manager' },\r\n      { id: 3, name: 'Supervisor' },\r\n      { id: 4, name: 'Sales Agent' },\r\n    ],\r\n    pages: 0,\r\n    total: 0,\r\n  })\r\n\r\n  return (\r\n    <EmployeeContext.Provider value={[state, dispatch]}>\r\n      {props.children}\r\n    </EmployeeContext.Provider>\r\n  )\r\n}\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\providers\\CommissionProvider.tsx",[],"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\providers\\BranchProvider.tsx",[],"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\utils\\helper.ts",[],"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\layout\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MyAlert\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MyNav\\index.tsx",["440"],"import * as React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport Typography from '@material-ui/core/Typography'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Menu from '@material-ui/icons/Menu'\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\nimport MyDrawer from 'components/common/MyDrawer'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger'\r\nimport Slide from '@material-ui/core/Slide'\r\nimport LinearProgress from '@material-ui/core/LinearProgress'\r\n\r\nconst Nav: React.FC = (props) => {\r\n  const [state, dispatch] = React.useContext(GlobalContext)!\r\n  const history = useHistory()\r\n  const [isActive, setIsActive] = React.useState(false)\r\n\r\n  const onToggle = (title?: string) => {\r\n    setIsActive((isActive) => !isActive)\r\n\r\n    if (!title) {\r\n      return\r\n    }\r\n    dispatch({ type: 'SET_TITLE', payload: title })\r\n  }\r\n\r\n  interface Props {\r\n    window?: () => Window\r\n    children: React.ReactElement\r\n  }\r\n\r\n  function HideOnScroll(props: Props) {\r\n    const { children, window } = props\r\n    const trigger = useScrollTrigger({ target: window ? window() : undefined })\r\n\r\n    return (\r\n      <Slide appear={false} direction='down' in={!trigger}>\r\n        {children}\r\n      </Slide>\r\n    )\r\n  }\r\n  return (\r\n    <>\r\n      <MyDrawer onToggle={onToggle} isActive={isActive} />\r\n      <HideOnScroll {...props}>\r\n        <AppBar\r\n          style={{\r\n            background:\r\n              'linear-gradient(to right, #9c27b0, #9c27b0, #9c27b0, #9c27b0, #9c27b0, #a721aa, #b119a4, #ba119e, #cb0090, #d80081, #e20672, #e91e63)',\r\n          }}\r\n        >\r\n          <Toolbar>\r\n            <Grid container xs={12} justify='center'>\r\n              <Grid container xs={1} sm={5} md={4} justify='flex-start'>\r\n                <IconButton\r\n                  onClick={() => onToggle()}\r\n                  edge='start'\r\n                  color='inherit'\r\n                  aria-label='menu'\r\n                >\r\n                  <Menu />\r\n                </IconButton>\r\n              </Grid>\r\n              <Grid container xs={11} sm={5} md={4} justify='flex-end'>\r\n                <Typography style={{ paddingTop: 8 }} variant='h6'>\r\n                  {state.title}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Toolbar>\r\n\r\n          <LinearProgress hidden={!state.isLoading} />\r\n        </AppBar>\r\n      </HideOnScroll>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Nav\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\services\\clientService.tsx",["441","442","443"],"import Branch from 'models/branch'\r\nimport Client from 'models/client'\r\nimport Commissioner from 'models/commissioner'\r\nimport Payment from 'models/payment'\r\nimport Plan from 'models/plan'\r\nimport Profile from 'models/profile'\r\nimport http from 'utils/http'\r\n\r\nexport const plans: Plan[] = [\r\n  {\r\n    id: 1,\r\n    price: 23280,\r\n    name: 'Plan 1',\r\n  },\r\n  {\r\n    id: 2,\r\n    price: 32280,\r\n    name: 'Plan 2',\r\n  },\r\n  {\r\n    id: 3,\r\n    price: 41280,\r\n    name: 'Plan 3',\r\n  },\r\n  {\r\n    id: 4,\r\n    price: 50280,\r\n    name: 'Plan 4',\r\n  },\r\n  {\r\n    id: 5,\r\n    price: 65280,\r\n    name: 'Plan 5',\r\n  },\r\n  {\r\n    id: 6,\r\n    price: 83280,\r\n    name: 'Plan 6',\r\n  },\r\n  {\r\n    id: 7,\r\n    price: 95280,\r\n    name: 'Plan 7',\r\n  },\r\n  {\r\n    id: 8,\r\n    price: 173280,\r\n    name: 'Plan 8',\r\n  },\r\n]\r\n\r\nexport const getClient = async (id: number) => {\r\n  return http.get('/clients/' + id).then(({ data }) => data)\r\n}\r\n\r\nexport const getPlans = async () => {\r\n  return new Promise<Plan[]>(function (resolve, reject) {\r\n    resolve(plans)\r\n  })\r\n}\r\n\r\nexport interface ClientProps {\r\n  search?: string\r\n  category?: string\r\n  page?: number\r\n}\r\n\r\nexport const saveClient = (transaction: any) => {\r\n  return http.post('/clients', transaction).then(({ data }) => {\r\n    return data\r\n  })\r\n}\r\n\r\nexport const updateClient = (profile: Profile) => {\r\n  return http.put('/clients/' + profile.id, profile).then(({ data }) => {\r\n    return data\r\n  })\r\n}\r\n\r\nexport const getClients = async (props: ClientProps) => {\r\n  return http\r\n    .get(\r\n      `/clients?page=${props.page || ''}&search=${\r\n        props.search || ''\r\n      }&category=${props.category || ''}`\r\n    )\r\n    .then(({ data }) => {\r\n      const clients: Client[] = data.items.map((item: any) => ({\r\n        ...item.profile,\r\n        ...item,\r\n      }))\r\n      return { clients, pages: data.pages, total: data.count }\r\n    })\r\n}\r\n\r\nexport const getLapsedClients = async (search: string) => {\r\n  return http.get(`/clients/lapse?search=` + search).then(({ data }) =>\r\n    data.map((client: any) => ({\r\n      ...client.profile,\r\n      ...client,\r\n    }))\r\n  )\r\n}\r\n\r\nexport const getAmountToPay = (client: Client) => {\r\n  if (client.payment_mode === 'Fullpayment') {\r\n    return client.plan?.price!\r\n  }\r\n\r\n  switch (client.payment_period) {\r\n    case 'Monthly':\r\n      return client.plan?.price! / (12 * client.years_to_pay!)\r\n    case 'Quarterly':\r\n      return client.plan?.price! / (4 * client.years_to_pay!)\r\n    case 'Semi-Annually':\r\n      return client.plan?.price! / (2 * client.years_to_pay!)\r\n    case 'Annually':\r\n      return client.plan?.price! / client.years_to_pay!\r\n    default:\r\n      return 0\r\n  }\r\n}\r\n\r\nexport const computeTotalCountToPay = (client: Client) => {\r\n  let period: number = 0\r\n\r\n  switch (client.payment_period) {\r\n    case 'Monthly':\r\n      period = 12\r\n      break\r\n    case 'Quarterly':\r\n      period = 4\r\n      break\r\n    case 'Semi-Annually':\r\n      period = 2\r\n      break\r\n    case 'Annually':\r\n      period = 1\r\n      break\r\n    default:\r\n      period = 12\r\n      break\r\n  }\r\n\r\n  return period * client.years_to_pay!\r\n}\r\n\r\nexport const hasCommission = (client: Client) => {\r\n  const price = client?.plan?.price!\r\n  const balance = client?.balance!\r\n  const percentage = Math.ceil(((price - balance) * 100) / price)\r\n  return percentage <= 20\r\n}\r\n\r\nexport const computeTotalCountPaid = (client: Client) => {\r\n  const amount = getAmountToPay(client)\r\n\r\n  const totalCountPaid = computeTotalCountToPay(client)\r\n  return (\r\n    Math.ceil(totalCountPaid - client.balance! / amount) + '/' + totalCountPaid\r\n  )\r\n}\r\n\r\nexport const archiveClient = (id: number) => {\r\n  return http.delete('/clients/' + id).then(({ data }) => data)\r\n}\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\NotFound\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MyDrawer\\index.tsx",["444","445","446","447"],"import React, { useState, useEffect } from 'react'\r\nimport Drawer from '@material-ui/core/Drawer'\r\nimport List from '@material-ui/core/List'\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\r\nimport EmployeesIcon from '@material-ui/icons/People'\r\nimport UsersIcon from '@material-ui/icons/Accessibility'\r\nimport BranchIcon from '@material-ui/icons/Business'\r\nimport ClientIcon from '@material-ui/icons/SupervisedUserCircle'\r\nimport PaymentIcon from '@material-ui/icons/Receipt'\r\nimport CommissionIcon from '@material-ui/icons/Description'\r\nimport SettingsIcon from '@material-ui/icons/Settings'\r\nimport TransactionIcon from '@material-ui/icons/Payment'\r\nimport ReleaseIcon from '@material-ui/icons/MonetizationOn'\r\nimport FaceIcon from '@material-ui/icons/Face'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport makeStyles from '@material-ui/core/styles/makeStyles'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport Collapse from '@material-ui/core/Collapse'\r\nimport Grid from '@material-ui/core/Grid/Grid'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport { useHistory } from 'react-router-dom'\r\nimport ExpandLess from '@material-ui/icons/ExpandLess'\r\nimport ExpandMore from '@material-ui/icons/ExpandMore'\r\n\r\nimport Typography from '@material-ui/core/Typography'\r\nimport MyAlertDialog, { AlertDataProps } from '../MyAlertDialog'\r\nimport { onSignout } from 'services/authService'\r\nimport MyAvatar from '../MyAvatar'\r\nimport { getMe } from 'services/userService'\r\nimport User from 'models/user'\r\n\r\nexport interface MyDrawerProps {\r\n  isActive: boolean\r\n  onToggle: Function\r\n}\r\n\r\ninterface SubMenuProps {\r\n  name: string\r\n  path: string\r\n  icon: JSX.Element\r\n}\r\n\r\ninterface MenuProps {\r\n  name: string\r\n  subMenus: SubMenuProps[]\r\n}\r\n\r\nconst MyDrawer: React.FC<MyDrawerProps> = (props) => {\r\n  const styles = useStyles()\r\n\r\n  const history = useHistory()\r\n\r\n  const [state, dispatch] = React.useContext(GlobalContext)!\r\n\r\n  const [active, setActive] = useState('')\r\n\r\n  const stateManagementOpen = useState(false)\r\n  const stateTransactionOpen = useState(false)\r\n  const stateHistoryOpen = useState(false)\r\n  const stateSettingOpen = useState(false)\r\n\r\n  const [user, setUser] = useState<Partial<User>>({})\r\n\r\n  useEffect(() => {\r\n    getMe().then((user) => setUser(user))\r\n  }, [])\r\n\r\n  const adminMenus: MenuProps[] = [\r\n    {\r\n      name: 'Transaction',\r\n      subMenus: [\r\n        {\r\n          name: 'Encode Transaction',\r\n          path: '/transaction/encode',\r\n          icon: <TransactionIcon />,\r\n        },\r\n        {\r\n          name: 'Release Transaction',\r\n          path: '/transaction/releases',\r\n          icon: <ReleaseIcon />,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      name: 'Management',\r\n      subMenus: [\r\n        {\r\n          name: 'Branch Management',\r\n          path: '/branches',\r\n          icon: <BranchIcon />,\r\n        },\r\n        { name: 'Client Management', path: '/clients', icon: <ClientIcon /> },\r\n\r\n        {\r\n          name: 'Employee Management',\r\n          path: '/employees',\r\n          icon: <EmployeesIcon />,\r\n        },\r\n        {\r\n          name: 'User Management',\r\n          path: '/users',\r\n          icon: <UsersIcon />,\r\n        },\r\n      ],\r\n    },\r\n\r\n    {\r\n      name: 'History',\r\n      subMenus: [\r\n        {\r\n          name: 'Payment History',\r\n          path: '/payments',\r\n          icon: <PaymentIcon />,\r\n        },\r\n        {\r\n          name: 'Commission History',\r\n          path: '/commissions',\r\n          icon: <CommissionIcon />,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      name: 'Settings',\r\n      subMenus: [\r\n        {\r\n          name: 'General Settings',\r\n          path: '/settings/general',\r\n          icon: <SettingsIcon />,\r\n        },\r\n        {\r\n          name: 'Account Settings',\r\n          path: '/settings/account',\r\n          icon: <FaceIcon />,\r\n        },\r\n      ],\r\n    },\r\n  ]\r\n\r\n  const cashierMenus = [\r\n    {\r\n      name: 'Client Registration',\r\n      path: '/clients/new',\r\n      icon: <BranchIcon />,\r\n    },\r\n    {\r\n      name: 'Employee Registration',\r\n      path: '/employees/new',\r\n      icon: <EmployeesIcon />,\r\n    },\r\n    {\r\n      name: 'Encode Transaction',\r\n      path: '/transaction/encode',\r\n      icon: <TransactionIcon />,\r\n    },\r\n    {\r\n      name: 'General Settings',\r\n      path: '/settings/general',\r\n      icon: <SettingsIcon />,\r\n    },\r\n    {\r\n      name: 'Account Settings',\r\n      path: '/settings/account',\r\n      icon: <FaceIcon />,\r\n    },\r\n  ]\r\n\r\n  const renderSubMenus = (subMenu: {\r\n    name: string\r\n    path: string\r\n    icon: JSX.Element\r\n  }) => {\r\n    return (\r\n      <List component='div' disablePadding>\r\n        <ListItem\r\n          onClick={() => {\r\n            props.onToggle(subMenu.name)\r\n            history.replace(subMenu.path)\r\n          }}\r\n          button\r\n          className={styles.nested}\r\n        >\r\n          <ListItemIcon style={{ paddingLeft: 20 }}>\r\n            {subMenu.icon}\r\n          </ListItemIcon>\r\n          <ListItemText primary={subMenu.name} />\r\n        </ListItem>\r\n      </List>\r\n    )\r\n  }\r\n\r\n  const toggleMenu = (name: string) => {\r\n    setActive((active) => (active === name ? '' : name))\r\n  }\r\n\r\n  const renderMenus = (menu: MenuProps) => {\r\n    const open = active === menu.name\r\n    return (\r\n      <>\r\n        <ListItem\r\n          style={{ paddingLeft: 30 }}\r\n          button\r\n          onClick={() => toggleMenu(menu.name)}\r\n        >\r\n          <ListItemText primary={menu.name} />\r\n          {open ? <ExpandLess /> : <ExpandMore />}\r\n        </ListItem>\r\n        <Collapse in={open} timeout='auto' unmountOnExit>\r\n          {menu.subMenus.map((subMenu) => renderSubMenus(subMenu))}\r\n        </Collapse>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const [alertDialog, setAlertDialog] = useState<AlertDataProps>({})\r\n\r\n  const handleArchieve = () => {\r\n    props.onToggle()\r\n    setAlertDialog({\r\n      open: false,\r\n    })\r\n    dispatch({ type: 'SET_IS_LOADING', payload: true })\r\n    onSignout()\r\n      .then(() => {\r\n        localStorage.removeItem('access_token')\r\n        dispatch({ type: 'SET_CURRENT_USER', payload: null })\r\n        dispatch({ type: 'SET_IS_LOADING', payload: false })\r\n      })\r\n      .catch(() => {\r\n        localStorage.removeItem('access_token')\r\n        dispatch({ type: 'SET_CURRENT_USER', payload: null })\r\n        dispatch({ type: 'SET_IS_LOADING', payload: false })\r\n      })\r\n  }\r\n\r\n  return (\r\n    <Drawer\r\n      anchor='left'\r\n      open={props.isActive}\r\n      ModalProps={{ onBackdropClick: () => props.onToggle() }}\r\n    >\r\n      <MyAlertDialog\r\n        onAgree={handleArchieve}\r\n        onDisagree={() => setAlertDialog({ open: false })}\r\n        data={alertDialog}\r\n      />\r\n      <Grid container justify='flex-end'>\r\n        <IconButton\r\n          onClick={() => props.onToggle()}\r\n          edge='start'\r\n          color='inherit'\r\n          aria-label='menu'\r\n        >\r\n          <ChevronLeftIcon />\r\n        </IconButton>\r\n      </Grid>\r\n      {user?.id && (\r\n        <>\r\n          <Grid\r\n            alignItems='flex-end'\r\n            justify='center'\r\n            // xs={12}\r\n            direction='row'\r\n            style={{ paddingLeft: 10, paddingRight: 10, width: 280 }}\r\n            container\r\n          >\r\n            <Grid item container xs={4}>\r\n              <MyAvatar width={70} height={70} src={user?.image_url} />\r\n            </Grid>\r\n            <Grid\r\n              style={{ paddingLeft: 10 }}\r\n              xs={8}\r\n              item\r\n              justify='flex-start'\r\n              container\r\n              direction='column'\r\n            >\r\n              <Typography variant='subtitle1' color='textPrimary'>\r\n                {`${user?.lastname}, ${user?.firstname} ${user?.middlename}`}\r\n              </Typography>\r\n              <Typography variant='subtitle1' color='textSecondary'>\r\n                {`${user?.branch?.name} - ${user?.role}`}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n          <Divider\r\n            style={{\r\n              marginTop: 10,\r\n              marginLeft: 10,\r\n              marginRight: 10,\r\n            }}\r\n          ></Divider>\r\n        </>\r\n      )}\r\n      <List\r\n        className={styles.root}\r\n        component='nav'\r\n        aria-labelledby='nested-list-subheader'\r\n      >\r\n        {state.currentUser?.role === 'admin' &&\r\n          adminMenus.map((menu) => renderMenus(menu))}\r\n        {state.currentUser?.role === 'cashier' &&\r\n          cashierMenus.map((menu) => renderSubMenus(menu))}\r\n      </List>\r\n\r\n      <Divider\r\n        style={{\r\n          marginTop: 10,\r\n          marginLeft: 10,\r\n          marginRight: 10,\r\n        }}\r\n      ></Divider>\r\n      <ListItem style={{ paddingLeft: 30 }} button>\r\n        <ListItemText\r\n          className={styles.logout}\r\n          primary='Logout'\r\n          onClick={() => {\r\n            setAlertDialog({\r\n              text: 'Are you sure do you want to logout?',\r\n              open: true,\r\n            })\r\n          }}\r\n        />\r\n      </ListItem>\r\n    </Drawer>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: 270,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  nested: {\r\n    paddingLeft: theme.spacing(2),\r\n  },\r\n  close: {\r\n    paddingTop: 5,\r\n    paddingRight: 5,\r\n  },\r\n  logout: {\r\n    marginTop: 10,\r\n    color: theme.palette.secondary.main,\r\n  },\r\n}))\r\n\r\nexport default MyDrawer\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MyAuthRoute\\index.tsx",["448"],"import User from 'models/user'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\n\r\nimport React, { useContext } from 'react'\r\nimport { Route, Redirect, RouteProps } from 'react-router-dom'\r\nimport { getCurrentUser } from 'utils/helper'\r\n\r\nconst AuthRoute: React.FC<RouteProps & { isAdmin?: boolean }> = ({\r\n  path,\r\n  component: Component,\r\n  render,\r\n  isAdmin = false,\r\n  ...rest\r\n}) => {\r\n  const [state] = useContext(GlobalContext)!\r\n\r\n  const currentUser: User | null = getCurrentUser()\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => {\r\n        if (!currentUser)\r\n          return (\r\n            <Redirect\r\n              to={{\r\n                pathname: '/signin',\r\n                state: { from: props.location },\r\n              }}\r\n            />\r\n          )\r\n\r\n        if (isAdmin && currentUser?.role !== 'admin')\r\n          return (\r\n            <Redirect\r\n              to={{\r\n                pathname: '/not-found',\r\n                state: { from: props.location },\r\n              }}\r\n            />\r\n          )\r\n        \r\n        return Component ? <Component {...props} /> : render?.(props)\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nexport default AuthRoute\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MyGuestRoute\\index.tsx",["449"],"import { GlobalContext } from 'providers/GlobalProvider'\r\n\r\nimport React, { useContext } from 'react'\r\nimport { Route, Redirect, RouteProps } from 'react-router-dom'\r\nimport { getCurrentUser } from 'utils/helper'\r\n\r\nconst AuthRoute: React.FC<RouteProps & { isAdmin?: boolean }> = ({\r\n  path,\r\n  component: Component,\r\n  render,\r\n  isAdmin = false,\r\n  ...rest\r\n}) => {\r\n  const [state] = useContext(GlobalContext)!\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => {\r\n        if (getCurrentUser())\r\n          return (\r\n            <Redirect\r\n              to={{\r\n                pathname: '/',\r\n                state: { from: props.location },\r\n              }}\r\n            />\r\n          )\r\n\r\n        return Component ? <Component {...props} /> : render?.(props)\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nexport default AuthRoute\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Employees\\EditEmployee\\index.tsx",["450","451","452","453"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport validator from 'validators/saveEmployeeValidator'\r\nimport MyForm, { MyFormProps } from 'components/common/MyForm'\r\nimport Employee from 'models/employee'\r\nimport { EmployeeContext } from 'providers/EmployeeProvider'\r\nimport { getEmployee, updateEmployee } from 'services/employeeService'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera'\r\nimport { postImage } from 'services/imageService'\r\nimport { getBranches } from 'services/branchService'\r\nimport { BranchContext } from 'providers/BranchProvider'\r\n\r\nexport interface EditUserProps {}\r\n\r\nconst EditEmployee: React.SFC<EditUserProps> = () => {\r\n  const [_, globalDispatch] = useContext(GlobalContext)!\r\n\r\n  const [employeeState, employeeDispatch] = useContext(EmployeeContext)!\r\n\r\n  const [branchState, branchDispatch] = useContext(BranchContext)!\r\n\r\n  const history = useHistory()\r\n\r\n  const params = useParams<{ id: string }>()\r\n\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  const [imageFile, setImageFile] = useState<HTMLImageElement | null>(null)\r\n\r\n  const [employee, setEmployee] = useState<Employee>({\r\n    address: '',\r\n    firstname: '',\r\n    middlename: '',\r\n    lastname: '',\r\n    contact: '',\r\n  })\r\n\r\n  useEffect(() => {\r\n    globalDispatch({ type: 'SET_TITLE', payload: 'Edit Employee' })\r\n    setIsLoading(true)\r\n    getEmployee(params.id).then((employee) => {\r\n      setEmployee(employee)\r\n      setIsLoading(false)\r\n    })\r\n    getBranches().then((branches) =>\r\n      branchDispatch({ type: 'ON_LOAD_BRANCHES', payload: branches })\r\n    )\r\n  }, [])\r\n\r\n  const onSubmit = async (employee: Employee) => {\r\n    return postImage(employee?.image!, (image_url: string) => {\r\n      delete employee.image\r\n\r\n      return updateEmployee({\r\n        ...employee,\r\n        image_url: !!image_url ? image_url : employee.image_url,\r\n      })\r\n        .then(() => {\r\n          globalDispatch({\r\n            type: 'SET_ALERT',\r\n            payload: { message: 'Successfully saved', type: 'success' },\r\n          })\r\n          globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.status === 400) {\r\n            globalDispatch({\r\n              type: 'SET_ALERT',\r\n              payload: { message: error.response.data.error, type: 'error' },\r\n            })\r\n          }\r\n          globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n        })\r\n    })\r\n  }\r\n\r\n  const formProps: MyFormProps<Employee> = {\r\n    state: [employee, setEmployee],\r\n    onSubmit,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ mySelect, myDateTimePicker, myButton, myControlledInput }) => (\r\n        <>\r\n          {myControlledInput({\r\n            label: 'Firstname',\r\n            value: employee.firstname,\r\n            name: 'firstname',\r\n          })}\r\n          {myControlledInput({\r\n            label: 'Middlename',\r\n            value: employee.middlename,\r\n            name: 'middlename',\r\n          })}\r\n          {myControlledInput({\r\n            label: 'Lastname',\r\n            value: employee.lastname,\r\n            name: 'lastname',\r\n          })}\r\n          {myControlledInput({\r\n            label: 'Contact Number',\r\n            value: employee.contact,\r\n            name: 'contact',\r\n          })}\r\n\r\n          {myControlledInput({\r\n            label: 'Address',\r\n            value: employee.address,\r\n            name: 'address',\r\n            isMultiline: true,\r\n          })}\r\n\r\n          {myDateTimePicker({\r\n            label: 'Birthdate',\r\n            value: employee.birthdate,\r\n            name: 'birthdate',\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Gender',\r\n            value: employee.gender,\r\n            name: 'gender',\r\n            options: [\r\n              { value: 'Male' },\r\n              { value: 'Female' },\r\n              { value: 'Other' },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Civil Status',\r\n            value: employee.civil,\r\n            name: 'civil',\r\n            labelWidth: 80,\r\n            options: [\r\n              { value: 'Single' },\r\n              { value: 'Married' },\r\n              { value: 'Widowed' },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Position',\r\n            value: employee.position,\r\n            name: 'position',\r\n            labelWidth: 55,\r\n            options: employeeState.positions.map((position) => ({\r\n              value: position.id,\r\n              name: position.name,\r\n            })),\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Branch',\r\n            value: employee.branch + '',\r\n            name: 'branch',\r\n            labelWidth: 55,\r\n            options: branchState.branches.map((branch) => ({\r\n              value: branch.id,\r\n              name: branch.name,\r\n            })),\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Status',\r\n            value: employee.status,\r\n            name: 'status',\r\n            labelWidth: 40,\r\n            options: [\r\n              { value: 'active', name: 'Active' },\r\n              { value: 'deactive', name: 'Deactive' },\r\n              { value: 'deceased', name: 'Deceased' },\r\n            ],\r\n          })}\r\n\r\n          <Grid\r\n            container\r\n            style={{\r\n              paddingLeft: 15,\r\n              paddingRight: 15,\r\n              marginBottom: 10,\r\n            }}\r\n            alignItems='center'\r\n            justify='space-between'\r\n            xs={12}\r\n          >\r\n            <Typography variant='subtitle1'>\r\n              {imageFile?.name || 'Select Photo'}\r\n            </Typography>\r\n            <>\r\n              <input\r\n                accept='image/*'\r\n                style={{\r\n                  display: 'none',\r\n                }}\r\n                name='image'\r\n                id='icon-button-file'\r\n                type='file'\r\n                onChange={(e: any) => {\r\n                  setImageFile(e.target.files[0])\r\n                }}\r\n              />\r\n              <label htmlFor='icon-button-file'>\r\n                <IconButton\r\n                  color='primary'\r\n                  aria-label='upload picture'\r\n                  component='span'\r\n                >\r\n                  <PhotoCamera />\r\n                </IconButton>\r\n              </label>\r\n            </>\r\n          </Grid>\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 10, paddingBottom: 5 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.goBack()}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton()}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\nexport default EditEmployee\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Dashboard\\index.tsx",["454","455"],"import { GlobalContext } from 'providers/GlobalProvider'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { BranchContext } from 'providers/BranchProvider'\r\nimport { getBranches } from 'services/branchService'\r\nimport {\r\n  getClientStats,\r\n  getStatistics,\r\n  getSalesStats,\r\n} from 'services/statisticService'\r\nimport StatisticGraph from './StatisticGraph'\r\nimport Fade from 'react-reveal/Fade'\r\nimport Scroll from 'react-scroll'\r\nimport { StatContext } from 'providers/StatisticProvider'\r\nimport { getCurrentUser } from 'utils/helper'\r\n\r\nexport interface DashboardProps {}\r\n\r\nconst Dashboard: React.SFC<DashboardProps> = () => {\r\n  const [state, dispatch] = useContext(GlobalContext)!\r\n\r\n  const [{ stat }, statDispatch] = useContext(StatContext)!\r\n\r\n  const [branchState, branchDispatch] = useContext(BranchContext)!\r\n\r\n  const scroll = Scroll.animateScroll\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'SET_TITLE', payload: 'Purple Supremacy' })\r\n\r\n    getBranches().then((branches) => {\r\n      branchDispatch({ type: 'ON_LOAD_BRANCHES', payload: branches })\r\n    })\r\n\r\n    if (getCurrentUser()?.role === 'admin') {\r\n      dispatch({ type: 'SET_IS_LOADING', payload: true })\r\n\r\n      getStatistics()\r\n        .then((data) => {\r\n          statDispatch({ type: 'ON_LOAD_STAT', payload: { ...stat, ...data } })\r\n\r\n          dispatch({ type: 'SET_IS_LOADING', payload: false })\r\n        })\r\n        .catch((error) => console.log(error))\r\n    }\r\n    scroll.scrollToTop({ duration: 1000 })\r\n  }, [])\r\n\r\n  const branches = [...branchState.branches]\r\n\r\n  branches.push({ id: 0, name: 'ALL BRANCHES' })\r\n\r\n  return (\r\n    <Fade delay={500}>\r\n      <Grid container justify='center' xs={12}>\r\n        <Grid\r\n          style={{ padding: 5, marginBottom: 5, paddingTop: 0 }}\r\n          container\r\n          xs={12}\r\n          direction='column'\r\n        >\r\n          <Typography component='h5' variant='h5' color='textPrimary'>\r\n            Welcome, {state.currentUser?.username || ''}\r\n          </Typography>\r\n          <Typography component='h5' variant='subtitle1' color='textSecondary'>\r\n            Today is {new Date(Date.now()).toDateString()}\r\n          </Typography>\r\n          {state?.currentUser?.role === 'admin' && (\r\n            <>\r\n              <Paper elevation={1} style={{ padding: 20, marginTop: 10 }}>\r\n                <Grid container xs={12}>\r\n                  <Grid\r\n                    alignItems='center'\r\n                    container\r\n                    direction='column'\r\n                    item\r\n                    xs={4}\r\n                  >\r\n                    <Typography\r\n                      component='h5'\r\n                      variant='subtitle1'\r\n                      color='textPrimary'\r\n                    >\r\n                      Draft\r\n                    </Typography>\r\n                    <Typography\r\n                      component='h5'\r\n                      variant='subtitle1'\r\n                      color='secondary'\r\n                    >\r\n                      {stat?.draft}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid\r\n                    alignItems='center'\r\n                    container\r\n                    direction='column'\r\n                    item\r\n                    xs={4}\r\n                  >\r\n                    <Typography\r\n                      component='h5'\r\n                      variant='subtitle1'\r\n                      color='textPrimary'\r\n                    >\r\n                      Lapsed\r\n                    </Typography>\r\n                    <Typography\r\n                      component='h5'\r\n                      variant='subtitle1'\r\n                      color='secondary'\r\n                    >\r\n                      {stat?.lapsed}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid\r\n                    alignItems='center'\r\n                    container\r\n                    direction='column'\r\n                    item\r\n                    xs={4}\r\n                  >\r\n                    <Typography\r\n                      component='h5'\r\n                      variant='subtitle1'\r\n                      color='textPrimary'\r\n                    >\r\n                      Near\r\n                    </Typography>\r\n                    <Typography\r\n                      component='h5'\r\n                      variant='subtitle1'\r\n                      color='secondary'\r\n                    >\r\n                      {stat?.near}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Paper>\r\n            </>\r\n          )}\r\n        </Grid>\r\n        {state?.currentUser?.role === 'admin' && (\r\n          <>\r\n            <Grid spacing={1} container xs={12}>\r\n              <Grid item xs={6} direction='column'>\r\n                <Paper elevation={2} style={{ padding: 20 }}>\r\n                  <Typography\r\n                    component='h5'\r\n                    variant='subtitle1'\r\n                    color='textPrimary'\r\n                  >\r\n                    Gross Sales\r\n                  </Typography>\r\n                  <Typography\r\n                    component='h5'\r\n                    variant='subtitle1'\r\n                    color='secondary'\r\n                  >\r\n                    ₱ {stat?.grossSales || 0}\r\n                  </Typography>\r\n                </Paper>\r\n              </Grid>\r\n              <Grid item xs={6} direction='column'>\r\n                <Paper elevation={2} style={{ padding: 20 }}>\r\n                  <Typography\r\n                    component='h5'\r\n                    variant='subtitle1'\r\n                    color='textPrimary'\r\n                  >\r\n                    Net Sales\r\n                  </Typography>\r\n                  <Typography\r\n                    component='h5'\r\n                    variant='subtitle1'\r\n                    color='secondary'\r\n                  >\r\n                    ₱ {stat?.netSales}\r\n                  </Typography>\r\n                </Paper>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Grid spacing={1} style={{ marginTop: 5 }} container xs={12}>\r\n              <Grid item xs={6} direction='column'>\r\n                <Paper elevation={2} style={{ padding: 20 }}>\r\n                  <Typography\r\n                    component='h5'\r\n                    variant='subtitle1'\r\n                    color='textPrimary'\r\n                  >\r\n                    Release\r\n                  </Typography>\r\n                  <Typography\r\n                    component='h5'\r\n                    variant='subtitle1'\r\n                    color='secondary'\r\n                  >\r\n                    ₱ {stat?.releaseCommissions}\r\n                  </Typography>\r\n                </Paper>\r\n              </Grid>\r\n              <Grid item xs={6} direction='column'>\r\n                <Paper elevation={2} style={{ padding: 20 }}>\r\n                  <Typography\r\n                    component='h5'\r\n                    variant='subtitle1'\r\n                    color='textPrimary'\r\n                  >\r\n                    Unrelease\r\n                  </Typography>\r\n                  <Typography\r\n                    component='h5'\r\n                    variant='subtitle1'\r\n                    color='secondary'\r\n                  >\r\n                    ₱ {stat?.unreleaseCommissions}\r\n                  </Typography>\r\n                </Paper>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid\r\n              style={{ padding: 5, marginTop: 5 }}\r\n              item\r\n              xs={12}\r\n              direction='column'\r\n              alignItems='center'\r\n            >\r\n              <Paper elevation={2} style={{ padding: 20 }}>\r\n                <Grid container xs={12} direction='column' alignItems='center'>\r\n                  <Typography\r\n                    component='h5'\r\n                    variant='subtitle1'\r\n                    color='textPrimary'\r\n                  >\r\n                    Clients\r\n                  </Typography>\r\n                  <Typography\r\n                    component='h5'\r\n                    variant='subtitle1'\r\n                    color='secondary'\r\n                  >\r\n                    {stat?.totalClients}\r\n                  </Typography>\r\n                </Grid>\r\n              </Paper>\r\n            </Grid>\r\n\r\n            <Divider\r\n              style={{ width: '100%', marginBottom: 10, marginTop: 20 }}\r\n            ></Divider>\r\n            <StatisticGraph\r\n              title='client/s'\r\n              getData={getClientStats}\r\n              branches={branches}\r\n            />\r\n            <Divider\r\n              style={{ width: '100%', marginBottom: 10, marginTop: 20 }}\r\n            ></Divider>\r\n            <StatisticGraph\r\n              title='sales'\r\n              getData={getSalesStats}\r\n              branches={branches}\r\n            />\r\n          </>\r\n        )}\r\n      </Grid>\r\n    </Fade>\r\n  )\r\n}\r\n\r\nexport default Dashboard\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\utils\\http.ts",["456","457"],"import axios, { AxiosError } from 'axios'\r\nimport { apiUrlProd, apiUrlDev, apiUrlMobile } from 'configs/index.json'\r\nimport createAuthRefreshInterceptor from 'axios-auth-refresh'\r\n\r\n//intercept requests\r\naxios.interceptors.request.use((config) => {\r\n  config.baseURL =\r\n    process.env.NODE_ENV === 'development' ? apiUrlDev : apiUrlProd\r\n\r\n  const access_token = localStorage.getItem('access_token')\r\n\r\n  if (access_token) {\r\n    config.headers.Authorization = `Bearer ${access_token}`\r\n  }\r\n  config.withCredentials = true\r\n\r\n  return config\r\n})\r\n\r\naxios.interceptors.response.use(\r\n  (response) => response,\r\n  (error: AxiosError) => {\r\n    if (\r\n      error.message === 'Network Error' ||\r\n      error.message === 'Internal Server Error'\r\n    ) {\r\n      throw Error(error.message)\r\n    }\r\n\r\n    throw error\r\n  }\r\n)\r\n\r\ncreateAuthRefreshInterceptor(\r\n  axios,\r\n  (failedRequest) => {\r\n    return axios\r\n      .get('/auth/refresh-token')\r\n      .then(({ data }) => {\r\n        localStorage.setItem('access_token', data.access_token)\r\n        return Promise.resolve()\r\n      })\r\n      .catch((error) => {\r\n        if (error.response.status === 406) {\r\n          localStorage.removeItem('access_token')\r\n          window.location.href = '/signin'\r\n        }\r\n        console.log(error.response)\r\n      })\r\n  },\r\n  {\r\n    statusCodes: [403],\r\n    // pauseInstanceWhileRefreshing: true,\r\n  }\r\n)\r\n\r\nexport default {\r\n  get: axios.get,\r\n  post: axios.post,\r\n  put: axios.put,\r\n  delete: axios.delete,\r\n  axios: axios.create(),\r\n}\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Clients\\EditClient\\index.tsx",["458","459","460","461"],"import { useHistory, useParams } from 'react-router-dom'\r\nimport { useContext, useEffect, useState } from 'react'\r\nimport MyForm, { MyFormProps } from 'components/common/MyForm'\r\nimport validator from 'validators/saveProfileValidator'\r\nimport Profile from 'models/profile'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Button from '@material-ui/core/Button'\r\nimport { ClientContext } from 'providers/ClientProvider'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { postImage } from 'services/imageService'\r\nimport { getClient, updateClient } from 'services/clientService'\r\n\r\nexport interface EditClientProps {}\r\n\r\nconst EditClient: React.SFC<EditClientProps> = () => {\r\n  const history = useHistory()\r\n  const params = useParams<{ id: string }>()\r\n\r\n  const [_, globalDispatch] = useContext(GlobalContext)!\r\n\r\n  const [clientState, clientDispatch] = useContext(ClientContext)!\r\n\r\n  const [imageFile, setImageFile] = useState<HTMLImageElement | null>(null)\r\n\r\n  const [profile, setProfile] = useState<Profile>({\r\n    firstname: '',\r\n    middlename: '',\r\n    lastname: '',\r\n    address: '',\r\n    contact: '',\r\n  })\r\n\r\n  useEffect(() => {\r\n    globalDispatch({ type: 'SET_TITLE', payload: 'Edit Client Profile' })\r\n    getClient(+params.id).then((client) =>\r\n      setProfile({ ...client.profile, id: client.id })\r\n    )\r\n  }, [])\r\n\r\n  const onSubmit = async (profile: Profile) => {\r\n    return postImage(profile?.image!, (image_url: string) => {\r\n      delete profile.image\r\n\r\n      return updateClient({\r\n        ...profile,\r\n        image_url: !!image_url ? image_url : profile.image_url,\r\n      })\r\n        .then(() => {\r\n          globalDispatch({\r\n            type: 'SET_ALERT',\r\n            payload: { message: 'Successfully saved', type: 'success' },\r\n          })\r\n          globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.status === 400) {\r\n            globalDispatch({\r\n              type: 'SET_ALERT',\r\n              payload: { message: error.response.data.error, type: 'error' },\r\n            })\r\n          }\r\n          globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n        })\r\n    })\r\n  }\r\n\r\n  const formProps: MyFormProps<Profile> = {\r\n    state: [profile, setProfile],\r\n    onSubmit,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myControlledInput, mySelect, myDateTimePicker, myButton }) => (\r\n        <>\r\n          {myControlledInput({\r\n            label: 'Firstname',\r\n            value: profile?.firstname,\r\n            name: 'firstname',\r\n          })}\r\n          {myControlledInput({\r\n            label: 'Middlename',\r\n            value: profile?.middlename,\r\n            name: 'middlename',\r\n          })}\r\n          {myControlledInput({\r\n            label: 'Lastname',\r\n            value: profile?.lastname,\r\n            name: 'lastname',\r\n          })}\r\n          {myControlledInput({\r\n            label: 'Contact Number',\r\n            value: profile?.contact,\r\n            name: 'contact',\r\n          })}\r\n\r\n          {myControlledInput({\r\n            label: 'Address',\r\n            value: profile?.address,\r\n            name: 'address',\r\n            isMultiline: true,\r\n          })}\r\n          {mySelect({\r\n            label: 'Gender',\r\n            value: profile?.gender,\r\n            name: 'gender',\r\n            options: [\r\n              { value: 'Male' },\r\n              { value: 'Female' },\r\n              { value: 'Other' },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Civil Status',\r\n            value: profile?.civil,\r\n            name: 'civil',\r\n            labelWidth: 80,\r\n            options: [\r\n              { value: 'Single' },\r\n              { value: 'Married' },\r\n              { value: 'Widowed' },\r\n            ],\r\n          })}\r\n\r\n          {myDateTimePicker({\r\n            label: 'Birthdate',\r\n            value: profile?.birthdate,\r\n            name: 'birthdate',\r\n          })}\r\n\r\n          <Grid\r\n            container\r\n            style={{\r\n              paddingLeft: 15,\r\n              paddingRight: 15,\r\n              marginBottom: 10,\r\n            }}\r\n            alignItems='center'\r\n            justify='space-between'\r\n            xs={12}\r\n          >\r\n            <Typography variant='subtitle1'>\r\n              {imageFile?.name || 'Select Photo'}\r\n            </Typography>\r\n            <>\r\n              <input\r\n                accept='image/*'\r\n                style={{\r\n                  display: 'none',\r\n                }}\r\n                name='image'\r\n                id='icon-button-file'\r\n                type='file'\r\n                onChange={(e: any) => {\r\n                  setImageFile(e.target.files[0])\r\n                }}\r\n              />\r\n              <label htmlFor='icon-button-file'>\r\n                <IconButton\r\n                  color='primary'\r\n                  aria-label='upload picture'\r\n                  component='span'\r\n                >\r\n                  <PhotoCamera />\r\n                </IconButton>\r\n              </label>\r\n            </>\r\n          </Grid>\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 10, paddingBottom: 5 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.goBack()}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton()}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\n\r\nexport default EditClient\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Clients\\NewClient\\index.tsx",["462","463","464","465"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Profile from 'models/profile'\r\nimport Client from 'models/client'\r\nimport Commissioner from 'models/commissioner'\r\nimport { ClientStepOne } from './ClientStepOne'\r\nimport { ClientStepTwo } from './ClientStepTwo'\r\nimport MyStepper, { useStepper } from 'components/common/MyStepper'\r\nimport { ClientStepThree } from './ClientStepThree'\r\nimport Scroll from 'react-scroll'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport Payment from 'models/payment'\r\nimport { postImage } from 'services/imageService'\r\nimport { saveClient } from 'services/clientService'\r\nimport { getEmployees } from 'services/employeeService'\r\nimport Employee from 'models/employee'\r\nimport { getBranches } from 'services/branchService'\r\nimport { BranchContext } from 'providers/BranchProvider'\r\nimport { getUnread } from 'services/notificationService'\r\nimport { NotificationContext } from 'providers/NotificationProvider'\r\n\r\nexport interface NewClientProps {}\r\n\r\nconst NewClient: React.SFC<NewClientProps> = () => {\r\n  const [{ currentUser }, globalDispatch] = useContext(GlobalContext)!\r\n  const [notifState, notifDispatch] = useContext(NotificationContext)!\r\n\r\n  const scroll = Scroll.animateScroll\r\n\r\n  const [employees, setEmployees] = useState<Employee[]>([])\r\n\r\n  useEffect(() => {\r\n    globalDispatch({ type: 'SET_TITLE', payload: 'Client Registration' })\r\n    scroll.scrollToTop({ duration: 500 })\r\n    getEmployees({ category: 'active' }).then((employees) => {\r\n      setEmployees(employees)\r\n    })\r\n  }, [])\r\n\r\n  const history = useHistory()\r\n\r\n  const stepper = useStepper([\r\n    'Create Profile Account',\r\n    'Select All Commissioners',\r\n    'Select Plan And Payment',\r\n  ])\r\n\r\n  const [profile, setProfile] = React.useState<Profile>({})\r\n\r\n  const [commissioner, setCommissioner] = React.useState<Commissioner>({\r\n    position: 'sales_agent',\r\n  })\r\n\r\n  const [client, setClient] = React.useState<Client & Payment>({\r\n    years_to_pay: 5,\r\n    created_at: new Date(Date.now()),\r\n  })\r\n\r\n  const onNextOne = async (profile: Profile) => {\r\n    scroll.scrollToTop({ duration: 500 })\r\n    console.log('profile', profile)\r\n    setProfile(profile)\r\n    stepper.handleNext()\r\n  }\r\n\r\n  const onNextTwo = async (commissioner: Commissioner) => {\r\n    const insured_employee = commissioner[commissioner.position] ?? 0\r\n\r\n    if (!insured_employee) {\r\n      globalDispatch({\r\n        type: 'SET_ALERT',\r\n        payload: {\r\n          message:\r\n            'Sales Agent is not present! Please select another employee.',\r\n          type: 'error',\r\n        },\r\n      })\r\n\r\n      return\r\n    }\r\n\r\n    scroll.scrollToTop({ duration: 500 })\r\n\r\n    setClient((client) => ({ ...client, insured_employee }))\r\n\r\n    setCommissioner(commissioner)\r\n\r\n    stepper.handleNext()\r\n\r\n    console.log(commissioner)\r\n  }\r\n\r\n  const onNextThree = async (client: Client & Payment) => {\r\n    scroll.scrollToTop({ duration: 500 })\r\n\r\n    const transaction = {\r\n      ...profile,\r\n      ...client,\r\n      ...commissioner,\r\n      branch: getBranchId(+commissioner?.branch_manager!),\r\n    }\r\n\r\n    return postImage(transaction?.image!, (image_url: string) => {\r\n      transaction.image_url = image_url\r\n      delete transaction.image\r\n\r\n      return saveClient(transaction)\r\n        .then(() => {\r\n          globalDispatch({\r\n            type: 'SET_ALERT',\r\n            payload: { message: 'Successfully added', type: 'success' },\r\n          })\r\n          globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n          getUnread().then((data) => {\r\n            notifDispatch({ type: 'ON_LOAD_UNREAD', payload: data.count })\r\n          })\r\n          stepper.handleNext()\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.status === 400) {\r\n            globalDispatch({\r\n              type: 'SET_ALERT',\r\n              payload: { message: error.response.data.error, type: 'error' },\r\n            })\r\n            return\r\n          }\r\n          globalDispatch({\r\n            type: 'SET_ALERT',\r\n            payload: { message: error.message, type: 'error' },\r\n          })\r\n          globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n        })\r\n    })\r\n  }\r\n\r\n  const getBranchId = (employeeId: number) => {\r\n    return employees.filter((employee) => employee.id === employeeId)[0].branch\r\n      ?.id\r\n  }\r\n\r\n  const onAddNew = () => {\r\n    stepper.handleReset()\r\n    setProfile({})\r\n    setCommissioner({\r\n      position: 'sales_agent',\r\n    })\r\n    setClient({\r\n      years_to_pay: 5,\r\n      created_at: new Date(Date.now()),\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <MyStepper {...stepper} />\r\n      {stepper.activeStep === 0 && (\r\n        <ClientStepOne onNext={onNextOne} state={[profile, setProfile]} />\r\n      )}\r\n      {stepper.activeStep === 1 && (\r\n        <ClientStepTwo\r\n          employees={employees}\r\n          onBack={() => stepper.handleBack()}\r\n          onNext={onNextTwo}\r\n          state={[commissioner, setCommissioner]}\r\n        />\r\n      )}\r\n      {stepper.activeStep === 2 && (\r\n        <ClientStepThree\r\n          onBack={() => stepper.handleBack()}\r\n          onNext={onNextThree}\r\n          state={[client, setClient]}\r\n        />\r\n      )}\r\n\r\n      {stepper.activeStep === 3 && (\r\n        <Grid container xs={12} direction='column' alignItems='center'>\r\n          <Typography component='h6' variant='subtitle1'>\r\n            All Steps Completed!\r\n          </Typography>\r\n          <Grid spacing={2} item container xs={12}>\r\n            <Grid item xs={6}>\r\n              {currentUser?.role === 'admin' && (\r\n                <Button\r\n                  onClick={() => history.replace('/clients')}\r\n                  style={{ marginTop: 10 }}\r\n                  fullWidth\r\n                  variant='contained'\r\n                  color='default'\r\n                >\r\n                  CLIENT LIST\r\n                </Button>\r\n              )}\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={onAddNew}\r\n                style={{ marginTop: 10 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='primary'\r\n              >\r\n                ADD NEW\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default NewClient\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Payments\\index.tsx",["466","467"],"import { useContext, useEffect, useState } from 'react'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport MyChips, { MyChip } from 'components/common/MyChips'\r\nimport MySearchField from 'components/common/MySearchField'\r\nimport { PaymentContext } from 'providers/PaymentProvider'\r\nimport { getPayments } from 'services/paymentService'\r\nimport PaymentCard from './PaymentCard'\r\nimport Pagination from '@material-ui/lab/Pagination'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport qs from 'query-string'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport MySkeletonCards from 'components/common/MySkeletonCards'\r\n\r\nexport interface PaymentHistoryProps {}\r\n\r\nconst PaymentHistory: React.SFC<PaymentHistoryProps> = () => {\r\n  const [_, globalDispatch] = useContext(GlobalContext)!\r\n  const [paymentState, paymentDispatch] = useContext(PaymentContext)!\r\n\r\n  const [chip, setChip] = useState<MyChip>({ value: '', name: 'All' })\r\n\r\n  const [page, setPage] = useState(1)\r\n\r\n  const location = useLocation()\r\n\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    globalDispatch({ type: 'SET_TITLE', payload: 'Payment History' })\r\n\r\n    const { page, search } = qs.parse(location.search)\r\n    const currentPage = !!page ? +page : 1\r\n    setPage(currentPage)\r\n    onLoad({\r\n      page: currentPage,\r\n      search: (search as string) || '',\r\n    })\r\n    return () => {\r\n      globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n    }\r\n  }, [])\r\n\r\n  const chips = [{ value: '', name: 'All' }]\r\n\r\n  const onPage = (e: any, page: number) => {\r\n    paymentDispatch({ type: 'SET_TOTAL', payload: 0 })\r\n    setPage(page)\r\n    onLoad({ page, category: chip.value })\r\n    history.push('/payments?page=' + page)\r\n  }\r\n\r\n  interface LoadProps {\r\n    search?: string\r\n    category?: string\r\n    page: number\r\n  }\r\n\r\n  const onLoad = ({ page, search, category }: LoadProps) => {\r\n    globalDispatch({ type: 'SET_IS_LOADING', payload: true })\r\n    paymentDispatch({ type: 'SET_IS_LOADING', payload: true })\r\n    getPayments({ page, search, category })\r\n      .then(({ payments, total, pages }) => {\r\n        paymentDispatch({\r\n          type: 'ON_LOAD_PAYMENTS',\r\n          payload: { payments, total, pages },\r\n        })\r\n        globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n      })\r\n      .catch(() => globalDispatch({ type: 'SET_IS_LOADING', payload: false }))\r\n  }\r\n\r\n  const onSearch = (search: string) => {\r\n    setChip({ value: '', name: 'All' })\r\n    onLoad({ page: 1, search })\r\n    setPage(1)\r\n  }\r\n\r\n  const onFilter = (chip: MyChip) => {\r\n    paymentDispatch({ type: 'SET_TOTAL', payload: 0 })\r\n    setChip(chip)\r\n    onLoad({ page: 1, category: chip.value })\r\n    setPage(1)\r\n    history.push('/payments?page=' + 1)\r\n  }\r\n\r\n  const isLoading = paymentState.isLoading && !paymentState.payments.length\r\n\r\n  return (\r\n    <>\r\n      <MySearchField\r\n        labelWidth={160}\r\n        label='Name / Code / Branch'\r\n        onSearch={onSearch}\r\n        style={{ marginBottom: 15 }}\r\n      />\r\n      <MyChips\r\n        count={paymentState.total}\r\n        onChipSelected={onFilter}\r\n        active={chip}\r\n        chips={chips}\r\n      />\r\n      {isLoading && <MySkeletonCards />}\r\n      {!isLoading && (\r\n        <Grid\r\n          container\r\n          spacing={2}\r\n          direction='column'\r\n          justify='flex-start'\r\n          alignItems='center'\r\n        >\r\n          {paymentState.payments.map((payment) => (\r\n            <Grid key={payment.id} item xs={12}>\r\n              <PaymentCard payment={payment} />\r\n            </Grid>\r\n          ))}\r\n          <Pagination\r\n            style={{ marginTop: 15, marginBottom: 15 }}\r\n            variant='outlined'\r\n            color='primary'\r\n            count={paymentState.pages}\r\n            siblingCount={0}\r\n            page={page}\r\n            onChange={onPage}\r\n          />\r\n        </Grid>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PaymentHistory\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Employees\\ViewEmployee\\index.tsx",["468","469","470","471","472"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport Link from '@material-ui/core/Link'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport Chip from '@material-ui/core/Chip'\r\nimport Badge from '@material-ui/core/Badge'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport { calculateAge, capitalize } from 'utils/helper'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\r\nimport MyCard from 'components/common/MyCard'\r\nimport Employee from 'models/employee'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport Client from 'models/client'\r\nimport MyAvatar from 'components/common/MyAvatar'\r\nimport { getEmployee } from 'services/employeeService'\r\nimport MySkeletonCard from 'components/common/MySkeletonCard'\r\nimport MyMiniCards from 'components/common/MyMiniCards'\r\nimport MySkeletonMiniCards from 'components/common/MySkeletonMiniCards'\r\nimport { EmployeeContext } from 'providers/EmployeeProvider'\r\n\r\nexport interface ViewUserProps {\r\n  title: string\r\n}\r\n\r\nconst ViewEmployee: React.SFC<ViewUserProps> = (props) => {\r\n  const history = useHistory()\r\n  const styles = useStyles()\r\n  const params = useParams<{ id: string }>()\r\n  const [_, dispatch] = useContext(GlobalContext)!\r\n  const [employeeState] = useContext(EmployeeContext)!\r\n\r\n  const [employee, setEmployee] = useState<Employee>()\r\n\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'SET_TITLE', payload: 'View Employee' })\r\n    setIsLoading(true)\r\n    getEmployee(params.id).then((employee) => {\r\n      setEmployee(employee)\r\n      setIsLoading(false)\r\n    })\r\n  }, [])\r\n\r\n  const detail = (title: string, subtitle: any) => (\r\n    <Grid container alignItems='center' direction='column' item xs={6}>\r\n      <Typography component='h6' variant='h6'>\r\n        {title}\r\n      </Typography>\r\n      <Typography variant='subtitle1' color='textSecondary'>\r\n        {subtitle}\r\n      </Typography>\r\n    </Grid>\r\n  )\r\n\r\n  const handleSelected = (client: Client) => {\r\n    history.push('/clients/' + client.id)\r\n  }\r\n\r\n  const branch = employeeState.branches.filter(\r\n    (branch) => branch.id === employee?.branch\r\n  )[0]\r\n\r\n  const position = employeeState.positions.filter(\r\n    (position) => position.id === employee?.position\r\n  )[0]\r\n\r\n  const renderClients = (clients: Client[]) => {\r\n    return (\r\n      <>\r\n        <Grid\r\n          container\r\n          style={{ marginTop: 20, marginBottom: 10 }}\r\n          xs={12}\r\n          justify='space-between'\r\n        >\r\n          {!!count && (\r\n            <Badge badgeContent={count! >= 100 ? '99+' : count} color='primary'>\r\n              <Typography variant='subtitle1'>Clients</Typography>\r\n            </Badge>\r\n          )}\r\n          {/* <Link\r\n            component='button'\r\n            variant='body1'\r\n            onClick={() => history.push('/clients')}\r\n          >\r\n            View All({clients.length})\r\n          </Link> */}\r\n        </Grid>\r\n        <MyMiniCards onSelected={handleSelected} items={clients}>\r\n          {({ renderCards, item }) => (\r\n            <>\r\n              {renderCards({\r\n                item,\r\n                title: `${item.lastname}, ${item.firstname}`,\r\n                subtitle: item.code!,\r\n                src: item.image_url,\r\n              })}\r\n            </>\r\n          )}\r\n        </MyMiniCards>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const count = employee?.clients?.length || 0\r\n\r\n  return (\r\n    <>\r\n      {isLoading && (\r\n        <>\r\n          <MySkeletonCard />\r\n          <Grid container style={{ marginBottom: 10 }} xs={12}>\r\n            <Badge badgeContent={count! >= 100 ? '99+' : count} color='primary'>\r\n              <Typography variant='subtitle1'>Clients</Typography>\r\n            </Badge>\r\n            {/* <Link component='button' variant='body1'>\r\n                View All({employee?.clients?.length})\r\n              </Link> */}\r\n            <MySkeletonMiniCards />\r\n          </Grid>\r\n        </>\r\n      )}\r\n      {!isLoading && employee && (\r\n        <>\r\n          <MyCard title={'Employee#' + employee.id}>\r\n            <CardContent>\r\n              <Grid container xs={12} justify='space-between'>\r\n                <Grid\r\n                  style={{ paddingLeft: 10 }}\r\n                  container\r\n                  direction='column'\r\n                  item\r\n                  xs={7}\r\n                  justify='flex-start'\r\n                >\r\n                  <Typography component='h6' variant='h6'>\r\n                    {`${employee.lastname}, ${employee.firstname} ${employee.middlename}`}\r\n                  </Typography>\r\n                  <Typography variant='subtitle1' color='textSecondary'>\r\n                    {position?.name}\r\n                  </Typography>\r\n                  <Typography variant='subtitle1' color='textSecondary'>\r\n                    {branch?.name}\r\n                  </Typography>\r\n                  <Grid item xs={1}>\r\n                    <Chip\r\n                      style={{ marginTop: 5 }}\r\n                      size='small'\r\n                      label={employee.status}\r\n                      variant='default'\r\n                      color={\r\n                        employee.status !== 'active' ? 'secondary' : 'primary'\r\n                      }\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid\r\n                  container\r\n                  item\r\n                  xs={5}\r\n                  justify='center'\r\n                  alignItems='center'\r\n                >\r\n                  <MyAvatar src={employee.image_url} />\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n            <Divider style={{ marginLeft: 20, marginRight: 20 }}></Divider>\r\n            <CardContent>\r\n              <Grid spacing={1} container xs={12} style={{ paddingLeft: 10 }}>\r\n                {detail('Gender', employee.gender)}\r\n                {detail('Civil Status', employee.civil)}\r\n                {detail('Contact', employee.contact)}\r\n                {detail(\r\n                  'Age',\r\n                  employee.birthdate ? calculateAge(employee.birthdate) : 'N/A'\r\n                )}\r\n                {\r\n                  <Grid\r\n                    container\r\n                    alignItems='center'\r\n                    direction='column'\r\n                    item\r\n                    xs={12}\r\n                  >\r\n                    <Typography component='h6' variant='h6'>\r\n                      Address\r\n                    </Typography>\r\n                    <Typography variant='subtitle1' color='textSecondary'>\r\n                      {employee.address}\r\n                    </Typography>\r\n                  </Grid>\r\n                }\r\n              </Grid>\r\n            </CardContent>\r\n          </MyCard>\r\n          {renderClients(employee.clients!)}\r\n          <Grid\r\n            style={{\r\n              paddingLeft: 18,\r\n              paddingTop: 10,\r\n              paddingBottom: 5,\r\n            }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.goBack()}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.push('/employees/edit/' + employee.id)}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='primary'\r\n              >\r\n                EDIT\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    avatar: {\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n  })\r\n)\r\n\r\nexport default ViewEmployee\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Clients\\index.tsx",["473","474"],"import MySearchField from 'components/common/MySearchField'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\r\n\r\nimport Pagination from '@material-ui/lab/Pagination'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Fab from '@material-ui/core/Fab'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport ClientCard from './ClientCard'\r\nimport { useContext, useEffect, useState } from 'react'\r\nimport { getClients, ClientProps, archiveClient } from 'services/clientService'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport { ClientContext } from 'providers/ClientProvider'\r\nimport MySkeletonCards from 'components/common/MySkeletonCards'\r\nimport MyChips, { MyChip } from 'components/common/MyChips'\r\nimport MyAlertDialog, { AlertDataProps } from 'components/common/MyAlertDialog'\r\n\r\nimport qs from 'query-string'\r\nimport Scroll from 'react-scroll'\r\nimport Client from 'models/client'\r\n\r\nexport interface ClientsProps {}\r\n\r\nconst Clients: React.SFC<ClientsProps> = () => {\r\n  const [clientState, clientDispatch] = useContext(ClientContext)!\r\n\r\n  const [globalState, globalDispatch] = useContext(GlobalContext)!\r\n\r\n  const styles = useStyles()\r\n\r\n  const location = useLocation()\r\n\r\n  const scroll = Scroll.animateScroll\r\n\r\n  const history = useHistory()\r\n\r\n  const [page, setPage] = useState(1)\r\n\r\n  const [chip, setChip] = useState<MyChip>({ value: '', name: 'All' })\r\n\r\n  useEffect(() => {\r\n    globalDispatch({ type: 'SET_TITLE', payload: 'Client Management' })\r\n    const { page, search } = qs.parse(location.search)\r\n    const currentPage = !!page ? +page : 1\r\n    setPage(currentPage)\r\n    onLoad({\r\n      page: currentPage,\r\n      search: (search as string) || '',\r\n    })\r\n    return () => {\r\n      globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n    }\r\n  }, [])\r\n\r\n  const onLoad = ({ page, category, search }: ClientProps) => {\r\n    clientDispatch({ type: 'SET_IS_LOADING', payload: true })\r\n    globalDispatch({ type: 'SET_IS_LOADING', payload: true })\r\n    getClients({ page, category, search }).then(({ clients, pages, total }) => {\r\n      clientDispatch({\r\n        type: 'ON_LOAD_CLIENTS',\r\n        payload: { clients, pages, total },\r\n      })\r\n      globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n      scroll.scrollToTop({ duration: 1000 })\r\n    })\r\n  }\r\n\r\n  const onFilter = (chip: MyChip) => {\r\n    clientDispatch({ type: 'SET_TOTAL', payload: 0 })\r\n    setChip(chip)\r\n    setPage(1)\r\n    onLoad({ page: 1, category: chip.value })\r\n    if (!!chip.value) {\r\n      history.push('/clients')\r\n    }\r\n  }\r\n\r\n  const onPage = (e: any, page: number) => {\r\n    clientDispatch({ type: 'SET_TOTAL', payload: 0 })\r\n    setPage(page)\r\n    onLoad({ page, category: chip.value })\r\n    history.push('/clients?page=' + page)\r\n  }\r\n\r\n  const onSearch = (search: string) => {\r\n    setChip({ value: '', name: 'All' })\r\n    setPage(1)\r\n    onLoad({ page: 1, search })\r\n    history.push('/clients?search=' + search)\r\n  }\r\n\r\n  const isLoading = clientState.isLoading && !clientState.clients.length\r\n\r\n  const chips: MyChip[] = [\r\n    { value: '', name: 'All' },\r\n    { value: 'lapse', name: 'Lapsed' },\r\n    { value: 'near', name: 'Near' },\r\n    { value: 'on', name: 'On Commission' },\r\n    { value: 'no', name: 'No Commission' },\r\n    { value: 'installment', name: 'Installment' },\r\n    { value: 'fullpayment', name: 'Fullpayment' },\r\n  ]\r\n\r\n  const [alertDialog, setAlertDialog] = useState<AlertDataProps>({})\r\n\r\n  const [client, setClient] = useState<Client>()\r\n\r\n  const handleSelectedClient = (client: Client) => {\r\n    setClient(client)\r\n    setAlertDialog({\r\n      open: true,\r\n      text: `Are you sure you want to archive ${client.lastname}, ${client.firstname} ${client.middlename}?`,\r\n      description:\r\n        'Archiving will not permanently delete the client account in the database.',\r\n    })\r\n  }\r\n\r\n  const handleArchieve = () => {\r\n    archiveClient(client?.id!).then((data) => {\r\n      onLoad({\r\n        page,\r\n      })\r\n      globalDispatch({\r\n        type: 'SET_ALERT',\r\n        payload: { message: 'Successfully archived', type: 'success' },\r\n      })\r\n      setChip({ value: '', name: 'All' })\r\n    })\r\n    setAlertDialog({\r\n      open: false,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <MyAlertDialog\r\n        onAgree={handleArchieve}\r\n        onDisagree={() => setAlertDialog({ open: false })}\r\n        data={alertDialog}\r\n      />\r\n      <MySearchField\r\n        labelWidth={160}\r\n        label='Name / Code / Branch'\r\n        onSearch={onSearch}\r\n        style={{ marginBottom: 5 }}\r\n      />\r\n\r\n      <MyChips\r\n        count={clientState.total}\r\n        onChipSelected={onFilter}\r\n        active={chip}\r\n        chips={chips}\r\n      ></MyChips>\r\n\r\n      {isLoading && <MySkeletonCards />}\r\n      {!isLoading && (\r\n        <Grid\r\n          container\r\n          spacing={2}\r\n          direction='column'\r\n          justify='flex-start'\r\n          alignItems='center'\r\n        >\r\n          {clientState.clients.map((client) => (\r\n            <Grid key={client.id} item xs={12}>\r\n              <ClientCard\r\n                onArchieve={handleSelectedClient}\r\n                key={client.id}\r\n                client={client}\r\n              />\r\n            </Grid>\r\n          ))}\r\n          <Pagination\r\n            style={{ marginTop: 15, marginBottom: 15 }}\r\n            variant='outlined'\r\n            color='primary'\r\n            count={clientState.pages}\r\n            siblingCount={0}\r\n            page={page}\r\n            onChange={onPage}\r\n          />\r\n        </Grid>\r\n      )}\r\n\r\n      <Fab\r\n        onClick={() => history.push('/clients/new')}\r\n        className={styles.fab}\r\n        color='primary'\r\n        aria-label='add'\r\n      >\r\n        <AddIcon />\r\n      </Fab>\r\n    </>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    fab: {\r\n      position: 'fixed',\r\n      bottom: 60,\r\n      right: 20,\r\n    },\r\n  })\r\n)\r\n\r\nexport default Clients\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Branches\\NewBranch\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Branches\\index.tsx",["475","476"],"import Grid from '@material-ui/core/Grid'\r\nimport { BranchContext } from 'providers/BranchProvider'\r\nimport { useContext, useEffect, useState } from 'react'\r\nimport { archiveBranch, getBranches } from 'services/branchService'\r\nimport BranchCard from './BranchCard'\r\nimport Fab from '@material-ui/core/Fab'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport { useHistory } from 'react-router-dom'\r\nimport MySearchField from 'components/common/MySearchField'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport MyAlertDialog, { AlertDataProps } from 'components/common/MyAlertDialog'\r\nimport Branch from 'models/branch'\r\nimport MySkeletonCards from 'components/common/MySkeletonCards'\r\n\r\nexport interface BranchesProps {}\r\n\r\nconst Branches: React.SFC<BranchesProps> = () => {\r\n  const [branchState, branchDispatch] = useContext(BranchContext)!\r\n\r\n  const [globalState, globalDispatch] = useContext(GlobalContext)!\r\n\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    globalDispatch({ type: 'SET_TITLE', payload: 'Branch Management' })\r\n    onLoad()\r\n    return () => {\r\n      globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n    }\r\n  }, [])\r\n\r\n  const onLoad = (search?: string) => {\r\n    globalDispatch({ type: 'SET_IS_LOADING', payload: true })\r\n    branchDispatch({ type: 'SET_IS_LOADING', payload: true })\r\n    getBranches(search)\r\n      .then((branches) => {\r\n        branchDispatch({\r\n          type: 'ON_LOAD_BRANCHES',\r\n          payload: branches,\r\n        })\r\n        globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n      })\r\n      .catch(() => globalDispatch({ type: 'SET_IS_LOADING', payload: false }))\r\n  }\r\n\r\n  const onSearch = (value: string) => {\r\n    onLoad(value)\r\n  }\r\n\r\n  const [alertDialog, setAlertDialog] = useState<AlertDataProps>({})\r\n\r\n  const [branch, setBranch] = useState<Branch>()\r\n\r\n  const handleSelectedClient = (branch: Branch) => {\r\n    setBranch(branch)\r\n    setAlertDialog({\r\n      open: true,\r\n      text: `Are you sure you want to archive ${branch.name}?`,\r\n      description:\r\n        'Archieving will not permanently delete the branch account in the database.',\r\n    })\r\n  }\r\n\r\n  const handleArchieve = () => {\r\n    archiveBranch(branch?.id!).then((data) => {\r\n      onLoad()\r\n      globalDispatch({\r\n        type: 'SET_ALERT',\r\n        payload: { message: 'Successfully archived', type: 'error' },\r\n      })\r\n    })\r\n    setAlertDialog({\r\n      open: false,\r\n    })\r\n  }\r\n\r\n  const isLoading = branchState.isLoading && !branchState.branches.length\r\n\r\n  return (\r\n    <>\r\n      <MyAlertDialog\r\n        onAgree={handleArchieve}\r\n        onDisagree={() => setAlertDialog({ open: false })}\r\n        data={alertDialog}\r\n      />\r\n      <MySearchField onSearch={onSearch} style={{ marginBottom: 20 }} />\r\n      {isLoading && <MySkeletonCards />}\r\n      {!isLoading && (\r\n        <Grid\r\n          container\r\n          spacing={2}\r\n          direction='column'\r\n          justify='flex-start'\r\n          alignItems='center'\r\n        >\r\n          {branchState.branches.map((branch) => (\r\n            <Grid key={branch.id} item xs={12}>\r\n              <BranchCard\r\n                onArchive={handleSelectedClient}\r\n                branch={branch}\r\n              ></BranchCard>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      )}\r\n\r\n      <Fab\r\n        style={{\r\n          position: 'fixed',\r\n          bottom: 60,\r\n          right: 20,\r\n        }}\r\n        onClick={() => history.push('/branches/new')}\r\n        color='primary'\r\n        aria-label='add'\r\n      >\r\n        <AddIcon />\r\n      </Fab>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Branches\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Clients\\ViewClient\\index.tsx",["477","478"],"import React, { useState, useEffect, useContext } from 'react'\r\n\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport Chip from '@material-ui/core/Chip'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport { calculateAge, toMoney } from 'utils/helper'\r\nimport MyCard from 'components/common/MyCard'\r\nimport Client from 'models/client'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\n\r\nimport { getClient, computeTotalCountPaid } from 'services/clientService'\r\nimport MySkeletonCard from 'components/common/MySkeletonCard'\r\nimport MyAvatar from 'components/common/MyAvatar'\r\n\r\nexport interface ViewClientProps {}\r\n\r\nconst ViewClient: React.SFC<ViewClientProps> = () => {\r\n  const history = useHistory()\r\n\r\n  const { id } = useParams<{ id: string }>()\r\n\r\n  const [_, globalDispatch] = useContext(GlobalContext)!\r\n\r\n  const [client, setClient] = useState<Client>()\r\n\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true)\r\n    globalDispatch({ type: 'SET_TITLE', payload: 'View Client' })\r\n    getClient(+id).then((client) => {\r\n      setClient(client)\r\n      setIsLoading(false)\r\n    })\r\n  }, [])\r\n\r\n  const detail = (title: string, subtitle: any) => (\r\n    <Grid container alignItems='center' direction='column' item xs={6}>\r\n      <Typography component='h6' variant='h6'>\r\n        {title}\r\n      </Typography>\r\n      <Typography variant='subtitle1' color='textSecondary'>\r\n        {subtitle}\r\n      </Typography>\r\n    </Grid>\r\n  )\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <MySkeletonCard />}\r\n      {client && !isLoading && (\r\n        <>\r\n          <MyCard title={'Code#' + client.code}>\r\n            <CardContent>\r\n              <Grid container xs={12} justify='space-between'>\r\n                <Grid\r\n                  style={{ paddingLeft: 10 }}\r\n                  container\r\n                  direction='column'\r\n                  item\r\n                  xs={7}\r\n                  justify='flex-start'\r\n                >\r\n                  <Typography component='h6' variant='h6'>\r\n                    {`${client?.profile?.lastname}, ${client?.profile?.firstname} ${client?.profile?.middlename}`}\r\n                  </Typography>\r\n                  <Typography variant='subtitle1' color='textSecondary'>\r\n                    {client.plan?.name! + ' - ' + client.payment_mode}\r\n                  </Typography>\r\n                  {client.payment_mode === 'Installment' && (\r\n                    <>\r\n                      <Typography variant='caption' color='textSecondary'>\r\n                        {'Lapse on ' +\r\n                          new Date(client.next_payment!).toDateString()}\r\n                      </Typography>\r\n                      <Grid item xs={1}>\r\n                        <Chip\r\n                          style={{ marginTop: 5 }}\r\n                          size='small'\r\n                          label={computeTotalCountPaid(client) + ' Paid'}\r\n                          color='default'\r\n                          variant='outlined'\r\n                        />\r\n                      </Grid>\r\n                    </>\r\n                  )}\r\n                </Grid>\r\n                <Grid\r\n                  container\r\n                  item\r\n                  xs={5}\r\n                  justify='center'\r\n                  alignItems='center'\r\n                >\r\n                  <MyAvatar src={client?.profile?.image_url} />\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n            <Divider style={{ marginLeft: 20, marginRight: 20 }}></Divider>\r\n            <CardContent>\r\n              <Grid spacing={1} container xs={12} style={{ paddingLeft: 10 }}>\r\n                {detail('Period ', client.payment_period)}\r\n                {detail('Balance', toMoney(client.balance!))}\r\n                {detail('Branch', client?.branch?.name!)}\r\n                {detail(\r\n                  'Insured',\r\n                  new Date(client.created_at!).toLocaleDateString()\r\n                )}\r\n              </Grid>\r\n            </CardContent>\r\n            <Divider style={{ marginLeft: 20, marginRight: 20 }}></Divider>\r\n            <CardContent>\r\n              <Grid spacing={1} container xs={12} style={{ paddingLeft: 10 }}>\r\n                {detail('Gender', client?.profile?.gender)}\r\n                {detail('Civil Status', client?.profile?.civil)}\r\n                {detail('Contact', client?.profile?.contact)}\r\n                {detail(\r\n                  'Age',\r\n                  client?.profile?.birthdate\r\n                    ? calculateAge(client?.profile?.birthdate)\r\n                    : 'N/A'\r\n                )}\r\n\r\n                <Grid\r\n                  container\r\n                  alignItems='center'\r\n                  direction='column'\r\n                  item\r\n                  xs={12}\r\n                >\r\n                  <Typography component='h6' variant='h6'>\r\n                    Address\r\n                  </Typography>\r\n                  <Typography variant='subtitle1' color='textSecondary'>\r\n                    {client?.profile?.address}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n          </MyCard>\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 10, paddingBottom: 5 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.goBack()}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.push('/clients/edit/' + client.id)}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='primary'\r\n              >\r\n                EDIT\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ViewClient\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Employees\\index.tsx",["479","480"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\n\r\nimport Pagination from '@material-ui/lab/Pagination'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Fab from '@material-ui/core/Fab'\r\nimport AddIcon from '@material-ui/icons/Add'\r\n\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\r\n\r\nimport EmployeeCard from './EmployeeCard'\r\nimport MySearchField from 'components/common/MySearchField'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport { EmployeeContext } from 'providers/EmployeeProvider'\r\nimport { getEmployees, GetEmployeesProps } from 'services/employeeService'\r\nimport MySkeletonCards from 'components/common/MySkeletonCards'\r\nimport MyChips, { MyChip } from 'components/common/MyChips'\r\nimport Scroll from 'react-scroll'\r\nimport qs from 'query-string'\r\nimport MyAlertDialog, { AlertDataProps } from 'components/common/MyAlertDialog'\r\nimport { archiveEmployee } from 'services/employeeService'\r\nimport Employee from 'models/employee'\r\n\r\nexport interface EmployeesProps {}\r\n\r\nconst Employees: React.SFC<EmployeesProps> = () => {\r\n  const [_, globalDispatch] = useContext(GlobalContext)!\r\n  const [employeeState, employeeDispatch] = useContext(EmployeeContext)!\r\n\r\n  const scroll = Scroll.animateScroll\r\n\r\n  const history = useHistory()\r\n\r\n  const location = useLocation()\r\n\r\n  const [page, setPage] = useState(1)\r\n\r\n  const [chip, setChip] = useState<MyChip>({ value: '', name: 'All' })\r\n\r\n  const styles = useStyles()\r\n\r\n  useEffect(() => {\r\n    globalDispatch({ type: 'SET_TITLE', payload: 'Employee Management' })\r\n    const { page, search } = qs.parse(location.search)\r\n    const currentPage = !!page ? +page : 1\r\n    setPage(currentPage)\r\n    onLoad({\r\n      page: currentPage,\r\n      search: (search as string) || '',\r\n    })\r\n    return () => {\r\n      globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n    }\r\n  }, [])\r\n\r\n  const onLoad = ({ page, category, search }: GetEmployeesProps) => {\r\n    globalDispatch({ type: 'SET_IS_LOADING', payload: true })\r\n    employeeDispatch({ type: 'SET_IS_LOADING', payload: true })\r\n    getEmployees({ page, category, search }).then(\r\n      ({ employees, pages, total }) => {\r\n        employeeDispatch({\r\n          type: 'ON_LOAD_EMPLOYEES',\r\n          payload: { employees, pages, total },\r\n        })\r\n        globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n        scroll.scrollToTop({ duration: 1000 })\r\n      }\r\n    )\r\n  }\r\n\r\n  const onFilter = (chip: MyChip) => {\r\n    setChip(chip)\r\n    employeeDispatch({ type: 'SET_TOTAL', payload: 0 })\r\n    setPage(1)\r\n    onLoad({ page: 1, category: chip.value })\r\n  }\r\n\r\n  const onPage = (e: any, page: number) => {\r\n    employeeDispatch({ type: 'SET_TOTAL', payload: 0 })\r\n    setPage(page)\r\n    onLoad({ page, category: chip.value })\r\n    history.push('/employees?page=' + page)\r\n  }\r\n\r\n  const onSearch = (search: string) => {\r\n    setChip({ value: '', name: 'All' })\r\n    setPage(1)\r\n    onLoad({ page: 1, search })\r\n    history.push('/employees?search=' + search)\r\n  }\r\n\r\n  const isLoading = employeeState.isLoading && !employeeState.employees.length\r\n\r\n  const chips: MyChip[] = [\r\n    { value: '', name: 'All' },\r\n    { value: 'active', name: 'Active' },\r\n    { value: 'deactive', name: 'Deactive' },\r\n    { value: 'deceased', name: 'Deceased' },\r\n    { value: 1, name: 'Branch Manager' },\r\n    { value: 2, name: 'Agency Manager' },\r\n    { value: 3, name: 'Supervisor' },\r\n    { value: 4, name: 'Sales Agent' },\r\n  ]\r\n\r\n  const [alertDialog, setAlertDialog] = useState<AlertDataProps>({})\r\n\r\n  const [employee, setEmployee] = useState<Employee>()\r\n\r\n  const handleSelectedEmployee = (employee: Employee) => {\r\n    setEmployee(employee)\r\n    setAlertDialog({\r\n      open: true,\r\n      text: `Are you sure you want to archive ${employee.lastname}, ${employee.firstname} ${employee.middlename}?`,\r\n      description:\r\n        'Archiving will not permanently delete the employee account in the database.',\r\n    })\r\n  }\r\n\r\n  const handleArchive = () => {\r\n    archiveEmployee(employee?.id!).then((data) => {\r\n      onLoad({\r\n        page,\r\n      })\r\n      globalDispatch({\r\n        type: 'SET_ALERT',\r\n        payload: { message: 'Successfully archived', type: 'success' },\r\n      })\r\n      setChip({ value: '', name: 'All' })\r\n    })\r\n    setAlertDialog({\r\n      open: false,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <MyAlertDialog\r\n        onAgree={handleArchive}\r\n        onDisagree={() => setAlertDialog({ open: false })}\r\n        data={alertDialog}\r\n      />\r\n      <MySearchField\r\n        label='Name / Branch'\r\n        labelWidth={110}\r\n        onSearch={onSearch}\r\n        style={{ marginBottom: 5 }}\r\n      />\r\n\r\n      <MyChips\r\n        count={employeeState.total}\r\n        active={chip}\r\n        onChipSelected={onFilter}\r\n        chips={chips}\r\n      />\r\n\r\n      {isLoading && <MySkeletonCards />}\r\n      {!isLoading && (\r\n        <Grid\r\n          container\r\n          spacing={2}\r\n          direction='column'\r\n          justify='flex-start'\r\n          alignItems='center'\r\n        >\r\n          {employeeState.employees.map((employee) => (\r\n            <Grid item xs={12}>\r\n              <EmployeeCard\r\n                onArchive={handleSelectedEmployee}\r\n                employee={employee}\r\n              />\r\n            </Grid>\r\n          ))}\r\n          <Pagination\r\n            style={{ marginTop: 15, marginBottom: 15 }}\r\n            variant='outlined'\r\n            color='primary'\r\n            count={employeeState.pages}\r\n            siblingCount={0}\r\n            page={page}\r\n            onChange={onPage}\r\n          />\r\n        </Grid>\r\n      )}\r\n\r\n      <Fab\r\n        onClick={() => history.push('/employees/new')}\r\n        className={styles.fab}\r\n        color='primary'\r\n        aria-label='add'\r\n      >\r\n        <AddIcon />\r\n      </Fab>\r\n    </>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    fab: {\r\n      position: 'fixed',\r\n      bottom: 60,\r\n      right: 20,\r\n    },\r\n  })\r\n)\r\n\r\nexport default Employees\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Payments\\PaymentView\\index.tsx",["481","482","483","484","485","486"],"import MyCard from 'components/common/MyCard'\r\nimport { useContext, useEffect, useState } from 'react'\r\nimport Link from '@material-ui/core/Link'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Chip from '@material-ui/core/Chip'\r\nimport Payment from 'models/payment'\r\nimport { getPayment, getPayments } from 'services/paymentService'\r\nimport { PaymentContext } from 'providers/PaymentProvider'\r\nimport MyAvatar from 'components/common/MyAvatar'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport MyMiniCards from 'components/common/MyMiniCards'\r\nimport Commission from 'models/commission'\r\nimport MySkeletonCard from 'components/common/MySkeletonCard'\r\nimport MySkeletonMiniCards from 'components/common/MySkeletonMiniCards'\r\n\r\nexport interface PaymentViewProps {}\r\n\r\nconst PaymentView: React.SFC<PaymentViewProps> = () => {\r\n  const history = useHistory()\r\n  const params = useParams<{ id: string }>()\r\n  const [payment, setPayment] = useState<Payment>({})\r\n  const [isLoading, setIsLoading] = useState(true)\r\n\r\n  const [globalState, globalDispatch] = useContext(GlobalContext)!\r\n\r\n  useEffect(() => {\r\n    globalDispatch({ type: 'SET_TITLE', payload: 'Payment Details' })\r\n    globalDispatch({ type: 'SET_IS_LOADING', payload: true })\r\n\r\n    getPayment(+params.id)\r\n      .then((payment) => {\r\n        setPayment(payment)\r\n        globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n        setIsLoading(false)\r\n      })\r\n      .catch(() => {\r\n        globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n        setIsLoading(false)\r\n      })\r\n    return () => {\r\n      globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n      setIsLoading(false)\r\n    }\r\n  }, [])\r\n\r\n  const client = payment.client\r\n  const fullname = `${client?.profile?.lastname}, ${client?.profile?.firstname} ${client?.profile?.middlename}`\r\n\r\n  const insured_at = new Date(payment?.client?.created_at!)\r\n  // const hasCommission =\r\n  //   new Date(insured_at.setFullYear(insured_at.getFullYear() + 1)) >=\r\n  //   new Date(Date.now())\r\n\r\n  const handleSelected = (commission: Commission) => {\r\n    // history.push('/clients/' + client.id)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {isLoading && (\r\n        <>\r\n          <MySkeletonCard height={110} />\r\n          <Grid\r\n            container\r\n            style={{ marginBottom: 10 }}\r\n            xs={12}\r\n            justify='space-between'\r\n          >\r\n            <Typography variant='subtitle1'>Commissioners</Typography>\r\n            <Link component='button' variant='body1'>\r\n              View All({payment?.commissions?.length})\r\n            </Link>\r\n            <MySkeletonMiniCards />\r\n          </Grid>\r\n        </>\r\n      )}\r\n      {!isLoading && (\r\n        <>\r\n          <MyCard\r\n            title={'OR#' + payment.or_number}\r\n            style={{ paddingBottom: 5, marginBottom: 10 }}\r\n          >\r\n            <CardContent>\r\n              <Grid xs={12} direction='row' container>\r\n                <Grid item xs={7}>\r\n                  <Typography component='h3' variant='h6'>\r\n                    {fullname}\r\n                  </Typography>\r\n                  <Typography variant='subtitle1' color='textSecondary'>\r\n                    {payment.client?.branch?.name}\r\n                  </Typography>\r\n                  <Typography variant='subtitle1' color='textSecondary'>\r\n                    {'₱ ' + payment.amount}\r\n                  </Typography>\r\n                  <Typography variant='caption' color='textSecondary'>\r\n                    {'Paid on ' + new Date(payment?.created_at!).toDateString()}\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid\r\n                  container\r\n                  item\r\n                  xs={5}\r\n                  justify='center'\r\n                  alignItems='center'\r\n                >\r\n                  <MyAvatar src={payment?.client?.profile?.image_url} />\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n          </MyCard>\r\n\r\n          {!!payment?.commissions?.length && (\r\n            <>\r\n              <Typography variant='subtitle1'>Commissioners</Typography>\r\n              <MyMiniCards\r\n                style={{ marginBottom: 15, marginTop: 10 }}\r\n                onSelected={handleSelected}\r\n                items={payment?.commissions!}\r\n              >\r\n                {({ renderCards, item }) => (\r\n                  <>\r\n                    {renderCards({\r\n                      item,\r\n                      title: `${item.employee?.profile?.lastname}, ${item.employee?.profile?.firstname} (${item.employee?.position?.name})`,\r\n                      subtitle: '₱ ' + item.amount!,\r\n                      src: item.employee?.profile?.image_url,\r\n                    })}\r\n                  </>\r\n                )}\r\n              </MyMiniCards>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      <Grid item xs={6}>\r\n        <Button\r\n          onClick={() => history.goBack()}\r\n          fullWidth\r\n          variant='contained'\r\n          color='default'\r\n        >\r\n          BACK\r\n        </Button>\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PaymentView\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Commissions\\index.tsx",["487","488","489"],"import { CommissionContext } from 'providers/CommissionProvider'\r\nimport { useContext, useEffect, useState } from 'react'\r\nimport { getCommissions } from 'services/commissionService'\r\nimport MyChips, { MyChip } from 'components/common/MyChips'\r\nimport MySearchField from 'components/common/MySearchField'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport CommissionCard from './CommissionCard'\r\nimport Pagination from '@material-ui/lab/Pagination'\r\nimport { useLocation, useHistory } from 'react-router-dom'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport MySkeletonCards from 'components/common/MySkeletonCards'\r\n\r\nexport interface CommissionsProps {}\r\n\r\ninterface LoadProps {\r\n  search?: string\r\n  category?: string\r\n  page: number\r\n}\r\n\r\nconst Commissions: React.SFC<CommissionsProps> = () => {\r\n  const [_, globalDispatch] = useContext(GlobalContext)!\r\n\r\n  const [commissionState, commissionDispatch] = useContext(CommissionContext)!\r\n\r\n  const [chip, setChip] = useState<MyChip>({ value: '', name: 'All' })\r\n\r\n  const [page, setPage] = useState(1)\r\n\r\n  const location = useLocation()\r\n\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    globalDispatch({ type: 'SET_TITLE', payload: 'Commission History' })\r\n\r\n    onLoad({ page: 1 })\r\n    return () => {\r\n      globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n    }\r\n  }, [])\r\n\r\n  const onLoad = ({ page, search, category }: LoadProps) => {\r\n    globalDispatch({ type: 'SET_IS_LOADING', payload: true })\r\n    commissionDispatch({ type: 'SET_IS_LOADING', payload: true })\r\n    getCommissions({ page, search, category })\r\n      .then(({ commissions, total, pages }) => {\r\n        commissionDispatch({\r\n          type: 'ON_LOAD_COMMISSIONS',\r\n          payload: { commissions, total, pages },\r\n        })\r\n        globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n      })\r\n      .catch(() => globalDispatch({ type: 'SET_IS_LOADING', payload: false }))\r\n  }\r\n\r\n  const onSearch = (search: string) => {\r\n    setChip({ value: '', name: 'All' })\r\n    onLoad({ page: 1, search })\r\n    setPage(1)\r\n  }\r\n\r\n  const onFilter = (chip: MyChip) => {\r\n    commissionDispatch({ type: 'SET_TOTAL', payload: 0 })\r\n    setChip(chip)\r\n    onLoad({ page: 1, category: chip.value })\r\n    setPage(1)\r\n    history.push('/commissions?page=' + 1)\r\n  }\r\n\r\n  const chips = [\r\n    { value: '', name: 'All' },\r\n    { value: 'release', name: 'Release' },\r\n    { value: 'unrelease', name: 'Unrelease' },\r\n  ]\r\n\r\n  const onPage = (e: any, page: number) => {\r\n    commissionDispatch({ type: 'SET_TOTAL', payload: 0 })\r\n    setPage(page)\r\n    onLoad({ page, category: chip.value })\r\n    history.push('/commissions?page=' + page)\r\n  }\r\n  const isLoading =\r\n    commissionState.isLoading && !commissionState.commissions.length\r\n\r\n  return (\r\n    <>\r\n      <MySearchField\r\n        label='Name'\r\n        labelWidth={45}\r\n        onSearch={onSearch}\r\n        style={{ marginBottom: 10 }}\r\n      />\r\n      <MyChips\r\n        count={commissionState.total}\r\n        onChipSelected={onFilter}\r\n        active={chip}\r\n        chips={chips}\r\n      />\r\n      {isLoading && <MySkeletonCards />}\r\n      {!isLoading && (\r\n        <Grid\r\n          container\r\n          spacing={2}\r\n          direction='column'\r\n          justify='flex-start'\r\n          alignItems='center'\r\n        >\r\n          {commissionState.commissions.map((commission) => (\r\n            <Grid key={commission.id} item xs={12}>\r\n              <CommissionCard commission={commission} />\r\n            </Grid>\r\n          ))}\r\n          <Pagination\r\n            style={{ marginTop: 15, marginBottom: 15 }}\r\n            variant='outlined'\r\n            color='primary'\r\n            count={commissionState.pages}\r\n            siblingCount={0}\r\n            page={page}\r\n            onChange={onPage}\r\n          />\r\n        </Grid>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Commissions\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Branches\\EditBranch\\index.tsx",["490","491"],"import Grid from '@material-ui/core/Grid'\r\nimport Button from '@material-ui/core/Button'\r\nimport MyForm, { MyFormProps } from 'components/common/MyForm'\r\nimport Branch from 'models/branch'\r\nimport { useEffect, useState } from 'react'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport validator from 'validators/saveBranchValidator'\r\nimport { getBranch, saveBranch, updateBranch } from 'services/branchService'\r\n\r\nexport interface NewBranchProps {}\r\n\r\nconst EditBranch: React.SFC<NewBranchProps> = () => {\r\n  const [branch, setBranch] = useState<Branch>({\r\n    name: '',\r\n    contact: '',\r\n    address: '',\r\n  })\r\n\r\n  const history = useHistory()\r\n\r\n  const params = useParams<{ id: string }>()\r\n\r\n  useEffect(() => {\r\n    getBranch(+params.id).then((branch) => setBranch(branch))\r\n  }, [])\r\n\r\n  const onSubmit = async (branch: Branch) => {\r\n    updateBranch(branch).then((data) => console.log(data))\r\n  }\r\n\r\n  const formProps: MyFormProps<Branch> = {\r\n    state: [branch, setBranch],\r\n    onSubmit,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myButton, myControlledInput }) => (\r\n        <>\r\n          {myControlledInput({\r\n            label: 'Branch Name',\r\n            value: branch?.name,\r\n            name: 'name',\r\n          })}\r\n          {myControlledInput({\r\n            label: 'Contact',\r\n            value: branch?.contact,\r\n            name: 'contact',\r\n          })}\r\n\r\n          {myControlledInput({\r\n            label: 'Address',\r\n            value: branch?.address,\r\n            name: 'address',\r\n            isMultiline: true,\r\n          })}\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 10, paddingBottom: 5 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => history.goBack()}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton()}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\n\r\nexport default EditBranch\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Auth\\SignIn\\index.tsx",["492","493","494","495"],"import Grid from '@material-ui/core/Grid'\r\nimport MyForm, { MyFormProps } from 'components/common/MyForm'\r\nimport User from 'models/user'\r\nimport { onSignIn } from 'services/authService'\r\nimport validator from 'validators/signInValidator'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\r\nimport Fade from 'react-reveal/Fade'\r\nimport { useContext, useEffect, useState } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport logo from 'assets/logo.jpg'\r\n\r\nimport { getCurrentUser, saveToken, nameCapitalize } from 'utils/helper'\r\n\r\nexport interface SignInProps {}\r\n\r\nconst SignIn: React.SFC<SignInProps> = () => {\r\n  const styles = useStyles()\r\n\r\n  const [state, dispatch] = useContext(GlobalContext)!\r\n\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'SET_TITLE', payload: 'BRAND NAME' })\r\n  }, [])\r\n\r\n  const [user, setUser] = useState<User>({\r\n    username: '',\r\n    password: '',\r\n  })\r\n\r\n  const onSubmit = async (user: User) => {\r\n    return onSignIn(user)\r\n      .then((access_token) => {\r\n        saveToken(access_token)\r\n        const currentUser = getCurrentUser()\r\n        dispatch({ type: 'SET_CURRENT_USER', payload: currentUser })\r\n        // dispatch({\r\n        //   type: 'SET_ALERT',\r\n        //   payload: {\r\n        //     message: `Welcome, ${nameCapitalize(currentUser.username)}`,\r\n        //     type: 'success',\r\n        //   },\r\n        // })\r\n      })\r\n      .catch(({ response }) => {\r\n        if (response.status === 401) {\r\n          dispatch({\r\n            type: 'SET_ALERT',\r\n            payload: {\r\n              message: response.data.error,\r\n              type: 'error',\r\n            },\r\n          })\r\n        }\r\n      })\r\n  }\r\n  const formProps: MyFormProps<User> = {\r\n    state: [user, setUser],\r\n    onSubmit,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <Grid\r\n      style={{ minHeight: 450 }}\r\n      justify='space-between'\r\n      container\r\n      direction='column'\r\n      xs={12}\r\n    >\r\n      <Grid\r\n        style={{ marginTop: 20 }}\r\n        direction='row'\r\n        container\r\n        justify='center'\r\n        alignItems='flex-start'\r\n      >\r\n        <Fade delay={500}>\r\n          <img\r\n            style={{\r\n              paddingLeft: 20,\r\n              paddingRight: 20,\r\n              zIndex: 1,\r\n              borderRadius: 10,\r\n              backgroundColor: 'white',\r\n              marginTop: 30,\r\n              boxShadow:\r\n                '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)',\r\n            }}\r\n            width={250}\r\n            src={logo}\r\n            alt='brand logo'\r\n          />\r\n        </Fade>\r\n      </Grid>\r\n\r\n      <div className={styles.formContainer}>\r\n        <MyForm {...formProps}>\r\n          {({ myInput, myButton }) => (\r\n            <>\r\n              {myInput({\r\n                label: 'Username',\r\n                value: user.username,\r\n                name: 'username',\r\n              })}\r\n              {myInput({\r\n                label: 'Password',\r\n                value: user.password,\r\n                name: 'password',\r\n                type: 'password',\r\n              })}\r\n\r\n              {myButton('LOGIN')}\r\n            </>\r\n          )}\r\n        </MyForm>\r\n      </div>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    formContainer: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      justifyContent: 'flex-end',\r\n      marginTop: 50,\r\n      paddingLeft: 20,\r\n      paddingRight: 20,\r\n    },\r\n  })\r\n)\r\n\r\nexport default SignIn\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Transactions\\ReleaseTransaction\\index.tsx",["496","497"],"import { useContext, useEffect, useState } from 'react'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport MyChips, { MyChip } from 'components/common/MyChips'\r\nimport MySearchField from 'components/common/MySearchField'\r\n\r\nimport Pagination from '@material-ui/lab/Pagination'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport { CommissionContext } from 'providers/CommissionProvider'\r\nimport {\r\n  getTotalCommissionOfEmployees,\r\n  CommissionProps,\r\n  releaseCommission,\r\n} from 'services/commissionService'\r\nimport ReleaseCard from './ReleaseCard'\r\nimport MyAlertDialog, { AlertDataProps } from 'components/common/MyAlertDialog'\r\nimport Commission from 'models/commission'\r\nimport { toMoney } from 'utils/helper'\r\nimport MySkeletonCards from 'components/common/MySkeletonCards'\r\n\r\nexport interface CommissionReleaseProps {}\r\n\r\nconst ReleaseTransaction: React.SFC<CommissionReleaseProps> = () => {\r\n  const [commissionState, commissionDispatch] = useContext(CommissionContext)!\r\n\r\n  const [_, globalDispatch] = useContext(GlobalContext)!\r\n\r\n  const [chip, setChip] = useState<MyChip>({ value: '', name: 'All' })\r\n\r\n  const [page, setPage] = useState(1)\r\n\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    globalDispatch({ type: 'SET_TITLE', payload: 'Release Transaction' })\r\n    onLoad({ page: 1 })\r\n    return () => {\r\n      globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n    }\r\n  }, [])\r\n\r\n  const onLoad = ({ page, search, category }: CommissionProps) => {\r\n    globalDispatch({ type: 'SET_IS_LOADING', payload: true })\r\n    commissionDispatch({ type: 'SET_IS_LOADING', payload: true })\r\n    getTotalCommissionOfEmployees({ page, search, category })\r\n      .then(({ commissions, total, pages }) => {\r\n        commissionDispatch({\r\n          type: 'ON_LOAD_COMMISSIONS',\r\n          payload: { commissions, total, pages },\r\n        })\r\n        globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n      })\r\n      .catch(() => globalDispatch({ type: 'SET_IS_LOADING', payload: false }))\r\n  }\r\n\r\n  const chips: MyChip[] = [\r\n    { value: '', name: 'All' },\r\n    { value: 1, name: 'Branch Manager' },\r\n    { value: 2, name: 'Agency Manager' },\r\n    { value: 3, name: 'Supervisor' },\r\n  ]\r\n\r\n  const onFilter = (chip: MyChip) => {\r\n    commissionDispatch({ type: 'SET_TOTAL', payload: 0 })\r\n    setChip(chip)\r\n    setPage(1)\r\n    onLoad({ page: 1, category: chip.value })\r\n    if (!!chip.value) {\r\n      history.push('/transaction/releases')\r\n    }\r\n  }\r\n\r\n  const onPage = (e: any, page: number) => {\r\n    commissionDispatch({ type: 'SET_TOTAL', payload: 0 })\r\n    setPage(page)\r\n    onLoad({ page, category: chip.value })\r\n    history.push('/transaction/releases?page=' + page)\r\n  }\r\n\r\n  const onSearch = (search: string) => {\r\n    setChip({ value: '', name: 'All' })\r\n    setPage(1)\r\n    onLoad({ page: 1, search })\r\n    history.push('/transaction/releases?search=' + search)\r\n  }\r\n\r\n  const [alertDialog, setAlertDialog] = useState<AlertDataProps>({})\r\n\r\n  const [selectedCommission, setSelectedCommission] = useState<Commission>()\r\n\r\n  const handleSelectedCommission = (commission: Commission) => {\r\n    setSelectedCommission(commission)\r\n    setAlertDialog({\r\n      open: true,\r\n      text: `Are you sure you want to release \"${commission?.employee?.profile?.lastname}, ${commission?.employee?.profile?.firstname} ${commission?.employee?.profile?.middlename}\" commission?`,\r\n      description: `Amounting of ${toMoney(commission?.amount!)}`,\r\n    })\r\n  }\r\n\r\n  const handleRelease = () => {\r\n    releaseCommission(selectedCommission?.employee?.id!).then((data) => {\r\n      onLoad({ page, category: chip.value })\r\n    })\r\n    setAlertDialog({\r\n      open: false,\r\n    })\r\n  }\r\n\r\n  const isLoading =\r\n    commissionState.isLoading && !commissionState.commissions.length\r\n\r\n  return (\r\n    <>\r\n      <MyAlertDialog\r\n        onAgree={handleRelease}\r\n        onDisagree={() => setAlertDialog({ open: false })}\r\n        data={alertDialog}\r\n      />\r\n      <MySearchField\r\n        labelWidth={110}\r\n        label='Name / Branch'\r\n        onSearch={onSearch}\r\n        style={{ marginBottom: 15 }}\r\n      />\r\n\r\n      <MyChips\r\n        count={commissionState.total}\r\n        onChipSelected={onFilter}\r\n        active={chip}\r\n        chips={chips}\r\n      />\r\n      {isLoading && <MySkeletonCards />}\r\n      {!isLoading && (\r\n        <Grid\r\n          container\r\n          spacing={2}\r\n          direction='column'\r\n          justify='flex-start'\r\n          alignItems='center'\r\n        >\r\n          {commissionState.commissions.map((commission) => (\r\n            <Grid key={commission.id} item xs={12}>\r\n              <ReleaseCard\r\n                onRelease={handleSelectedCommission}\r\n                commission={commission}\r\n              />\r\n            </Grid>\r\n          ))}\r\n          <Pagination\r\n            style={{ marginTop: 15, marginBottom: 15 }}\r\n            variant='outlined'\r\n            color='primary'\r\n            count={commissionState.pages}\r\n            siblingCount={0}\r\n            page={page}\r\n            onChange={onPage}\r\n          />\r\n        </Grid>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ReleaseTransaction\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Transactions\\EncodeTransaction\\index.tsx",["498","499","500","501"],"import Grid from '@material-ui/core/Grid'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport {\r\n  getAmountToPay,\r\n  getLapsedClients,\r\n  getClients,\r\n} from 'services/clientService'\r\nimport MyMiniCards from 'components/common/MyMiniCards'\r\nimport MySearchField from 'components/common/MySearchField'\r\nimport MyAvatar from 'components/common/MyAvatar'\r\nimport Client from 'models/client'\r\nimport { ClientContext } from 'providers/ClientProvider'\r\nimport { useContext, useEffect, useState } from 'react'\r\nimport CommissionersForm from './TransactionForm'\r\nimport TransactionModel from 'models/transaction'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport MySkeletonMiniCards from 'components/common/MySkeletonMiniCards'\r\nimport { getEmployees } from 'services/employeeService'\r\nimport Employee from 'models/employee'\r\nimport {\r\n  getRecentCommissionerByClient,\r\n  savePayments,\r\n} from 'services/paymentService'\r\nimport { getUnread } from 'services/notificationService'\r\nimport { NotificationContext } from 'providers/NotificationProvider'\r\n\r\nexport interface TransactionProps {}\r\n\r\nconst Transaction: React.SFC<TransactionProps> = () => {\r\n  const [clientState, clientDispatch] = useContext(ClientContext)!\r\n  const [notifState, notifDispatch] = useContext(NotificationContext)!\r\n\r\n  const [globalState, globalDispatch] = useContext(GlobalContext)!\r\n\r\n  const [employees, setEmployees] = useState<Employee[]>([])\r\n\r\n  const [transaction, setTransaction] = useState<TransactionModel>({\r\n    position: 'sales_agent',\r\n    amount: 0,\r\n  })\r\n\r\n  const onLoadClients = () => {\r\n    globalDispatch({ type: 'SET_IS_LOADING', payload: true })\r\n    clientDispatch({ type: 'SET_IS_LOADING', payload: true })\r\n    getLapsedClients('').then((clients) => {\r\n      clientDispatch({\r\n        type: 'ON_LOAD_CLIENTS',\r\n        payload: { clients },\r\n      })\r\n      globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    globalDispatch({ type: 'SET_TITLE', payload: 'Encode Transaction' })\r\n\r\n    onLoadClients()\r\n\r\n    getEmployees({ category: 'active' }).then((employees) => {\r\n      setEmployees(employees)\r\n    })\r\n    return () => {\r\n      globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (transaction.id) {\r\n      let amount: number = 0\r\n\r\n      switch (transaction.payment_mode) {\r\n        case 'Installment':\r\n          amount = getAmountToPay(transaction)\r\n          break\r\n        case 'Fullpayment':\r\n          amount = transaction?.balance!\r\n          break\r\n        default:\r\n          break\r\n      }\r\n      setTransaction((transaction) => ({\r\n        ...transaction,\r\n        amount,\r\n      }))\r\n\r\n      globalDispatch({ type: 'SET_IS_LOADING', payload: true })\r\n\r\n      getRecentCommissionerByClient(transaction.id)\r\n        .then((employees: any) => {\r\n          globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n\r\n          const getCommissioner = (id: number) =>\r\n            employees.find((employee: any) =>\r\n              globalState.currentUser?.role === 'admin'\r\n                ? employee.positionId === id\r\n                : employee.positionId === id &&\r\n                  employee.branch?.id === globalState.currentUser?.branch?.id!\r\n            )?.id || ''\r\n\r\n          const branch_manager = getCommissioner(1)\r\n          const agency_manager = getCommissioner(2)\r\n          const supervisor = getCommissioner(3)\r\n          const sales_agent = getCommissioner(4)\r\n\r\n          setTransaction((transaction) => ({\r\n            ...transaction,\r\n            branch: employees[0]?.branch,\r\n            branch_manager,\r\n            agency_manager,\r\n            supervisor,\r\n            sales_agent,\r\n          }))\r\n        })\r\n        .catch(() => globalDispatch({ type: 'SET_IS_LOADING', payload: false }))\r\n    }\r\n  }, [transaction.payment_mode, transaction.id])\r\n\r\n  const handleSelected = (client: Client) => {\r\n    setTransaction((transaction) => ({\r\n      ...transaction,\r\n      ...client,\r\n    }))\r\n  }\r\n\r\n  const handleSubmit = async (transaction: TransactionModel) => {\r\n    if (!transaction.id) {\r\n      globalDispatch({\r\n        type: 'SET_ALERT',\r\n        payload: { message: 'Please Select a Client!', type: 'error' },\r\n      })\r\n      return\r\n    }\r\n\r\n    const insured_employee = transaction[transaction.position] ?? 0\r\n\r\n    if (!insured_employee) {\r\n      globalDispatch({\r\n        type: 'SET_ALERT',\r\n        payload: {\r\n          message:\r\n            'Sales Agent is not present! Please select another employee.',\r\n          type: 'error',\r\n        },\r\n      })\r\n\r\n      return\r\n    }\r\n\r\n    const {\r\n      id,\r\n      amount,\r\n      or_number,\r\n      branch_manager,\r\n      agency_manager,\r\n      supervisor,\r\n      sales_agent,\r\n      created_at,\r\n    } = transaction\r\n\r\n    const payment = {\r\n      client: id,\r\n      insured_employee,\r\n      amount,\r\n      or_number,\r\n      branch_manager,\r\n      agency_manager,\r\n      supervisor,\r\n      sales_agent,\r\n      created_at,\r\n    }\r\n\r\n    return savePayments(payment)\r\n      .then((data) => {\r\n        globalDispatch({\r\n          type: 'SET_ALERT',\r\n          payload: {\r\n            message: 'Successfully save!',\r\n            type: 'success',\r\n          },\r\n        })\r\n        setTransaction({\r\n          position: 'sales_agent',\r\n          amount: 0,\r\n        })\r\n\r\n        getUnread().then((data) => {\r\n          notifDispatch({ type: 'ON_LOAD_UNREAD', payload: data.count })\r\n        })\r\n\r\n        onLoadClients()\r\n      })\r\n\r\n      .catch((error) => {\r\n        if (error.response.status === 400) {\r\n          globalDispatch({\r\n            type: 'SET_ALERT',\r\n            payload: {\r\n              message: error.response.data.error,\r\n              type: 'error',\r\n            },\r\n          })\r\n          return\r\n        }\r\n        globalDispatch({\r\n          type: 'SET_ALERT',\r\n          payload: {\r\n            message: error.message,\r\n            type: 'error',\r\n          },\r\n        })\r\n        getUnread().then((data) => {\r\n          notifDispatch({ type: 'ON_LOAD_UNREAD', payload: data.count })\r\n        })\r\n\r\n        onLoadClients()\r\n      })\r\n  }\r\n\r\n  const onSearch = (search: string) => {\r\n    globalDispatch({ type: 'SET_IS_LOADING', payload: true })\r\n    getLapsedClients(search).then((clients) => {\r\n      clientDispatch({\r\n        type: 'ON_LOAD_CLIENTS',\r\n        payload: { clients },\r\n      })\r\n      globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n      setTransaction({\r\n        position: 'sales_agent',\r\n        amount: 0,\r\n      })\r\n    })\r\n  }\r\n\r\n  const isLoading = clientState.isLoading && !clientState.clients.length\r\n\r\n  return (\r\n    <Grid container direction='column' xs={12}>\r\n      <MySearchField onSearch={onSearch} labelWidth={100} label='Name / Code' />\r\n      {isLoading && <MySkeletonMiniCards></MySkeletonMiniCards>}\r\n\r\n      {!isLoading && (\r\n        <MyMiniCards\r\n          onSelected={handleSelected}\r\n          style={{ marginTop: 10 }}\r\n          items={clientState.clients}\r\n        >\r\n          {({ renderCards, item }) => (\r\n            <>\r\n              {renderCards({\r\n                title: `${item?.lastname}, ${item?.firstname} ${item?.middlename}`,\r\n                subtitle: item.code!,\r\n                src: item.image_url,\r\n                item,\r\n              })}\r\n            </>\r\n          )}\r\n        </MyMiniCards>\r\n      )}\r\n      <Divider style={{ margin: 20 }}></Divider>\r\n      {!transaction.id && (\r\n        <Grid container xs={12} justify='center'>\r\n          <Typography component='h6' variant='h6'>\r\n            No Selected Client\r\n          </Typography>\r\n        </Grid>\r\n      )}\r\n      {transaction.id && (\r\n        <Grid\r\n          style={{ paddingLeft: 10, paddingRight: 20 }}\r\n          xs={12}\r\n          container\r\n          justify='space-between'\r\n        >\r\n          <Grid item xs={8}>\r\n            <Typography component='h6' variant='h6'>\r\n              {`${transaction?.lastname}, ${transaction?.firstname} ${transaction?.middlename}`}\r\n            </Typography>\r\n            <Typography variant='subtitle2' color='textSecondary'>\r\n              {transaction?.code}\r\n            </Typography>\r\n            <Typography variant='subtitle2' color='textSecondary'>\r\n              {transaction?.plan?.name! + ' - ' + transaction?.payment_period}\r\n            </Typography>\r\n            <Typography variant='caption' color='textSecondary'>\r\n              {'Lapse on ' +\r\n                new Date(transaction?.next_payment!).toDateString()}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <MyAvatar src={transaction.image_url} />\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n\r\n      <Divider style={{ margin: 20 }}></Divider>\r\n\r\n      {!isLoading && transaction.id && (\r\n        <CommissionersForm\r\n          employees={employees}\r\n          onSubmit={handleSubmit}\r\n          state={[transaction, setTransaction]}\r\n        />\r\n      )}\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default Transaction\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Transactions\\EncodeTransaction\\TransactionForm.tsx",["502","503","504","505"],"import React, { useEffect, useState } from 'react'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport MyForm, { MyFormProps, RenderProps } from 'components/common/MyForm'\r\nimport Client from 'models/client'\r\nimport Commissioner from 'models/commissioner'\r\nimport validator from 'validators/clientTransactionValidator'\r\nimport Transaction from 'models/transaction'\r\nimport Employee from 'models/employee'\r\n\r\nexport interface ClientStepTwoProps {\r\n  onSubmit: (transaction: Transaction) => Promise<void>\r\n  state: [\r\n    Transaction,\r\n    React.Dispatch<React.SetStateAction<Transaction & Client>>\r\n  ]\r\n  employees: Employee[]\r\n}\r\n\r\nexport const CommissionersForm: React.SFC<ClientStepTwoProps> = ({\r\n  state: [transaction, setTransaction],\r\n  onSubmit,\r\n  employees,\r\n}) => {\r\n  const formProps: MyFormProps<Transaction> = {\r\n    state: [transaction, setTransaction],\r\n    onSubmit,\r\n    validator,\r\n    radioButtonDefaultValue: transaction.position,\r\n  }\r\n\r\n  const [branch, setBranch] = useState<{ value: any; name: string } | null>(\r\n    null\r\n  )\r\n\r\n  const branchOptions: { value: any; name: string }[] = []\r\n\r\n  useEffect(() => {\r\n    setBranch(\r\n      branchOptions.find((b) => b.value === +transaction?.branch?.id!) || null\r\n    )\r\n  }, [transaction?.branch])\r\n\r\n  useEffect(() => {\r\n    setTransaction((transaction) => ({\r\n      ...transaction,\r\n      branch_manager: '',\r\n      agency_manager: '',\r\n      supervisor: '',\r\n      sales_agent: '',\r\n    }))\r\n  }, [])\r\n\r\n  const handleBranch = (e: any) => {\r\n    const b = branchOptions.find((b) => b.value === +e.target.value)\r\n\r\n    setBranch(b || null)\r\n  }\r\n\r\n  const employeeOptions = (id: number) =>\r\n    employees\r\n      .filter(\r\n        (employee) =>\r\n          employee.position?.id === id && +branch?.value === employee.branch?.id\r\n      )\r\n      .map((employee) => ({\r\n        value: employee.id || '',\r\n        name: `${employee.profile?.lastname}, ${employee.profile?.firstname}`,\r\n      }))\r\n\r\n  const map = new Map()\r\n  for (const employee of employees) {\r\n    if (!map.has(employee?.branch?.id)) {\r\n      map.set(employee?.branch?.id, true)\r\n      branchOptions.push({\r\n        value: +employee.branch?.id!,\r\n        name: employee.branch?.name!,\r\n      })\r\n    }\r\n  }\r\n\r\n  const labelMode =\r\n    transaction.payment_mode !== 'Installment'\r\n      ? transaction.payment_mode === 'Fullpayment'\r\n        ? 'Balance'\r\n        : 'Amount'\r\n      : 'Amount'\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myRadio, mySelect, myButton, myControlledInput, myInput }) => (\r\n        <>\r\n          <Grid\r\n            style={{ paddingLeft: 10, marginTop: 5, marginBottom: 10 }}\r\n            spacing={2}\r\n            container\r\n            xs={12}\r\n          >\r\n            {mySelect({\r\n              label: 'Payment Mode',\r\n              value: transaction.payment_mode,\r\n              name: 'payment_mode',\r\n              labelWidth: 110,\r\n              options: [{ value: 'Installment' }, { value: 'Fullpayment' }],\r\n            })}\r\n            {myControlledInput({\r\n              label: labelMode,\r\n              value: transaction.amount,\r\n              name: 'amount',\r\n            })}\r\n            {myInput({\r\n              label: 'OR Number',\r\n              value: transaction.or_number,\r\n              name: 'or_number',\r\n            })}\r\n\r\n            {mySelect({\r\n              label: 'Branch',\r\n              value: branch?.value || '',\r\n              name: 'branch',\r\n              labelWidth: 55,\r\n              onChange: handleBranch,\r\n              options: branchOptions,\r\n            })}\r\n\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Branch Manager',\r\n                  value: transaction.branch_manager,\r\n                  name: 'branch_manager',\r\n                  labelWidth: 120,\r\n                  options: employeeOptions(1),\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'branch_manager', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Agency Manager',\r\n                  value: transaction.agency_manager,\r\n                  name: 'agency_manager',\r\n                  labelWidth: 120,\r\n                  options: employeeOptions(2),\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'agency_manager', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Supervisor',\r\n                  value: transaction.supervisor,\r\n                  name: 'supervisor',\r\n                  labelWidth: 80,\r\n                  options: employeeOptions(3),\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'supervisor', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Sales Agent',\r\n                  value: transaction.sales_agent,\r\n                  name: 'sales_agent',\r\n                  labelWidth: 85,\r\n                  options: employeeOptions(4),\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'sales_agent', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n\r\n            {myButton()}\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\n\r\nexport default CommissionersForm\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\services\\authService.tsx",[],"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\services\\branchService.tsx",[],"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Commissions\\CommissionCard\\index.tsx",["506","507","508","509","510"],"import CardContent from '@material-ui/core/CardContent'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport MyCard from 'components/common/MyCard'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Chip from '@material-ui/core/Chip'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport ViewIcon from '@material-ui/icons/RemoveRedEye'\r\nimport Divider from '@material-ui/core/Divider'\r\n\r\nimport Commission from 'models/commission'\r\nimport MyAvatar from 'components/common/MyAvatar'\r\nimport { toMoney } from 'utils/helper'\r\n\r\nexport interface CommissionCardProps {\r\n  commission: Commission\r\n}\r\n\r\nconst CommissionCard: React.SFC<CommissionCardProps> = ({ commission }) => {\r\n  const history = useHistory()\r\n  const fullname = `${commission?.employee?.profile?.lastname}, ${commission?.employee?.profile?.firstname} ${commission?.employee?.profile?.lastname}`\r\n  return (\r\n    <MyCard title={`OR#${commission.payment?.or_number}`}>\r\n      <CardContent>\r\n        <Grid\r\n          style={{ marginBottom: 20 }}\r\n          xs={12}\r\n          justify='space-between'\r\n          container\r\n        >\r\n          <Grid\r\n            style={{ paddingLeft: 10 }}\r\n            container\r\n            item\r\n            direction='column'\r\n            xs={7}\r\n            justify='flex-start'\r\n          >\r\n            <Typography component='h3' variant='h6'>\r\n              {fullname}\r\n            </Typography>\r\n            <Typography variant='subtitle1' color='textSecondary'>\r\n              {commission?.employee?.position?.name}\r\n            </Typography>\r\n            <Typography variant='subtitle1' color='textSecondary'>\r\n              {toMoney(commission?.amount!)}\r\n            </Typography>\r\n            <Typography variant='caption' color='textSecondary'>\r\n              {new Date(commission?.created_at!).toDateString()}\r\n            </Typography>\r\n            <Grid item xs={1}>\r\n              <Chip\r\n                style={{ marginTop: 5 }}\r\n                size='small'\r\n                label={commission.is_release ? 'release' : 'unrelease'}\r\n                variant='outlined'\r\n                color={!commission.is_release ? 'secondary' : 'default'}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item xs={5} justify='center' alignItems='center'>\r\n            <MyAvatar\r\n              src={commission?.employee?.profile?.image_url}\r\n              onClick={() =>\r\n                history.push('/payments/' + commission?.payment?.id)\r\n              }\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </MyCard>\r\n  )\r\n}\r\n\r\nexport default CommissionCard\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\services\\paymentService.tsx",["511"],"import Payment from 'models/payment'\r\nimport http from 'utils/http'\r\n\r\nexport const getPayments = (props?: {\r\n  page?: number\r\n  search?: string\r\n  category?: string\r\n}) => {\r\n  return http\r\n    .get(\r\n      `/payments?page=${props?.page || ''}&search=${\r\n        props?.search || ''\r\n      }&category=${props?.category || ''}`\r\n    )\r\n    .then(({ data }) => ({\r\n      total: data.count,\r\n      pages: data.pages,\r\n      payments: data.items.map((item: any) => ({\r\n        ...item,\r\n        payment: { id: item.payment_id },\r\n        client: { ...item.client.profile, ...item.client },\r\n      })),\r\n    }))\r\n}\r\n\r\nexport const getPayment = (id: number) => {\r\n  return http.get('/payments/' + id).then(({ data }) => data)\r\n}\r\n\r\nexport const savePayments = (payment: any) => {\r\n  return http.post('/payments', payment).then(({ data }) => data)\r\n}\r\n\r\nexport const getRecentCommissionerByClient = (id: number) => {\r\n  return http.get('/commissions/client/' + id).then(({ data }) => data)\r\n}\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\services\\employeeService.tsx",[],"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\validators\\signInValidator.tsx",[],"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\validators\\saveBranchValidator.tsx",["512","513"],"import Joi from 'joi'\r\nimport { lettersOnly, notNull } from 'utils/helper'\r\n\r\nconst saveBranchValidator = {\r\n  name: Joi.string().required().label('Branch'),\r\n}\r\n\r\nexport default saveBranchValidator\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\services\\commissionService.tsx",[],"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Transactions\\ReleaseTransaction\\ReleaseCard\\index.tsx",["514","515","516","517"],"import React, { useContext, useState } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport Button from '@material-ui/core/Button'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Divider from '@material-ui/core/Divider'\r\n\r\nimport MyCard from 'components/common/MyCard'\r\nimport MyAvatar from 'components/common/MyAvatar'\r\nimport Commission from 'models/commission'\r\nimport ReleaseIcon from '@material-ui/icons/LocalAtm'\r\nimport { toMoney } from 'utils/helper'\r\n\r\nexport interface ReleaseCardProps {\r\n  commission: Commission\r\n  onRelease?: (commission: Commission) => void\r\n}\r\n\r\nconst ReleaseCard: React.SFC<ReleaseCardProps> = ({\r\n  commission,\r\n  onRelease,\r\n}) => {\r\n  const history = useHistory()\r\n\r\n  return (\r\n    <>\r\n      <MyCard\r\n        title={'Employee#' + commission?.employee?.id}\r\n        style={{ paddingBottom: 5 }}\r\n      >\r\n        <CardContent>\r\n          <Grid container xs={12} justify='space-between'>\r\n            <Grid\r\n              style={{ paddingLeft: 10 }}\r\n              container\r\n              item\r\n              direction='column'\r\n              xs={7}\r\n              justify='flex-start'\r\n            >\r\n              <Typography component='h3' variant='h6'>\r\n                {`${commission?.employee?.profile?.lastname}, ${commission?.employee?.profile?.firstname} ${commission?.employee?.profile?.middlename}`}\r\n              </Typography>\r\n              <Typography variant='subtitle1' color='textSecondary'>\r\n                {commission?.employee?.branch?.name}\r\n              </Typography>\r\n              <Typography variant='subtitle1' color='textSecondary'>\r\n                {commission?.employee?.position?.name}\r\n              </Typography>\r\n\r\n              <Typography variant='subtitle1' color='textSecondary'>\r\n                {toMoney(commission?.amount!)}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid container item xs={5} justify='center' alignItems='center'>\r\n              <MyAvatar\r\n                src={commission?.employee?.profile?.image_url}\r\n                // onClick={() => history.push('/commissions/' + commission.id)}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n\r\n        <Divider style={{ marginLeft: 20, marginRight: 20 }}></Divider>\r\n        <Grid style={{ padding: 15 }} container xs={12} justify='space-evenly'>\r\n          <Grid item xs={3}></Grid>\r\n          <Grid item xs={6}>\r\n            <Button\r\n              onClick={() => onRelease?.(commission)}\r\n              fullWidth\r\n              variant='text'\r\n              color='primary'\r\n            >\r\n              Release\r\n            </Button>\r\n          </Grid>\r\n\r\n          <Grid item xs={3}></Grid>\r\n        </Grid>\r\n      </MyCard>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ReleaseCard\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MyAvatar\\index.tsx",["518"],"import IconButton from '@material-ui/core/IconButton'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\r\nimport { image_provider } from 'configs/index.json'\r\n\r\nexport interface MyAvatarProps {\r\n  onClick?: () => void\r\n  text?: string\r\n  width?: number\r\n  height?: number\r\n  children?: () => JSX.Element\r\n  src?: string\r\n}\r\n\r\nconst MyAvatar: React.SFC<MyAvatarProps> = ({\r\n  onClick,\r\n  src,\r\n  width,\r\n  height,\r\n  children,\r\n}) => {\r\n  const styles = useStyles({ width, height })()\r\n  return (\r\n    <IconButton onClick={onClick}>\r\n      <Avatar\r\n        className={styles.avatar}\r\n        src={!!src ? image_provider + src : ''}\r\n        aria-label='clients'\r\n      >\r\n        {children?.()}\r\n      </Avatar>\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nconst useStyles = ({ width, height }: { height?: number; width?: number }) =>\r\n  makeStyles((theme: Theme) =>\r\n    createStyles({\r\n      avatar: {\r\n        width: width || 100,\r\n        height: height || 100,\r\n        backgroundColor: theme.palette.secondary.main,\r\n      },\r\n    })\r\n  )\r\n\r\nexport default MyAvatar\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MyCard\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MySkeletonCard\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MyAlertDialog\\index.tsx",["519"],"import React from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogContentText from '@material-ui/core/DialogContentText'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport { ToggleCheckBoxOutlineBlank } from 'material-ui/svg-icons'\r\n\r\nexport interface AlertDataProps {\r\n  open?: boolean\r\n  text?: string\r\n  description?: string\r\n}\r\n\r\ninterface MyAlertDialogProps {\r\n  data: AlertDataProps\r\n  onAgree?: () => void\r\n  onDisagree?: () => void\r\n}\r\n\r\nexport const MyAlertDialog: React.FC<MyAlertDialogProps> = ({\r\n  data: { open, text, description },\r\n  onAgree,\r\n  onDisagree,\r\n}) => {\r\n  return (\r\n    <div>\r\n      {open && (\r\n        <Dialog\r\n          open={open || false}\r\n          onClose={onDisagree}\r\n          aria-labelledby='alert-dialog-title'\r\n          aria-describedby='alert-dialog-description'\r\n        >\r\n          <DialogTitle id='alert-dialog-title'>{text}</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id='alert-dialog-description'>\r\n              {description}\r\n            </DialogContentText>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={onDisagree} color='default'>\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              style={{ marginRight: 10 }}\r\n              onClick={onAgree}\r\n              color='secondary'\r\n            >\r\n              Agree\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MyAlertDialog\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MyForm\\index.tsx",["520","521"],"import React, { useContext, memo } from 'react'\r\nimport Joi from 'joi'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport Select from '@material-ui/core/Select'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Button from '@material-ui/core/Button'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Radio from '@material-ui/core/Radio'\r\nimport DateFnsUtils from '@date-io/date-fns/build'\r\nimport FormHelperText from '@material-ui/core/FormHelperText'\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput'\r\nimport InputAdornment from '@material-ui/core/InputAdornment'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff'\r\nimport Visibility from '@material-ui/icons/Visibility'\r\nimport HeadShake from 'react-reveal/HeadShake'\r\n\r\nimport {\r\n  KeyboardDatePicker,\r\n  MuiPickersUtilsProvider,\r\n} from '@material-ui/pickers'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\n\r\nexport interface MyFormProps<T> {\r\n  state: [T, React.Dispatch<React.SetStateAction<T>>]\r\n  onSubmit: (data: T) => Promise<any>\r\n  validator?: {}\r\n  radioButtonDefaultValue?: string\r\n  children?: (props: RenderProps) => JSX.Element\r\n}\r\n\r\nexport interface InputProps {\r\n  value?: any\r\n  name: string\r\n  placeholder?: string\r\n  type?: string | 'text'\r\n  label?: string\r\n  isMultiline?: boolean\r\n  onChange?: (e: any) => void\r\n  onTogglePassword?: React.Dispatch<React.SetStateAction<boolean>>\r\n}\r\n\r\nexport interface OptionProps {\r\n  name?: string\r\n  value: any\r\n}\r\n\r\nexport interface SelectProps extends InputProps {\r\n  options: OptionProps[]\r\n  subLabel?: string\r\n  labelWidth?: number\r\n}\r\n\r\nexport interface RenderProps {\r\n  myInput: (input: InputProps) => JSX.Element\r\n  myInputPassword: (input: InputProps) => JSX.Element\r\n  myDateTimePicker: (input: InputProps) => JSX.Element\r\n  myButton: (text?: string) => JSX.Element\r\n  mySelect: (select: SelectProps) => JSX.Element\r\n  myRadio: (input: InputProps) => JSX.Element\r\n  myControlledInput: (input: InputProps) => JSX.Element\r\n  MyButtonMemo: React.MemoExoticComponent<\r\n    (props: { text?: string }) => JSX.Element\r\n  >\r\n}\r\n\r\nconst MyButtonMemo = (isDisable: boolean) =>\r\n  memo((props: { text?: string }) => {\r\n    console.log('hit memo')\r\n    return (\r\n      <Grid item xs={12}>\r\n        <Button\r\n          disabled={isDisable}\r\n          style={{ paddingTop: 15, paddingBottom: 15 }}\r\n          fullWidth\r\n          type='submit'\r\n          variant='contained'\r\n          color='primary'\r\n          startIcon={\r\n            isDisable && (\r\n              <CircularProgress\r\n                color='primary'\r\n                size={24}\r\n                style={{\r\n                  position: 'absolute',\r\n                  top: '50%',\r\n                  left: '50%',\r\n                  marginTop: -12,\r\n                  marginLeft: -12,\r\n                }}\r\n              />\r\n            )\r\n          }\r\n        >\r\n          {props.text ?? 'SUBMIT'}\r\n        </Button>\r\n      </Grid>\r\n    )\r\n  })\r\n\r\nfunction MyForm<T>(props: MyFormProps<T>) {\r\n  const [state, dispatch] = useContext(GlobalContext)!\r\n\r\n  const [data, setData] = props.state\r\n\r\n  const [isDisable, setIsDisable] = React.useState<boolean>(false)\r\n\r\n  const [selectedValue, setSelectedValue] = React.useState(\r\n    props.radioButtonDefaultValue ?? ''\r\n  )\r\n\r\n  const [errors, setErrors] = React.useState<any>(null)\r\n\r\n  const onValidate = (_data: T) => {\r\n    const schema = Joi.object(props.validator).options({\r\n      abortEarly: false,\r\n      allowUnknown: true,\r\n    })\r\n\r\n    const { error } = schema.validate(_data)\r\n\r\n    if (!error) return null\r\n\r\n    console.log(error)\r\n\r\n    const _errors: any = {}\r\n\r\n    error.details.forEach((item) => (_errors[item.path[0]] = item.message))\r\n\r\n    return _errors\r\n  }\r\n\r\n  const onChangeRadio = (e: any) => {\r\n    setSelectedValue(e.target.value)\r\n  }\r\n\r\n  const onSubmit = (e: any) => {\r\n    e.preventDefault()\r\n\r\n    const newData = { ...data } as any\r\n\r\n    for (let [key, value] of new FormData(e.target).entries()) {\r\n      newData[key] = value\r\n    }\r\n    const hasErrors = onValidate(newData)\r\n\r\n    setIsDisable(true)\r\n\r\n    if (hasErrors) {\r\n      dispatch({\r\n        type: 'SET_ALERT',\r\n        payload: {\r\n          message: 'Fill out all the fields.',\r\n          type: 'error',\r\n        },\r\n      })\r\n      setErrors(hasErrors)\r\n      setIsDisable(false)\r\n      return\r\n    }\r\n\r\n    return props\r\n      .onSubmit(newData)\r\n      .then(() => {\r\n        setErrors({})\r\n        setIsDisable(false)\r\n      })\r\n      .catch((error) => {\r\n        setIsDisable(false)\r\n      })\r\n  }\r\n\r\n  const myInput = (input: InputProps) => {\r\n    const error = errors && errors[input.name]\r\n\r\n    return (\r\n      <Grid item xs={12} key={input.name}>\r\n        <TextField\r\n          defaultValue={input.value}\r\n          multiline={input.isMultiline}\r\n          fullWidth\r\n          name={input.name}\r\n          variant='outlined'\r\n          label={input.label}\r\n          type={input.type}\r\n          error={!!error}\r\n          helperText={error}\r\n        />\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  const myControlledInput = (input: InputProps) => {\r\n    const error = errors && errors[input.name]\r\n\r\n    return (\r\n      <Grid item xs={12} key={input.name}>\r\n        <TextField\r\n          value={input.value}\r\n          multiline={input.isMultiline}\r\n          fullWidth\r\n          name={input.name}\r\n          variant='outlined'\r\n          label={input.label}\r\n          type={input.type}\r\n          error={!!error}\r\n          helperText={error}\r\n          onChange={(e) =>\r\n            input.onChange\r\n              ? input.onChange(e)\r\n              : setData((data) => ({ ...data, [input.name]: e.target.value }))\r\n          }\r\n        />\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  const myInputPassword = (input: InputProps) => {\r\n    const error = errors && errors[input.name]\r\n\r\n    return (\r\n      <Grid item xs={12} key={input.name}>\r\n        <FormControl fullWidth variant='outlined' error={!!error}>\r\n          <InputLabel htmlFor={input.label}>{input.label}</InputLabel>\r\n          <OutlinedInput\r\n            defaultValue={input.value}\r\n            id={input.name}\r\n            name={input.name}\r\n            type={input.type}\r\n            labelWidth={70}\r\n            endAdornment={\r\n              <InputAdornment position='end'>\r\n                <IconButton\r\n                  aria-label='toggle password visibility'\r\n                  onClick={() =>\r\n                    input.onTogglePassword?.call(\r\n                      null,\r\n                      (isVisible) => !isVisible\r\n                    )\r\n                  }\r\n                >\r\n                  {input.type !== 'password' ? (\r\n                    <Visibility />\r\n                  ) : (\r\n                    <VisibilityOff />\r\n                  )}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            }\r\n          />\r\n          <FormHelperText>{error}</FormHelperText>\r\n        </FormControl>\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  const myDateTimePicker = (input: InputProps) => {\r\n    const error = errors && errors[input.name]\r\n\r\n    return (\r\n      <Grid item xs={12} key={input.name}>\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n          <KeyboardDatePicker\r\n            fullWidth\r\n            inputVariant='outlined'\r\n            disableToolbar\r\n            variant='dialog'\r\n            format='MM/dd/yyyy'\r\n            margin='none'\r\n            error={!!error}\r\n            helperText={error}\r\n            label={input.label}\r\n            value={input.value ?? null}\r\n            onChange={(date) => {\r\n              setData({\r\n                ...data,\r\n                [input.name]: date?.toLocaleDateString(),\r\n              })\r\n            }}\r\n            KeyboardButtonProps={{\r\n              'aria-label': 'change date',\r\n            }}\r\n          />\r\n        </MuiPickersUtilsProvider>\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  const myRadio = (input: InputProps) => {\r\n    return (\r\n      <Radio\r\n        checked={selectedValue === input.value}\r\n        onChange={onChangeRadio}\r\n        value={input.value}\r\n        name={input.name}\r\n      />\r\n    )\r\n  }\r\n\r\n  const mySelect = (select: SelectProps) => {\r\n    const error = errors && errors[select.name ?? select.value]\r\n    return (\r\n      <Grid item xs={12} key={select.name ?? select.value}>\r\n        <FormControl fullWidth variant='outlined' error={!!error}>\r\n          <InputLabel id={select.label}>{select.label}</InputLabel>\r\n          <Select\r\n            labelId={select.label}\r\n            id={select.name ?? select.value}\r\n            name={select.name ?? select.value}\r\n            value={select.value || ''}\r\n            onChange={\r\n              select.onChange\r\n                ? select.onChange\r\n                : (e: any) => {\r\n                    const { value } = e.target\r\n                    if (error && value !== 'clear') {\r\n                      const _errors = { ...errors }\r\n                      delete _errors[select.name]\r\n                      setErrors(_errors)\r\n                    }\r\n                    setData({\r\n                      ...data,\r\n                      [select.name]: value !== 'clear' ? value : '',\r\n                    })\r\n                  }\r\n            }\r\n            labelWidth={select.labelWidth ?? 60}\r\n          >\r\n            {select.options.map((option) => (\r\n              <MenuItem value={option.value}>\r\n                {option.name\r\n                  ? select.subLabel\r\n                    ? option.name + '-' + select.subLabel\r\n                    : option.name\r\n                  : option.value}\r\n              </MenuItem>\r\n            ))}\r\n            <Divider style={{ marginLeft: 15, marginRight: 15 }}></Divider>\r\n            <MenuItem value='clear'>Clear</MenuItem>\r\n          </Select>\r\n          <FormHelperText>{error}</FormHelperText>\r\n        </FormControl>\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  const myButton = (text?: string) => {\r\n    return (\r\n      <Grid item xs={12}>\r\n        <Button\r\n          disabled={isDisable}\r\n          fullWidth\r\n          type='submit'\r\n          variant='contained'\r\n          color='primary'\r\n          startIcon={\r\n            isDisable && (\r\n              <CircularProgress\r\n                color='primary'\r\n                size={24}\r\n                style={{\r\n                  position: 'absolute',\r\n                  top: '50%',\r\n                  left: '50%',\r\n                  marginTop: -12,\r\n                  marginLeft: -12,\r\n                }}\r\n              />\r\n            )\r\n          }\r\n        >\r\n          {text ?? 'SUBMIT'}\r\n        </Button>\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <Grid\r\n        style={{ pointerEvents: isDisable ? 'none' : 'all' }}\r\n        container\r\n        spacing={2}\r\n        direction='column'\r\n      >\r\n        {props.children?.({\r\n          myInput,\r\n          myControlledInput,\r\n          myInputPassword,\r\n          mySelect,\r\n          myDateTimePicker,\r\n          myButton,\r\n          myRadio,\r\n          MyButtonMemo: MyButtonMemo(isDisable),\r\n        } as RenderProps)}\r\n      </Grid>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default MyForm\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MySkeletonMiniCards\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MySearchField\\index.tsx",["522"],"import FormControl from '@material-ui/core/FormControl'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport OutlinedInput, {\r\n  OutlinedInputProps,\r\n} from '@material-ui/core/OutlinedInput'\r\nimport InputAdornment from '@material-ui/core/InputAdornment'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport { useState } from 'react'\r\nimport { AnyCnameRecord } from 'dns'\r\n\r\nexport interface MySearchFieldProps extends OutlinedInputProps {\r\n  label?: string\r\n  onSearch?: (value: string) => void\r\n}\r\n\r\nconst MySearchField: React.SFC<MySearchFieldProps> = ({\r\n  label,\r\n  onSearch,\r\n  ...props\r\n}) => {\r\n  const [value, setValue] = useState('')\r\n\r\n  const handlePress = (event: any) => {\r\n    if (event.key === 'Enter') {\r\n      onSearch?.call(null, value)\r\n    }\r\n  }\r\n  return (\r\n    <FormControl fullWidth variant='outlined'>\r\n      <InputLabel htmlFor='outlined-adornment-password'>\r\n        {label || 'Search...'}\r\n      </InputLabel>\r\n      <OutlinedInput\r\n        {...props}\r\n        id='outlined-adornment-password'\r\n        name='search'\r\n        type='text'\r\n        labelWidth={props.labelWidth ? props.labelWidth : 65}\r\n        value={value}\r\n        onKeyPress={handlePress}\r\n        onChange={(event) => setValue(event.target.value)}\r\n        endAdornment={\r\n          <InputAdornment position='end'>\r\n            <IconButton\r\n              onClick={() => onSearch?.call(null, value)}\r\n              aria-label='toggle password visibility'\r\n            >\r\n              <SearchIcon />\r\n            </IconButton>\r\n          </InputAdornment>\r\n        }\r\n      />\r\n    </FormControl>\r\n  )\r\n}\r\n\r\nexport default MySearchField\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MyMiniCards\\index.tsx",["523","524"],"import Grid, { GridProps } from '@material-ui/core/Grid'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardHeader from '@material-ui/core/CardHeader'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { useState, useContext } from 'react'\r\nimport Fade from 'react-reveal/Fade'\r\n\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport { image_provider } from 'configs/index.json'\r\n\r\ninterface RenderProps<T> {\r\n  renderCards: (props: RenderCardsProps<T>) => JSX.Element\r\n  item: T\r\n}\r\n\r\ninterface RenderCardsProps<T> {\r\n  title: string\r\n  subtitle: string\r\n  src?: string\r\n  item?: T\r\n}\r\n\r\nexport interface MyMiniCardsProps<T> extends GridProps {\r\n  items: T[]\r\n  onSelected?: (item: T) => void\r\n  children?: (props: RenderProps<T>) => JSX.Element\r\n}\r\n\r\nfunction MyMiniCards<T>({\r\n  items,\r\n  onSelected,\r\n  children,\r\n  ...props\r\n}: MyMiniCardsProps<T>) {\r\n  const [state, _] = useContext(GlobalContext)!\r\n\r\n  const styles = useStyles(state.isDark)()\r\n\r\n  const [selectedItem, setSelectedItem] = useState<T>()\r\n\r\n  const renderCards = ({ src, title, subtitle, item }: RenderCardsProps<T>) => {\r\n    return (\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar\r\n            className={styles.avatar}\r\n            src={!!src ? image_provider + src : ''}\r\n            aria-label='item'\r\n          ></Avatar>\r\n        }\r\n        title={title}\r\n        subheader={subtitle}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Grid\r\n      {...props}\r\n      container\r\n      xs={12}\r\n      justify='flex-start'\r\n      direction='row'\r\n      spacing={1}\r\n      alignItems='center'\r\n      className={styles.container}\r\n    >\r\n      {items.map((item, index) => (\r\n        <Grid item xs={12} key={index}>\r\n          <Fade>\r\n            <Card\r\n              style={{ minHeight: 92, display: 'flex', alignItems: 'center' }}\r\n              className={\r\n                selectedItem === item ? styles.headerSelected : styles.header\r\n              }\r\n              onClick={() => {\r\n                onSelected?.(item)\r\n                setSelectedItem(item)\r\n              }}\r\n            >\r\n              {children?.({ renderCards, item } as RenderProps<T>)}\r\n            </Card>\r\n          </Fade>\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  )\r\n}\r\n\r\nconst useStyles = (isDark: boolean) =>\r\n  makeStyles((theme: Theme) =>\r\n    createStyles({\r\n      avatar: {\r\n        backgroundColor: theme.palette.secondary.main,\r\n      },\r\n      headerSelected: {\r\n        width: 230,\r\n        backgroundColor: !isDark\r\n          ? theme.palette.grey[300]\r\n          : theme.palette.grey[700],\r\n      },\r\n      header: {\r\n        width: 230,\r\n      },\r\n      container: {\r\n        marginLeft: 0,\r\n        padding: 0,\r\n        paddingBottom: 5,\r\n\r\n        WebkitOverflowScrolling: 'touch',\r\n        overflowX: 'auto',\r\n        flexWrap: 'nowrap',\r\n      },\r\n    })\r\n  )\r\n\r\nexport default MyMiniCards\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\validators\\clientTransactionValidator.tsx",["525"],"import Joi from 'joi'\r\nimport { lettersOnly, notNull } from 'utils/helper'\r\n\r\nconst clientTransactionValidator = {\r\n  branch_manager: notNull('Branch Manager'),\r\n  agency_manager: notNull('Agency Manager'),\r\n  supervisor: notNull('Supervisor'),\r\n  position: notNull('Position'),\r\n  amount: Joi.number().positive().not(0).required().label('Amount'),\r\n  payment_mode: notNull('Payment Mode'),\r\n  or_number: notNull('OR Number'),\r\n}\r\n\r\nexport default clientTransactionValidator\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MyChips\\index.tsx",["526"],"import { useState } from 'react'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Chip from '@material-ui/core/Chip'\r\nimport Badge from '@material-ui/core/Badge'\r\nimport Fade from 'react-reveal/Fade'\r\n\r\nexport interface MyChipsProps {\r\n  chips: MyChip[]\r\n  onChipSelected?: (chip: MyChip) => void\r\n  active: MyChip\r\n  count?: number\r\n}\r\n\r\nexport interface MyChip {\r\n  value: any\r\n  name: string\r\n}\r\n\r\nconst MyChips: React.SFC<MyChipsProps> = ({\r\n  chips,\r\n  active,\r\n  onChipSelected,\r\n  count,\r\n}) => {\r\n  const renderChips = (chip: MyChip) => {\r\n    return (\r\n      <Fade>\r\n        <Grid style={{ marginRight: 10 }} key={chip.value} item>\r\n          <Badge\r\n            invisible={active.value !== chip.value}\r\n            badgeContent={count! >= 100 ? '99+' : count}\r\n            color='primary'\r\n          >\r\n            <Chip\r\n              onClick={() => onChipSelected?.(chip)}\r\n              color={active.value === chip.value ? 'secondary' : 'default'}\r\n              variant={active.value === chip.value ? 'default' : 'outlined'}\r\n              size='medium'\r\n              label={chip.name}\r\n            />\r\n          </Badge>\r\n        </Grid>\r\n      </Fade>\r\n    )\r\n  }\r\n  return (\r\n    <>\r\n      <Grid\r\n        style={{\r\n          marginLeft: 0,\r\n          padding: 0,\r\n          marginBottom: 15,\r\n          paddingBottom: 0,\r\n          paddingTop: 15,\r\n          WebkitOverflowScrolling: 'touch',\r\n          overflowX: 'auto',\r\n          flexWrap: 'nowrap',\r\n        }}\r\n        container\r\n        xs={12}\r\n        justify='flex-start'\r\n        direction='row'\r\n        spacing={1}\r\n        alignItems='center'\r\n      >\r\n        {chips.map((chip) => renderChips(chip))}\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MyChips\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Clients\\NewClient\\ClientStepThree.tsx",["527","528","529","530"],"import { useContext, useEffect, useState } from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport MyForm, { MyFormProps, OptionProps } from 'components/common/MyForm'\r\nimport Client from 'models/client'\r\nimport Commissioner from 'models/commissioner'\r\nimport validator from 'validators/clientStepThreeValidator'\r\nimport { getAmountToPay } from 'services/clientService'\r\nimport { ClientContext } from 'providers/ClientProvider'\r\nimport Payment from 'models/payment'\r\n\r\nexport interface ClientStepTwoProps {\r\n  onBack: () => void\r\n  onNext: (client: Client & Payment) => Promise<void>\r\n  state: [\r\n    Client & Payment,\r\n    React.Dispatch<React.SetStateAction<Client & Payment>>\r\n  ]\r\n}\r\n\r\nexport const ClientStepThree: React.SFC<ClientStepTwoProps> = ({\r\n  state: [client, setClient],\r\n  onBack,\r\n  onNext,\r\n}) => {\r\n  const [clientState, clientDispatch] = useContext(ClientContext)!\r\n  const [planOptions, setPlanOptions] = useState<OptionProps[] | []>([])\r\n\r\n  useEffect(() => {\r\n    if (client.payment_mode && client.plan) {\r\n      const plan = clientState.plans.filter(\r\n        (plan) => plan.id === (client.plan as any)\r\n      )[0]\r\n      setClient((client) => ({\r\n        ...client,\r\n        amount: getAmountToPay({ ...client, plan }) ?? 0,\r\n      }))\r\n    }\r\n  }, [client.payment_mode, client.payment_period, client.plan])\r\n\r\n  useEffect(() => {\r\n    const options: OptionProps[] = clientState.plans.map((plan) => ({\r\n      value: plan.id,\r\n      name: plan.name,\r\n    }))\r\n    setPlanOptions(options)\r\n  }, [clientState.plans])\r\n\r\n  const formProps: MyFormProps<Client & Payment> = {\r\n    state: [client, setClient],\r\n    onSubmit: onNext,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({\r\n        myControlledInput,\r\n        myInput,\r\n        mySelect,\r\n        myButton,\r\n        myDateTimePicker,\r\n      }) => (\r\n        <>\r\n          {mySelect({\r\n            label: 'Plan',\r\n            value: client.plan,\r\n            name: 'plan',\r\n            labelWidth: 30,\r\n            options: planOptions,\r\n          })}\r\n          {mySelect({\r\n            label: 'Payment Mode',\r\n            value: client.payment_mode,\r\n            name: 'payment_mode',\r\n            labelWidth: 110,\r\n            options: [{ value: 'Installment' }, { value: 'Fullpayment' }],\r\n          })}\r\n\r\n          {client.payment_mode && client.plan && (\r\n            <>\r\n              {client.payment_mode === 'Installment' &&\r\n                mySelect({\r\n                  label: 'Payment Period',\r\n                  value: client.payment_period,\r\n                  name: 'payment_period',\r\n                  labelWidth: 120,\r\n                  options: [\r\n                    { value: 'Monthly' },\r\n                    { value: 'Quarterly' },\r\n                    { value: 'Semi-Annually' },\r\n                    { value: 'Annually' },\r\n                  ],\r\n                })}\r\n              <Grid\r\n                xs={12}\r\n                spacing={1}\r\n                style={{\r\n                  marginBottom: 10,\r\n                  marginTop: 5,\r\n                  paddingLeft: 8,\r\n                }}\r\n                container\r\n              >\r\n                {myControlledInput({\r\n                  label: 'Amount',\r\n                  name: 'amount',\r\n                  value: client.amount,\r\n                })}\r\n                <Grid style={{ marginTop: 10 }} xs={12} item>\r\n                  {myInput({\r\n                    label: 'OR Number',\r\n                    name: 'or_number',\r\n                  })}\r\n                </Grid>\r\n              </Grid>\r\n              {myDateTimePicker({\r\n                label: 'Insure Date',\r\n                value: client.created_at,\r\n                name: 'created_at',\r\n              })}\r\n            </>\r\n          )}\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 15, paddingBottom: 15 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => onBack()}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton('PAY')}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Clients\\NewClient\\ClientStepTwo.tsx",["531","532","533","534","535","536","537","538","539","540"],"import React, { useEffect, useState, useContext } from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport MyForm, { MyFormProps } from 'components/common/MyForm'\r\nimport Client from 'models/client'\r\nimport Commissioner from 'models/commissioner'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport validator from 'validators/clientStepTwoValidator'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport { getEmployees } from 'services/employeeService'\r\nimport Employee from 'models/employee'\r\nimport Branch from 'models/branch'\r\nimport { access } from 'fs'\r\nimport Employees from 'components/pages/Employees'\r\n\r\nexport interface ClientStepTwoProps {\r\n  onBack: () => void\r\n  onNext: (commissioner: Commissioner) => Promise<void>\r\n  state: [Commissioner, React.Dispatch<React.SetStateAction<Commissioner>>]\r\n  employees: Employee[]\r\n}\r\n\r\nexport const ClientStepTwo: React.SFC<ClientStepTwoProps> = ({\r\n  state: [commissioner, setCommissioner],\r\n  onBack,\r\n  onNext,\r\n  employees,\r\n}) => {\r\n  const [branch, setBranch] = useState<{ value: any; name: string } | null>(\r\n    null\r\n  )\r\n\r\n  const formProps: MyFormProps<Commissioner> = {\r\n    state: [commissioner, setCommissioner],\r\n    onSubmit: onNext,\r\n    validator,\r\n    radioButtonDefaultValue: commissioner.position,\r\n  }\r\n\r\n  useEffect(() => {\r\n    setCommissioner({\r\n      position: 'sales_agent',\r\n    })\r\n  }, [branch])\r\n\r\n  const employeeOptions = (id: number) =>\r\n    employees\r\n      .filter(\r\n        (employee) =>\r\n          employee.position?.id === id && +branch?.value === employee.branch?.id\r\n      )\r\n      .map((employee) => ({\r\n        value: employee.id || '',\r\n        name: `${employee.profile?.lastname}, ${employee.profile?.firstname}`,\r\n      }))\r\n\r\n  const branchOptions: { value: any; name: string }[] = []\r\n  const map = new Map()\r\n  for (const employee of employees) {\r\n    if (!map.has(employee?.branch?.id)) {\r\n      map.set(employee?.branch?.id, true)\r\n      branchOptions.push({\r\n        value: +employee.branch?.id!,\r\n        name: employee.branch?.name!,\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleBranch = (e: any) => {\r\n    const b = branchOptions.find((b) => b.value === +e.target.value)\r\n    console.log(b)\r\n    setBranch(b || null)\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myRadio, mySelect, myButton }) => (\r\n        <>\r\n          <Grid\r\n            style={{ paddingLeft: 10, marginTop: 5 }}\r\n            spacing={2}\r\n            container\r\n            xs={12}\r\n          >\r\n            <Grid item xs={12}>\r\n              {mySelect({\r\n                label: 'Branch',\r\n                value: branch?.value || '',\r\n                name: 'branch',\r\n                labelWidth: 55,\r\n                onChange: handleBranch,\r\n                options: branchOptions,\r\n              })}\r\n            </Grid>\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Branch Manager',\r\n                  value: commissioner.branch_manager || '',\r\n                  name: 'branch_manager',\r\n                  labelWidth: 120,\r\n                  options: employeeOptions(1),\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'branch_manager', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Agency Manager',\r\n                  value: commissioner.agency_manager || '',\r\n                  name: 'agency_manager',\r\n                  labelWidth: 120,\r\n                  options: employeeOptions(2),\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'agency_manager', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Supervisor',\r\n                  value: commissioner.supervisor || '',\r\n                  name: 'supervisor',\r\n                  labelWidth: 80,\r\n                  options: employeeOptions(3),\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'supervisor', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n\r\n            <>\r\n              <Grid item xs={10}>\r\n                {mySelect({\r\n                  label: 'Sales Agent',\r\n                  value: commissioner.sales_agent || '',\r\n                  name: 'sales_agent',\r\n                  labelWidth: 85,\r\n                  options: employeeOptions(4),\r\n                })}\r\n              </Grid>\r\n              <Grid container item xs={2} justify='center' alignItems='center'>\r\n                {myRadio({ value: 'sales_agent', name: 'position' })}\r\n              </Grid>\r\n            </>\r\n          </Grid>\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 15, paddingBottom: 15 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Button\r\n                onClick={() => onBack()}\r\n                style={{ paddingTop: 15, paddingBottom: 15 }}\r\n                fullWidth\r\n                variant='contained'\r\n                color='default'\r\n              >\r\n                BACK\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton('NEXT')}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Clients\\NewClient\\ClientStepOne.tsx",["541"],"import React, { useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport PhotoCamera from \"@material-ui/icons/PhotoCamera\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport MyForm, { MyFormProps } from \"components/common/MyForm\";\r\nimport Profile from \"models/profile\";\r\nimport validator from \"validators/saveProfileValidator\";\r\nimport { GlobalContext } from \"providers/GlobalProvider\";\r\n\r\nexport interface ClientStepOneProps {\r\n  state: [Profile, React.Dispatch<React.SetStateAction<Profile>>];\r\n  onNext: (profile: Profile) => Promise<void>;\r\n}\r\n\r\nexport const ClientStepOne: React.SFC<ClientStepOneProps> = ({\r\n  state: [profile, setProfile],\r\n  onNext,\r\n}) => {\r\n  const [{ currentUser }, _] = useContext(GlobalContext)!;\r\n\r\n  const history = useHistory();\r\n\r\n  const [imageFile, setImageFile] = React.useState<HTMLImageElement | null>(\r\n    null\r\n  );\r\n\r\n  const formProps: MyFormProps<Profile> = {\r\n    state: [profile, setProfile],\r\n    onSubmit: onNext,\r\n    validator,\r\n  };\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myInput, mySelect, myDateTimePicker, myButton }) => (\r\n        <>\r\n          {myInput({\r\n            label: \"Firstname\",\r\n            value: profile.firstname,\r\n            name: \"firstname\",\r\n          })}\r\n          {myInput({\r\n            label: \"Middlename\",\r\n            value: profile.middlename,\r\n            name: \"middlename\",\r\n          })}\r\n          {myInput({\r\n            label: \"Lastname\",\r\n            value: profile.lastname,\r\n            name: \"lastname\",\r\n          })}\r\n          {myInput({\r\n            label: \"Contact Number\",\r\n            value: profile.contact,\r\n            name: \"contact\",\r\n          })}\r\n\r\n          {myInput({\r\n            label: \"Address\",\r\n            value: profile.address,\r\n            name: \"address\",\r\n            isMultiline: true,\r\n          })}\r\n\r\n          {myDateTimePicker({\r\n            label: \"Birthdate\",\r\n            value: profile.birthdate,\r\n            name: \"birthdate\",\r\n          })}\r\n\r\n          {mySelect({\r\n            label: \"Gender\",\r\n            value: profile.gender,\r\n            name: \"gender\",\r\n            options: [\r\n              { value: \"Male\" },\r\n              { value: \"Female\" },\r\n              { value: \"Other\" },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: \"Civil Status\",\r\n            value: profile.civil,\r\n            name: \"civil\",\r\n            labelWidth: 80,\r\n            options: [\r\n              { value: \"Single\" },\r\n              { value: \"Married\" },\r\n              { value: \"Widowed\" },\r\n            ],\r\n          })}\r\n\r\n          <Grid\r\n            container\r\n            style={{\r\n              paddingLeft: 15,\r\n              paddingRight: 15,\r\n              marginBottom: 10,\r\n            }}\r\n            alignItems=\"center\"\r\n            justify=\"space-between\"\r\n            xs={12}\r\n          >\r\n            <Typography variant=\"subtitle1\">\r\n              {imageFile?.name || \"Select Photo\"}\r\n            </Typography>\r\n            <>\r\n              <input\r\n                accept=\"image/*\"\r\n                style={{\r\n                  display: \"none\",\r\n                }}\r\n                name=\"image\"\r\n                id=\"icon-button-file\"\r\n                type=\"file\"\r\n                onChange={(e: any) => {\r\n                  setImageFile(e.target.files[0]);\r\n                }}\r\n              />\r\n              <label htmlFor=\"icon-button-file\">\r\n                <IconButton\r\n                  color=\"primary\"\r\n                  aria-label=\"upload picture\"\r\n                  component=\"span\"\r\n                >\r\n                  <PhotoCamera />\r\n                </IconButton>\r\n              </label>\r\n            </>\r\n          </Grid>\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 10, paddingBottom: 5 }}\r\n            container\r\n            xs={12}\r\n            justify=\"center\"\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              {currentUser?.role === \"admin\" && (\r\n                <Button\r\n                  onClick={() => history.goBack()}\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"default\"\r\n                >\r\n                  BACK\r\n                </Button>\r\n              )}\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton(\"NEXT\")}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  );\r\n};\r\n\r\nexport default ClientStepOne;\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\validators\\saveEmployeeValidator.tsx",["542","543"],"import Joi from 'joi'\r\nimport Employee from 'models/employee'\r\nimport { lettersOnly, notNull } from 'utils/helper'\r\n\r\nconst saveEmployeeValidator = {\r\n  firstname: lettersOnly('Firstname').min(1).max(50),\r\n  middlename: lettersOnly('Middlename').min(1).max(50),\r\n  lastname: lettersOnly('Lastname').min(1).max(50),\r\n  position: notNull('Position'),\r\n  status: notNull('Status'),\r\n  civil: notNull('Civil Status'),\r\n  gender: notNull('Gender'),\r\n  branch: notNull('Branch'),\r\n}\r\n\r\nexport default saveEmployeeValidator\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Employees\\EmployeeCard\\index.tsx",["544","545","546"],"import React, { useContext, useState } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport ViewIcon from '@material-ui/icons/RemoveRedEye'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport Chip from '@material-ui/core/Chip'\r\n\r\nimport MyCard from 'components/common/MyCard'\r\nimport MyAvatar from 'components/common/MyAvatar'\r\nimport Employee from 'models/employee'\r\nimport { EmployeeContext } from 'providers/EmployeeProvider'\r\n\r\nexport interface EmployeesProps {\r\n  employee: Partial<Employee>\r\n  onArchive?: (employee: Employee) => void\r\n}\r\n\r\nconst EmployeeCard: React.SFC<EmployeesProps> = ({ employee, onArchive }) => {\r\n  const history = useHistory()\r\n\r\n  return (\r\n    <>\r\n      <MyCard title={'Employee#' + employee.id} style={{ paddingBottom: 5 }}>\r\n        <CardContent>\r\n          <Grid container xs={12} justify='space-between'>\r\n            <Grid\r\n              style={{ paddingLeft: 10 }}\r\n              container\r\n              item\r\n              direction='column'\r\n              xs={7}\r\n              justify='flex-start'\r\n            >\r\n              <Typography component='h3' variant='h6'>\r\n                {`${employee.lastname}, ${employee.firstname} ${employee.middlename}`}\r\n              </Typography>\r\n              <Typography variant='subtitle1' color='textSecondary'>\r\n                {employee?.position?.name}\r\n              </Typography>\r\n              <Typography variant='subtitle1' color='textSecondary'>\r\n                {employee?.branch?.name}\r\n              </Typography>\r\n\r\n              <Grid item xs={1}>\r\n                <Chip\r\n                  style={{ marginTop: 5 }}\r\n                  size='small'\r\n                  label={employee.status}\r\n                  variant='outlined'\r\n                  color={\r\n                    employee.status !== 'active'\r\n                      ? employee.status === 'deactive'\r\n                        ? 'secondary'\r\n                        : 'default'\r\n                      : 'primary'\r\n                  }\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid container item xs={5} justify='center' alignItems='center'>\r\n              <MyAvatar\r\n                src={employee.image_url}\r\n                onClick={() => history.push('/employees/' + employee.id)}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n\r\n        <Divider style={{ marginLeft: 20, marginRight: 20 }}></Divider>\r\n        <Grid container xs={12} justify='space-evenly'>\r\n          <IconButton\r\n            onClick={() => history.push('/employees/' + employee.id)}\r\n            aria-label='view'\r\n          >\r\n            <ViewIcon />\r\n          </IconButton>\r\n          <IconButton\r\n            onClick={() => history.push('/employees/edit/' + employee.id)}\r\n            aria-label='edit'\r\n          >\r\n            <EditIcon />\r\n          </IconButton>\r\n          <IconButton\r\n            onClick={() => onArchive?.(employee)}\r\n            aria-label='archive'\r\n          >\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Grid>\r\n      </MyCard>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EmployeeCard\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Branches\\BranchCard\\index.tsx",["547","548","549"],"import CardContent from '@material-ui/core/CardContent'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport MyCard from 'components/common/MyCard'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Chip from '@material-ui/core/Chip'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport ViewIcon from '@material-ui/icons/RemoveRedEye'\r\nimport Divider from '@material-ui/core/Divider'\r\n\r\nimport Branch from 'models/branch'\r\n\r\nexport interface BranchCardProps {\r\n  branch: Branch\r\n  onArchive?: (branch: Branch) => void\r\n}\r\n\r\nconst BranchCard: React.SFC<BranchCardProps> = ({ branch, onArchive }) => {\r\n  const history = useHistory()\r\n  return (\r\n    <MyCard title={`Branch#${branch.id}`}>\r\n      <CardContent>\r\n        <Grid style={{ marginBottom: 20 }} xs={12} direction='column' container>\r\n          <Typography component='h3' variant='h6'>\r\n            {branch.name}\r\n          </Typography>\r\n          <Typography variant='subtitle1' color='textSecondary'>\r\n            {branch.contact}\r\n          </Typography>\r\n          <Typography variant='subtitle1' color='textSecondary'>\r\n            {branch.address}\r\n          </Typography>\r\n        </Grid>\r\n        <Divider style={{ marginLeft: 20, marginRight: 20 }}></Divider>\r\n        <Grid container xs={12} justify='space-evenly'>\r\n          <IconButton\r\n            onClick={() => history.push('/branches/edit/' + branch.id)}\r\n            aria-label='edit'\r\n          >\r\n            <EditIcon />\r\n          </IconButton>\r\n          <IconButton onClick={() => onArchive?.(branch)} aria-label='archive'>\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Grid>\r\n      </CardContent>\r\n    </MyCard>\r\n  )\r\n}\r\n\r\nexport default BranchCard\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Clients\\ClientCard\\index.tsx",["550"],"import MyCard from 'components/common/MyCard'\r\nimport { useContext } from 'react'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport ViewIcon from '@material-ui/icons/RemoveRedEye'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport Chip from '@material-ui/core/Chip'\r\nimport Client from 'models/client'\r\nimport { useHistory } from 'react-router-dom'\r\nimport MyAvatar from 'components/common/MyAvatar'\r\n\r\nimport { computeTotalCountPaid, hasCommission } from 'services/clientService'\r\n\r\nexport interface ClientCardProps {\r\n  client: Client\r\n  onArchieve?: (client: Client) => void\r\n}\r\n\r\nexport const ClientCard: React.SFC<ClientCardProps> = ({\r\n  client,\r\n  onArchieve,\r\n}) => {\r\n  const history = useHistory()\r\n  return (\r\n    <MyCard title={`Code#${client.code}`} style={{ paddingBottom: 5 }}>\r\n      <CardContent>\r\n        <Grid container xs={12} justify='space-between'>\r\n          <Grid\r\n            style={{ paddingLeft: 10 }}\r\n            container\r\n            item\r\n            direction='column'\r\n            xs={7}\r\n            justify='flex-start'\r\n          >\r\n            <Typography component='h6' variant='h6'>\r\n              {`${client.lastname}, ${client.firstname} ${client.middlename}`}\r\n            </Typography>\r\n            <Typography variant='subtitle1' color='textSecondary'>\r\n              {client?.branch?.name}\r\n            </Typography>\r\n            <Typography variant='subtitle1' color='textSecondary'>\r\n              {client.plan?.name! + ' - ' + client.payment_mode}\r\n            </Typography>\r\n\r\n            {client.payment_mode === 'Installment' && (\r\n              <>\r\n                <Typography variant='caption' color='textSecondary'>\r\n                  {'Lapse on ' + new Date(client.next_payment!).toDateString()}\r\n                </Typography>\r\n                <Grid item xs={1}>\r\n                  <Chip\r\n                    style={{ marginTop: 5 }}\r\n                    size='small'\r\n                    label={\r\n                      hasCommission(client!) ? 'on commission' : 'no commission'\r\n                    }\r\n                    variant='outlined'\r\n                    color={hasCommission(client!) ? 'secondary' : 'default'}\r\n                  />\r\n                  <Chip\r\n                    style={{ marginTop: 10 }}\r\n                    size='small'\r\n                    label={computeTotalCountPaid(client) + ' paid'}\r\n                    color='default'\r\n                    variant='outlined'\r\n                  />\r\n                </Grid>\r\n              </>\r\n            )}\r\n          </Grid>\r\n          <Grid container item xs={5} justify='center' alignItems='center'>\r\n            <MyAvatar\r\n              src={client?.image_url}\r\n              onClick={() => history.push('/clients/' + client.id)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n\r\n      <Divider style={{ marginLeft: 20, marginRight: 20 }}></Divider>\r\n      <Grid container xs={12} justify='space-evenly'>\r\n        <IconButton\r\n          onClick={() => history.push('/clients/' + client.id)}\r\n          aria-label='view'\r\n        >\r\n          <ViewIcon />\r\n        </IconButton>\r\n        <IconButton\r\n          onClick={() => history.push('/clients/edit/' + client.id)}\r\n          aria-label='edit'\r\n        >\r\n          <EditIcon />\r\n        </IconButton>\r\n        <IconButton onClick={() => onArchieve?.(client)} aria-label='archive'>\r\n          <DeleteIcon />\r\n        </IconButton>\r\n      </Grid>\r\n    </MyCard>\r\n  )\r\n}\r\nexport default ClientCard\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\services\\imageService.tsx",[],"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Payments\\PaymentCard\\index.tsx",["551"],"import CardContent from '@material-ui/core/CardContent'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport MyCard from 'components/common/MyCard'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Chip from '@material-ui/core/Chip'\r\nimport Payment from 'models/payment'\r\nimport { useHistory } from 'react-router-dom'\r\nimport MyAvatar from 'components/common/MyAvatar'\r\nimport { toMoney } from 'utils/helper'\r\n\r\nexport interface PaymentCardProps {\r\n  payment: Payment\r\n}\r\n\r\nconst PaymentCard: React.SFC<PaymentCardProps> = ({ payment }) => {\r\n  const history = useHistory()\r\n\r\n  const client = payment.client\r\n\r\n  const fullname = `${client?.profile?.lastname}, ${client?.profile?.firstname} ${client?.profile?.middlename}`\r\n  return (\r\n    <MyCard title={'OR#' + payment.or_number} style={{ paddingBottom: 5 }}>\r\n      <CardContent>\r\n        <Grid\r\n          style={{ marginBottom: 20 }}\r\n          xs={12}\r\n          justify='space-between'\r\n          container\r\n        >\r\n          <Grid\r\n            style={{ paddingLeft: 10 }}\r\n            container\r\n            item\r\n            direction='column'\r\n            xs={7}\r\n            justify='flex-start'\r\n          >\r\n            <Typography component='h3' variant='h6'>\r\n              {fullname}\r\n            </Typography>\r\n            <Typography variant='subtitle1' color='textSecondary'>\r\n              {payment.client?.code}\r\n            </Typography>\r\n            <Typography variant='subtitle1' color='textSecondary'>\r\n              {payment.client?.branch?.name}\r\n            </Typography>\r\n            <Typography variant='subtitle1' color='textSecondary'>\r\n              {toMoney(payment?.amount!)}\r\n            </Typography>\r\n            {/* <Typography variant='caption' color='textSecondary'>\r\n              {'Paid on ' + new Date(payment.created_at!).toDateString()}\r\n            </Typography> */}\r\n          </Grid>\r\n          <Grid container item xs={5} justify='center' alignItems='center'>\r\n            <MyAvatar\r\n              src={payment?.client?.profile?.image_url}\r\n              onClick={() => history.push('/payments/' + payment.id)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Divider style={{ marginLeft: 20, marginRight: 20 }}></Divider>\r\n        <Grid\r\n          style={{ paddingLeft: 15, paddingRight: 15, paddingTop: 20 }}\r\n          container\r\n          xs={12}\r\n          justify='space-evenly'\r\n        >\r\n          <Grid item xs={3}></Grid>\r\n          <Grid item xs={6}>\r\n            <Button\r\n              onClick={() => history.push('/payments/' + payment.id)}\r\n              fullWidth\r\n              variant='text'\r\n              color='primary'\r\n            >\r\n              Commissioners\r\n            </Button>\r\n          </Grid>\r\n\r\n          <Grid item xs={3}></Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </MyCard>\r\n  )\r\n}\r\n\r\nexport default PaymentCard\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\validators\\saveProfileValidator.tsx",["552"],"import Joi from 'joi'\r\nimport { lettersOnly, notNull } from 'utils/helper'\r\n\r\nconst saveProfileValidator = {\r\n  firstname: lettersOnly('Firstname').min(1).max(50),\r\n  middlename: lettersOnly('Middlename').min(1).max(50),\r\n  lastname: lettersOnly('Lastname').min(1).max(50),\r\n  civil: notNull('Civil Status'),\r\n  gender: notNull('Gender'),\r\n}\r\n\r\nexport default saveProfileValidator\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MySkeletonCards\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MyStepper\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\validators\\clientStepTwoValidator.tsx",["553"],"import Joi from 'joi'\r\nimport { lettersOnly, notNull } from 'utils/helper'\r\n\r\nconst clientStepTwoValidator = {\r\n  branch_manager: notNull('Branch Manager'),\r\n  agency_manager: notNull('Agency Manager'),\r\n  supervisor: notNull('Supervisor'),\r\n  sales_agent: Joi.optional(),\r\n  position: notNull('Position'),\r\n  insured_employee: Joi.optional(),\r\n}\r\n\r\nexport default clientStepTwoValidator\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\validators\\clientStepThreeValidator.tsx",["554"],"import Joi from 'joi'\r\nimport { lettersOnly, notNull } from 'utils/helper'\r\n\r\nconst clientStepThreeValidator = {\r\n  plan: notNull('Plan'),\r\n  amount: Joi.number().required().label('Amount'),\r\n  payment_mode: notNull('Payment Mode'),\r\n  or_number: notNull('OR Number'),\r\n  payment_period: Joi.when('payment_mode', {\r\n    is: Joi.string().valid('Fullpayment'),\r\n    then: Joi.valid(null),\r\n    otherwise: notNull('Payment Period'),\r\n  }),\r\n  created_at: notNull('Insure Date'),\r\n}\r\n\r\nexport default clientStepThreeValidator\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Users\\index.tsx",["555","556","557"],"import UserCard from 'components/pages/Users/UserCard'\r\nimport { UserContext } from 'providers/UserProvider'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\n\r\nimport { useContext, useEffect, useState } from 'react'\r\nimport { getUsers, archiveUser } from 'services/userService'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Pagination from '@material-ui/lab/Pagination'\r\nimport User from 'models/user'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport MyAlertDialog, { AlertDataProps } from 'components/common/MyAlertDialog'\r\nimport MySearchField from 'components/common/MySearchField'\r\nimport MyChips, { MyChip } from 'components/common/MyChips'\r\nimport MySkeletonCards from 'components/common/MySkeletonCards'\r\nimport Fab from '@material-ui/core/Fab'\r\nimport AddIcon from '@material-ui/icons/Add'\r\n\r\nexport interface UsersProps {}\r\n\r\nconst Users: React.SFC<UsersProps> = () => {\r\n  const [userState, userDispatch] = useContext(UserContext)!\r\n\r\n  const history = useHistory()\r\n\r\n  const [_, globalDispatch] = useContext(GlobalContext)!\r\n\r\n  const [chip, setChip] = useState<MyChip>({ value: '', name: 'All' })\r\n\r\n  const [page, setPage] = useState(1)\r\n\r\n  useEffect(() => {\r\n    globalDispatch({ type: 'SET_TITLE', payload: 'User Management' })\r\n    onLoad({ page: 1, search: '' })\r\n  }, [])\r\n\r\n  const onLoad = ({ page, search }: { page?: number; search?: string }) => {\r\n    globalDispatch({ type: 'SET_IS_LOADING', payload: true })\r\n    userDispatch({ type: 'SET_IS_LOADING', payload: true })\r\n    getUsers({ page, search }).then(({ users, pages, total }) => {\r\n      globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n\r\n      userDispatch({ type: 'ON_LOAD_USERS', payload: { users, pages, total } })\r\n    })\r\n  }\r\n\r\n  const onPage = (e: any, page: number) => {}\r\n\r\n  const handleSelectedUser = (user: User) => {\r\n    setUser(user)\r\n    setAlertDialog({\r\n      open: true,\r\n      text: `Are you sure you want to archive ${user.lastname}, ${user.firstname} ${user.middlename}?`,\r\n      description:\r\n        'Archiving will not permanently delete the user account in the database.',\r\n    })\r\n  }\r\n\r\n  const [alertDialog, setAlertDialog] = useState<AlertDataProps>({})\r\n\r\n  const [user, setUser] = useState<User>()\r\n\r\n  const handleArchive = () => {\r\n    archiveUser(user?.id!).then((data) => {\r\n      onLoad({\r\n        page,\r\n      })\r\n      globalDispatch({\r\n        type: 'SET_ALERT',\r\n        payload: { message: 'Successfully archived', type: 'success' },\r\n      })\r\n      setChip({ value: '', name: 'All' })\r\n    })\r\n    setAlertDialog({\r\n      open: false,\r\n    })\r\n  }\r\n\r\n  const onSearch = (search: string) => {\r\n    setChip({ value: '', name: 'All' })\r\n    setPage(1)\r\n    onLoad({ page: 1, search })\r\n    history.push('/users?search=' + search)\r\n  }\r\n\r\n  const onFilter = (chip: MyChip) => {\r\n    setChip(chip)\r\n    userDispatch({ type: 'SET_TOTAL', payload: 0 })\r\n    setPage(1)\r\n    onLoad({ page: 1 })\r\n  }\r\n\r\n  const chips: MyChip[] = [{ value: '', name: 'All' }]\r\n\r\n  const isLoading = userState.isLoading && !userState.users.length\r\n\r\n  return (\r\n    <>\r\n      <MyAlertDialog\r\n        onAgree={handleArchive}\r\n        onDisagree={() => setAlertDialog({ open: false })}\r\n        data={alertDialog}\r\n      />\r\n      <MySearchField\r\n        label='Name / Username'\r\n        labelWidth={130}\r\n        onSearch={onSearch}\r\n        style={{ marginBottom: 5 }}\r\n      />\r\n\r\n      <MyChips\r\n        count={userState.total}\r\n        active={chip}\r\n        onChipSelected={onFilter}\r\n        chips={chips}\r\n      />\r\n      {isLoading && <MySkeletonCards />}\r\n      {!isLoading && (\r\n        <Grid\r\n          container\r\n          spacing={2}\r\n          direction='column'\r\n          justify='flex-start'\r\n          alignItems='center'\r\n        >\r\n          {userState.users.map((user) => (\r\n            <Grid key={user.id} item xs={12}>\r\n              <UserCard onArchive={handleSelectedUser} user={user} />\r\n            </Grid>\r\n          ))}\r\n          <Pagination\r\n            style={{ marginTop: 15, marginBottom: 15 }}\r\n            variant='outlined'\r\n            color='primary'\r\n            count={userState.pages}\r\n            siblingCount={0}\r\n            page={page}\r\n            onChange={onPage}\r\n          />\r\n        </Grid>\r\n      )}\r\n      <Fab\r\n        onClick={() => history.push('/users/new')}\r\n        style={{\r\n          position: 'fixed',\r\n          bottom: 60,\r\n          right: 20,\r\n        }}\r\n        color='primary'\r\n        aria-label='add'\r\n      >\r\n        <AddIcon />\r\n      </Fab>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Users\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Users\\UserCard\\index.tsx",["558","559","560","561"],"import React, { useContext, useState } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport ViewIcon from '@material-ui/icons/RemoveRedEye'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport Chip from '@material-ui/core/Chip'\r\n\r\nimport MyCard from 'components/common/MyCard'\r\nimport MyAvatar from 'components/common/MyAvatar'\r\nimport User from 'models/user'\r\n\r\nexport interface UserCardProps {\r\n  user: User\r\n  onArchive?: (user: User) => void\r\n}\r\n\r\nconst UserCard: React.SFC<UserCardProps> = ({ user, onArchive }) => {\r\n  const history = useHistory()\r\n  return (\r\n    <>\r\n      <MyCard title={'Username#' + user?.username} style={{ paddingBottom: 5 }}>\r\n        <CardContent>\r\n          <Grid container xs={12} justify='space-between'>\r\n            <Grid\r\n              style={{ paddingLeft: 10 }}\r\n              container\r\n              item\r\n              direction='column'\r\n              xs={7}\r\n              justify='flex-start'\r\n            >\r\n              <Typography component='h3' variant='h6'>\r\n                {`${user?.lastname!}, ${user?.firstname!} ${user?.middlename!}`}\r\n              </Typography>\r\n              <Typography variant='subtitle1' color='textSecondary'>\r\n                {user?.branch?.name}\r\n              </Typography>\r\n              <Typography variant='subtitle1' color='textSecondary'>\r\n                {user?.role!}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid container item xs={5} justify='center' alignItems='center'>\r\n              <MyAvatar\r\n                src={user.image_url}\r\n                onClick={() => history.push('/users/' + user.id)}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n\r\n        <Divider style={{ marginLeft: 20, marginRight: 20 }}></Divider>\r\n        <Grid container xs={12} justify='space-evenly'>\r\n          {/* <IconButton\r\n            onClick={() => history.push('/users/' + user.id)}\r\n            aria-label='view'\r\n          >\r\n            <ViewIcon />\r\n          </IconButton> */}\r\n          <IconButton\r\n            onClick={() => history.push('/users/edit/' + user.id)}\r\n            aria-label='edit'\r\n          >\r\n            <EditIcon />\r\n          </IconButton>\r\n          <IconButton onClick={() => onArchive?.(user)} aria-label='archive'>\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Grid>\r\n      </MyCard>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserCard\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\providers\\UserProvider.tsx",[],"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\services\\userService.tsx",[],"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Employees\\NewEmployee\\index.tsx",["562","563","564"],"import React, { useContext, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport PhotoCamera from \"@material-ui/icons/PhotoCamera\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { GlobalContext } from \"providers/GlobalProvider\";\r\nimport validator from \"../../../../validators/saveEmployeeValidator\";\r\nimport MyForm, { MyFormProps, InputProps } from \"components/common/MyForm\";\r\nimport Employee from \"models/employee\";\r\nimport { saveEmployee } from \"services/employeeService\";\r\nimport { EmployeeContext } from \"providers/EmployeeProvider\";\r\nimport { postImage } from \"services/imageService\";\r\nimport { getBranches } from \"services/branchService\";\r\nimport { BranchContext } from \"providers/BranchProvider\";\r\n\r\nexport interface NewUserProps {}\r\n\r\nconst NewEmployee: React.SFC<NewUserProps> = () => {\r\n  const [{ currentUser }, globalDispatch] = useContext(GlobalContext)!;\r\n\r\n  const [employeeState, employeeDispatch] = useContext(EmployeeContext)!;\r\n\r\n  const [branchState, branchDispatch] = useContext(BranchContext)!;\r\n\r\n  const [imageFile, setImageFile] = React.useState<HTMLImageElement | null>(\r\n    null\r\n  );\r\n\r\n  useEffect(() => {\r\n    globalDispatch({ type: \"SET_TITLE\", payload: \"Employee Registration\" });\r\n\r\n    getBranches().then((branches) =>\r\n      branchDispatch({ type: \"ON_LOAD_BRANCHES\", payload: branches })\r\n    );\r\n  }, []);\r\n\r\n  const history = useHistory();\r\n\r\n  const [employee, setEmployee] = React.useState<Employee>({\r\n    status: \"deactive\",\r\n  });\r\n\r\n  const onSubmit = async (employee: Employee) => {\r\n    globalDispatch({ type: \"SET_IS_LOADING\", payload: true });\r\n\r\n    return postImage(employee?.image!, (image_url: string) => {\r\n      employee.image_url = image_url;\r\n      delete employee.image;\r\n      return saveEmployee(employee).then(() => {\r\n        globalDispatch({\r\n          type: \"SET_ALERT\",\r\n          payload: { message: \"Successfully added\", type: \"success\" },\r\n        });\r\n        globalDispatch({ type: \"SET_IS_LOADING\", payload: false });\r\n      });\r\n    });\r\n  };\r\n\r\n  const formProps: MyFormProps<Employee> = {\r\n    state: [employee, setEmployee],\r\n    onSubmit,\r\n    validator,\r\n  };\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myInput, mySelect, myDateTimePicker, myButton }) => (\r\n        <>\r\n          {myInput({\r\n            label: \"Firstname\",\r\n            value: employee.firstname,\r\n            name: \"firstname\",\r\n          })}\r\n          {myInput({\r\n            label: \"Middlename\",\r\n            value: employee.middlename,\r\n            name: \"middlename\",\r\n          })}\r\n          {myInput({\r\n            label: \"Lastname\",\r\n            value: employee.lastname,\r\n            name: \"lastname\",\r\n          })}\r\n          {myInput({\r\n            label: \"Contact Number\",\r\n            value: employee.contact,\r\n            name: \"contact\",\r\n          })}\r\n\r\n          {myInput({\r\n            label: \"Address\",\r\n            value: employee.address,\r\n            name: \"address\",\r\n            isMultiline: true,\r\n          })}\r\n\r\n          {myDateTimePicker({\r\n            label: \"Birthdate\",\r\n            value: employee.birthdate,\r\n            name: \"birthdate\",\r\n          })}\r\n\r\n          {mySelect({\r\n            label: \"Gender\",\r\n            value: employee.gender,\r\n            name: \"gender\",\r\n            options: [\r\n              { value: \"Male\" },\r\n              { value: \"Female\" },\r\n              { value: \"Other\" },\r\n            ],\r\n          })}\r\n          {mySelect({\r\n            label: \"Civil Status\",\r\n            value: employee.civil,\r\n            name: \"civil\",\r\n            labelWidth: 80,\r\n            options: [\r\n              { value: \"Single\" },\r\n              { value: \"Married\" },\r\n              { value: \"Widowed\" },\r\n            ],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: \"Position\",\r\n            value: employee.position,\r\n            name: \"position\",\r\n            labelWidth: 55,\r\n            options: employeeState.positions.map((position) => ({\r\n              value: position.id,\r\n              name: position.name,\r\n            })),\r\n          })}\r\n\r\n          {mySelect({\r\n            label: \"Branch\",\r\n            value: employee.branch,\r\n            name: \"branch\",\r\n            labelWidth: 55,\r\n            options: branchState.branches.map((branch) => ({\r\n              value: branch.id,\r\n              name: branch.name,\r\n            })),\r\n          })}\r\n\r\n          <Grid\r\n            container\r\n            style={{\r\n              paddingLeft: 15,\r\n              paddingRight: 15,\r\n              marginBottom: 10,\r\n            }}\r\n            alignItems=\"center\"\r\n            justify=\"space-between\"\r\n            xs={12}\r\n          >\r\n            <Typography variant=\"subtitle1\">\r\n              {imageFile?.name || \"Select Photo\"}\r\n            </Typography>\r\n            <>\r\n              <input\r\n                accept=\"image/*\"\r\n                style={{\r\n                  display: \"none\",\r\n                }}\r\n                name=\"image\"\r\n                id=\"icon-button-file\"\r\n                type=\"file\"\r\n                onChange={(e: any) => {\r\n                  setImageFile(e.target.files[0]);\r\n                }}\r\n              />\r\n              <label htmlFor=\"icon-button-file\">\r\n                <IconButton\r\n                  color=\"primary\"\r\n                  aria-label=\"upload picture\"\r\n                  component=\"span\"\r\n                >\r\n                  <PhotoCamera />\r\n                </IconButton>\r\n              </label>\r\n            </>\r\n          </Grid>\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 10, paddingBottom: 5 }}\r\n            container\r\n            xs={12}\r\n            justify=\"center\"\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              {currentUser?.role === \"admin\" && (\r\n                <Button\r\n                  onClick={() => history.goBack()}\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"default\"\r\n                >\r\n                  BACK\r\n                </Button>\r\n              )}\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton()}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  );\r\n};\r\nexport default NewEmployee;\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Users\\NewUser\\index.tsx",["565","566","567"],"import React, { useContext, useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport validator from 'validators/saveUserValidator'\r\nimport MyForm, { MyFormProps, InputProps } from 'components/common/MyForm'\r\nimport { saveUser } from 'services/userService'\r\nimport { UserContext } from 'providers/UserProvider'\r\nimport { postImage } from 'services/imageService'\r\nimport { getBranches } from 'services/branchService'\r\nimport { BranchContext } from 'providers/BranchProvider'\r\nimport User from 'models/user'\r\n\r\nexport interface NewUserProps {}\r\n\r\nconst NewUser: React.SFC<NewUserProps> = () => {\r\n  const [{ currentUser }, globalDispatch] = useContext(GlobalContext)!\r\n\r\n  const [branchState, branchDispatch] = useContext(BranchContext)!\r\n\r\n  const [imageFile, setImageFile] = React.useState<HTMLImageElement | null>(\r\n    null\r\n  )\r\n\r\n  useEffect(() => {\r\n    globalDispatch({ type: 'SET_TITLE', payload: 'User Registration' })\r\n\r\n    getBranches().then((branches) =>\r\n      branchDispatch({ type: 'ON_LOAD_BRANCHES', payload: branches })\r\n    )\r\n  }, [])\r\n\r\n  const history = useHistory()\r\n\r\n  const [user, setUser] = React.useState<User>({\r\n    username: '',\r\n    firstname: '',\r\n    middlename: '',\r\n    lastname: '',\r\n    role: 'cashier',\r\n    password: '',\r\n  })\r\n\r\n  const onSubmit = async (user: User) => {\r\n    globalDispatch({ type: 'SET_IS_LOADING', payload: true })\r\n\r\n    return postImage(user?.image!, (image_url: string) => {\r\n      user.image_url = image_url\r\n      delete user.image\r\n      return saveUser(user).then(() => {\r\n        globalDispatch({\r\n          type: 'SET_ALERT',\r\n          payload: { message: 'Successfully added', type: 'success' },\r\n        })\r\n        globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n      })\r\n    })\r\n  }\r\n\r\n  const formProps: MyFormProps<User> = {\r\n    state: [user, setUser],\r\n    onSubmit,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myInput, mySelect, myButton }) => (\r\n        <>\r\n          {myInput({\r\n            label: 'Username',\r\n            value: user.username,\r\n            name: 'username',\r\n          })}\r\n          {myInput({\r\n            label: 'Firstname',\r\n            value: user.firstname,\r\n            name: 'firstname',\r\n          })}\r\n          {myInput({\r\n            label: 'Middlename',\r\n            value: user.middlename,\r\n            name: 'middlename',\r\n          })}\r\n          {myInput({\r\n            label: 'Lastname',\r\n            value: user.lastname,\r\n            name: 'lastname',\r\n          })}\r\n          {myInput({\r\n            label: 'Password',\r\n            value: user.password,\r\n            name: 'password',\r\n            type: 'password',\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Role',\r\n            value: user.role,\r\n            name: 'role',\r\n            labelWidth: 55,\r\n            options: [{ value: 'cashier', name: 'Cashier' }],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Branch',\r\n            value: user.branch,\r\n            name: 'branch',\r\n            labelWidth: 55,\r\n            options: branchState.branches.map((branch) => ({\r\n              value: branch.id,\r\n              name: branch.name,\r\n            })),\r\n          })}\r\n\r\n          <Grid\r\n            container\r\n            style={{\r\n              paddingLeft: 15,\r\n              paddingRight: 15,\r\n              marginBottom: 10,\r\n            }}\r\n            alignItems='center'\r\n            justify='space-between'\r\n            xs={12}\r\n          >\r\n            <Typography variant='subtitle1'>\r\n              {imageFile?.name || 'Select Photo'}\r\n            </Typography>\r\n            <>\r\n              <input\r\n                accept='image/*'\r\n                style={{\r\n                  display: 'none',\r\n                }}\r\n                name='image'\r\n                id='icon-button-file'\r\n                type='file'\r\n                onChange={(e: any) => {\r\n                  setImageFile(e.target.files[0])\r\n                }}\r\n              />\r\n              <label htmlFor='icon-button-file'>\r\n                <IconButton\r\n                  color='primary'\r\n                  aria-label='upload picture'\r\n                  component='span'\r\n                >\r\n                  <PhotoCamera />\r\n                </IconButton>\r\n              </label>\r\n            </>\r\n          </Grid>\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 10, paddingBottom: 5 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              {currentUser?.role === 'admin' && (\r\n                <Button\r\n                  onClick={() => history.goBack()}\r\n                  fullWidth\r\n                  variant='contained'\r\n                  color='default'\r\n                >\r\n                  BACK\r\n                </Button>\r\n              )}\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton()}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\nexport default NewUser\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\validators\\saveUserValidator.tsx",[],"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Users\\EditUser\\index.tsx",["568","569","570","571","572","573","574","575"],"import React, { useContext, useEffect } from 'react'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport validator from 'validators/editUserValidator'\r\nimport MyForm, { MyFormProps, InputProps } from 'components/common/MyForm'\r\nimport { getUser, updateUser } from 'services/userService'\r\nimport { UserContext } from 'providers/UserProvider'\r\nimport { postImage } from 'services/imageService'\r\nimport { getBranches } from 'services/branchService'\r\nimport { BranchContext } from 'providers/BranchProvider'\r\nimport User from 'models/user'\r\n\r\nexport interface EditUserProps {}\r\n\r\nconst EditUser: React.SFC<EditUserProps> = () => {\r\n  const [{ currentUser }, globalDispatch] = useContext(GlobalContext)!\r\n\r\n  const params = useParams<{ id: string }>()\r\n\r\n  const [branchState, branchDispatch] = useContext(BranchContext)!\r\n\r\n  const [imageFile, setImageFile] = React.useState<HTMLImageElement | null>(\r\n    null\r\n  )\r\n\r\n  const [user, setUser] = React.useState<User>({\r\n    username: '',\r\n    firstname: '',\r\n    middlename: '',\r\n    lastname: '',\r\n    role: 'cashier',\r\n    password: '',\r\n  })\r\n\r\n  useEffect(() => {\r\n    globalDispatch({ type: 'SET_TITLE', payload: 'Edit User' })\r\n\r\n    getUser(+params.id).then((user) => setUser(user))\r\n    getBranches().then((branches) =>\r\n      branchDispatch({ type: 'ON_LOAD_BRANCHES', payload: branches })\r\n    )\r\n  }, [])\r\n\r\n  const history = useHistory()\r\n\r\n  const onSubmit = async (user: User) => {\r\n    globalDispatch({ type: 'SET_IS_LOADING', payload: true })\r\n\r\n    return postImage(user?.image!, (image_url: string) => {\r\n      user.image_url = image_url\r\n      delete user.image\r\n      return updateUser(user).then(() => {\r\n        globalDispatch({\r\n          type: 'SET_ALERT',\r\n          payload: { message: 'Successfully added', type: 'success' },\r\n        })\r\n        globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n      })\r\n    })\r\n  }\r\n\r\n  const formProps: MyFormProps<User> = {\r\n    state: [user, setUser],\r\n    onSubmit,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myControlledInput, mySelect, myButton }) => (\r\n        <>\r\n          {myControlledInput({\r\n            label: 'Username',\r\n            value: user.username,\r\n            name: 'username',\r\n          })}\r\n          {myControlledInput({\r\n            label: 'Firstname',\r\n            value: user.firstname,\r\n            name: 'firstname',\r\n          })}\r\n          {myControlledInput({\r\n            label: 'Middlename',\r\n            value: user.middlename,\r\n            name: 'middlename',\r\n          })}\r\n          {myControlledInput({\r\n            label: 'Lastname',\r\n            value: user.lastname,\r\n            name: 'lastname',\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Role',\r\n            value: user.role,\r\n            name: 'role',\r\n            labelWidth: 55,\r\n            options: [{ value: 'cashier', name: 'Cashier' }],\r\n          })}\r\n\r\n          {mySelect({\r\n            label: 'Branch',\r\n            value: user.branch,\r\n            name: 'branch',\r\n            labelWidth: 55,\r\n            options: branchState.branches.map((branch) => ({\r\n              value: branch.id,\r\n              name: branch.name,\r\n            })),\r\n          })}\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 10, paddingBottom: 5 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}>\r\n              {currentUser?.role === 'admin' && (\r\n                <Button\r\n                  onClick={() => history.goBack()}\r\n                  fullWidth\r\n                  variant='contained'\r\n                  color='default'\r\n                >\r\n                  BACK\r\n                </Button>\r\n              )}\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {myButton()}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\nexport default EditUser\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\validators\\editUserValidator.tsx",[],"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Settings\\General\\index.tsx",["576"],"import Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport MyCard from 'components/common/MyCard'\r\nimport { useContext, useEffect, useState } from 'react'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport Button from '@material-ui/core/Button'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport { getApiKeys, setApiKeys } from 'services/settingService'\r\nimport MyForm, { MyFormProps } from 'components/common/MyForm'\r\nimport validator from 'validators/settingValidator'\r\nimport { getCurrentUser } from 'utils/helper'\r\n\r\nexport interface SettingsProps {}\r\n\r\nconst Settings: React.SFC<SettingsProps> = () => {\r\n  const [state, dispatch] = useContext(GlobalContext)!\r\n\r\n  const [keys, setKeys] = useState<{ apiCode: string; apiPassword: string }>({\r\n    apiCode: '',\r\n    apiPassword: '',\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (getCurrentUser()?.role === 'admin') {\r\n      getApiKeys().then((keys) => setKeys(keys))\r\n    }\r\n  }, [])\r\n\r\n  const onSave = () => {\r\n    localStorage.setItem('theme', state.isDark ? 'dark' : 'light')\r\n    dispatch({\r\n      type: 'SET_ALERT',\r\n      payload: { message: 'Saved', type: 'success' },\r\n    })\r\n  }\r\n\r\n  const onSubmit = async () => {\r\n    setApiKeys(keys).then(() => {\r\n      dispatch({\r\n        type: 'SET_ALERT',\r\n        payload: { message: 'Saved', type: 'success' },\r\n      })\r\n    })\r\n  }\r\n\r\n  const formProps: MyFormProps<{ apiCode: string; apiPassword: string }> = {\r\n    state: [keys, setKeys],\r\n    onSubmit,\r\n    validator,\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <MyCard title='General Settings'>\r\n        <Grid style={{ padding: 20 }} direction='column' container xs={12}>\r\n          <Typography variant='subtitle1'>Theme</Typography>\r\n          <FormControlLabel\r\n            control={\r\n              <Switch\r\n                checked={state.isDark}\r\n                onChange={() => dispatch({ type: 'TOGGLE_THEME' })}\r\n                name='checkedA'\r\n                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n              />\r\n            }\r\n            label='Dark Mode'\r\n          />\r\n          <Button\r\n            style={{ marginTop: 20 }}\r\n            onClick={onSave}\r\n            fullWidth\r\n            variant='contained'\r\n            color='primary'\r\n          >\r\n            Save\r\n          </Button>\r\n        </Grid>\r\n      </MyCard>\r\n\r\n      {state?.currentUser?.role === 'admin' && (\r\n        <MyCard style={{ marginTop: 20 }} title='SMS Settings'>\r\n          <Grid style={{ padding: 20 }} direction='column' container xs={12}>\r\n            <MyForm {...formProps}>\r\n              {({ myControlledInput, myButton }) => (\r\n                <>\r\n                  {myControlledInput({\r\n                    label: 'API CODE',\r\n                    value: keys.apiCode,\r\n                    name: 'apiCode',\r\n                  })}\r\n                  {myControlledInput({\r\n                    label: 'API PASSWORD',\r\n                    value: keys.apiPassword,\r\n                    name: 'apiPassword',\r\n                  })}\r\n                  {myButton('Save')}\r\n                </>\r\n              )}\r\n            </MyForm>\r\n          </Grid>\r\n        </MyCard>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Settings\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Settings\\Account\\index.tsx",["577","578","579","580","581","582","583"],"import React, { useContext, useEffect } from 'react'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\nimport validator from 'validators/editUserValidator'\r\nimport MyForm, { MyFormProps, InputProps } from 'components/common/MyForm'\r\nimport { getMe, updateAccount } from 'services/userService'\r\nimport { UserContext } from 'providers/UserProvider'\r\nimport { postImage } from 'services/imageService'\r\nimport { getBranches } from 'services/branchService'\r\nimport { BranchContext } from 'providers/BranchProvider'\r\nimport User from 'models/user'\r\nimport { getCurrentUser, saveToken } from 'utils/helper'\r\n\r\nexport interface AccountSettingsProps {}\r\n\r\nconst AccountSettings: React.SFC<AccountSettingsProps> = () => {\r\n  const [{ currentUser }, globalDispatch] = useContext(GlobalContext)!\r\n\r\n  const params = useParams<{ id: string }>()\r\n\r\n  const [branchState, branchDispatch] = useContext(BranchContext)!\r\n\r\n  const [imageFile, setImageFile] = React.useState<HTMLImageElement | null>(\r\n    null\r\n  )\r\n\r\n  const [user, setUser] = React.useState<User>({\r\n    username: '',\r\n    firstname: '',\r\n    middlename: '',\r\n    lastname: '',\r\n    role: 'cashier',\r\n    password: '',\r\n    new_password: '',\r\n  })\r\n\r\n  useEffect(() => {\r\n    globalDispatch({ type: 'SET_TITLE', payload: 'Account Settings' })\r\n\r\n    getMe().then((user) => {\r\n      setUser({ ...user, branch: user?.branch?.id })\r\n    })\r\n    getBranches().then((branches) =>\r\n      branchDispatch({ type: 'ON_LOAD_BRANCHES', payload: branches })\r\n    )\r\n  }, [])\r\n\r\n  const history = useHistory()\r\n\r\n  const onSubmit = async (user: User) => {\r\n    globalDispatch({ type: 'SET_IS_LOADING', payload: true })\r\n\r\n    return postImage(user?.image!, (image_url: string) => {\r\n      user.image_url = image_url\r\n      delete user.image\r\n      return updateAccount(user).then(({ access_token }) => {\r\n        globalDispatch({\r\n          type: 'SET_ALERT',\r\n          payload: { message: 'Successfully updated', type: 'success' },\r\n        })\r\n        globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n        saveToken(access_token)\r\n        globalDispatch({ type: 'SET_CURRENT_USER', payload: getCurrentUser() })\r\n        window.location.href = '/dashboard'\r\n      })\r\n    }).catch(({ response }) => {\r\n      if (response.status === 401) {\r\n        globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n        globalDispatch({\r\n          type: 'SET_ALERT',\r\n          payload: {\r\n            message: response.data.error,\r\n            type: 'error',\r\n          },\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  const { role, branch, ...cashierValidator } = validator\r\n\r\n  const formProps: MyFormProps<User> = {\r\n    state: [user, setUser],\r\n    onSubmit,\r\n    validator: user.role !== 'admin' ? cashierValidator : validator,\r\n  }\r\n\r\n  return (\r\n    <MyForm {...formProps}>\r\n      {({ myControlledInput, mySelect, myButton }) => (\r\n        <>\r\n          {myControlledInput({\r\n            label: 'Username',\r\n            value: user.username,\r\n            name: 'username',\r\n          })}\r\n          {myControlledInput({\r\n            label: 'Firstname',\r\n            value: user.firstname,\r\n            name: 'firstname',\r\n          })}\r\n          {myControlledInput({\r\n            label: 'Middlename',\r\n            value: user.middlename,\r\n            name: 'middlename',\r\n          })}\r\n          {myControlledInput({\r\n            label: 'Lastname',\r\n            value: user.lastname,\r\n            name: 'lastname',\r\n          })}\r\n\r\n          {user.role === 'admin' &&\r\n            mySelect({\r\n              label: 'Role',\r\n              value: user.role,\r\n              name: 'role',\r\n              labelWidth: 55,\r\n              options: [\r\n                { value: 'cashier', name: 'Cashier' },\r\n                { value: 'admin', name: 'Admin' },\r\n              ],\r\n            })}\r\n\r\n          {user.role === 'admin' &&\r\n            mySelect({\r\n              label: 'Branch',\r\n              value: user?.branch,\r\n              name: 'branch',\r\n              labelWidth: 55,\r\n              options: branchState.branches.map((branch) => ({\r\n                value: branch.id,\r\n                name: branch.name,\r\n              })),\r\n            })}\r\n\r\n          {myControlledInput({\r\n            label: 'Current Password',\r\n            value: user.password,\r\n            name: 'password',\r\n            type: 'password',\r\n          })}\r\n          {myControlledInput({\r\n            label: 'New Password',\r\n            value: user.new_password,\r\n            name: 'new_password',\r\n            type: 'password',\r\n          })}\r\n\r\n          <Grid\r\n            container\r\n            style={{\r\n              paddingLeft: 15,\r\n              paddingRight: 15,\r\n              marginBottom: 10,\r\n            }}\r\n            alignItems='center'\r\n            justify='space-between'\r\n            xs={12}\r\n          >\r\n            <Typography variant='subtitle1'>\r\n              {imageFile?.name || 'Select Photo'}\r\n            </Typography>\r\n            <>\r\n              <input\r\n                accept='image/*'\r\n                style={{\r\n                  display: 'none',\r\n                }}\r\n                name='image'\r\n                id='icon-button-file'\r\n                type='file'\r\n                onChange={(e: any) => {\r\n                  setImageFile(e.target.files[0])\r\n                }}\r\n              />\r\n              <label htmlFor='icon-button-file'>\r\n                <IconButton\r\n                  color='primary'\r\n                  aria-label='upload picture'\r\n                  component='span'\r\n                >\r\n                  <PhotoCamera />\r\n                </IconButton>\r\n              </label>\r\n            </>\r\n          </Grid>\r\n\r\n          <Grid\r\n            style={{ paddingLeft: 18, paddingTop: 10, paddingBottom: 5 }}\r\n            container\r\n            xs={12}\r\n            justify='center'\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={6}></Grid>\r\n            <Grid item xs={6}>\r\n              {myButton()}\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </MyForm>\r\n  )\r\n}\r\nexport default AccountSettings\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MyGraph\\index.tsx",["584","585","586","587"],"import { useEffect, useState, useContext } from 'react'\r\nimport {\r\n  ResponsiveContainer,\r\n  AreaChart,\r\n  Area,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n} from 'recharts'\r\nimport useTheme from '@material-ui/core/styles/useTheme'\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Menu from '@material-ui/core/Menu'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport ExpandMore from '@material-ui/icons/ExpandMore'\r\nimport Branch from 'models/branch'\r\n\r\nexport interface DataProps {\r\n  name: string\r\n  count: number\r\n  year?: number\r\n}\r\n\r\nexport interface ClientsGraphProps {\r\n  branches: Branch[]\r\n  data: DataProps[]\r\n  range: { start: string; end: string }\r\n  title: string\r\n  onSelectedRange: (range: string) => void\r\n  onSelectedBranch: (branch: string) => void\r\n}\r\n\r\nconst MyGraph: React.SFC<ClientsGraphProps> = ({\r\n  branches,\r\n  data,\r\n  title,\r\n  range,\r\n  onSelectedRange,\r\n  onSelectedBranch,\r\n}) => {\r\n  const theme = useTheme()\r\n\r\n  const [anchorElRange, setAnchorElRange] = useState(null)\r\n\r\n  const [anchorElBranch, setAnchorElBranch] = useState(null)\r\n\r\n  const [textRange, setTextRange] = useState('ALL RECORDS')\r\n\r\n  const [textBranch, setTextBranch] = useState('ALL BRANCHES')\r\n\r\n  const handleClickRange = (event: any) => {\r\n    setAnchorElRange(event.currentTarget)\r\n  }\r\n\r\n  const handleClickBranch = (event: any) => {\r\n    setAnchorElBranch(event.currentTarget)\r\n  }\r\n\r\n  const handleSelectRange = (event: any) => {\r\n    const value = event.currentTarget?.id\r\n    const text = event.currentTarget?.title\r\n\r\n    setAnchorElRange(null)\r\n\r\n    if (!text) {\r\n      return\r\n    }\r\n\r\n    onSelectedRange(value)\r\n    setTextRange(text)\r\n  }\r\n\r\n  const handleSelectBranch = (event: any) => {\r\n    const value = event.currentTarget?.id\r\n    const text = event.currentTarget?.title\r\n    setAnchorElBranch(null)\r\n\r\n    if (!text) {\r\n      return\r\n    }\r\n\r\n    onSelectedBranch(value)\r\n    setTextBranch(text)\r\n  }\r\n\r\n  const renderMenuItemBranch = (branch: Branch) => {\r\n    return (\r\n      <MenuItem\r\n        key={branch?.id!}\r\n        id={'' + branch?.id!}\r\n        title={branch?.name}\r\n        onClick={handleSelectBranch}\r\n      >\r\n        {branch?.name}\r\n      </MenuItem>\r\n    )\r\n  }\r\n\r\n  const total = data?.reduce((acc, stat) => acc + +stat.count, 0)\r\n\r\n  return (\r\n    <>\r\n      <Grid container xs={12} justify='space-between'>\r\n        <Grid container xs={6} item>\r\n          <Button\r\n            aria-controls='simple-menu'\r\n            aria-haspopup='true'\r\n            color='default'\r\n            onClick={handleClickRange}\r\n            endIcon={<ExpandMore />}\r\n          >\r\n            {textRange}\r\n          </Button>\r\n          <Menu\r\n            id='simple-menu'\r\n            anchorEl={anchorElRange}\r\n            keepMounted\r\n            open={Boolean(anchorElRange)}\r\n            onClose={handleSelectRange}\r\n          >\r\n            <MenuItem title='PAST 7 DAYS' id='week' onClick={handleSelectRange}>\r\n              PAST 7 DAYS\r\n            </MenuItem>\r\n            <MenuItem\r\n              title='PAST 30 DAYS'\r\n              id='month'\r\n              onClick={handleSelectRange}\r\n            >\r\n              PAST 30 DAYS\r\n            </MenuItem>\r\n            <MenuItem\r\n              title='PAST 12 MONTHS'\r\n              id='year'\r\n              onClick={handleSelectRange}\r\n            >\r\n              PAST 12 MONTHS\r\n            </MenuItem>\r\n            <MenuItem title='ALL RECORDS' id='' onClick={handleSelectRange}>\r\n              ALL RECORDS\r\n            </MenuItem>\r\n          </Menu>\r\n        </Grid>\r\n        <Grid container xs={6} item justify='flex-end'>\r\n          <Button\r\n            aria-controls='simple-menu-branch'\r\n            aria-haspopup='true'\r\n            color='default'\r\n            onClick={handleClickBranch}\r\n            endIcon={<ExpandMore />}\r\n          >\r\n            {textBranch}\r\n          </Button>\r\n          <Menu\r\n            id='simple-menu-branch'\r\n            anchorEl={anchorElBranch}\r\n            keepMounted\r\n            open={Boolean(anchorElBranch)}\r\n            onClose={handleSelectBranch}\r\n          >\r\n            {branches.map((branch) => renderMenuItemBranch(branch || ''))}\r\n          </Menu>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <ResponsiveContainer width='100%' height={200}>\r\n        <AreaChart\r\n          data={data}\r\n          margin={{ top: 10, right: 20, left: -20, bottom: 0 }}\r\n        >\r\n          <defs>\r\n            <linearGradient id='colorCount' x1='0' y1='0' x2='0' y2='1'>\r\n              <stop\r\n                offset='20%'\r\n                stopColor={theme.palette.secondary.main}\r\n                stopOpacity={0.8}\r\n              />\r\n              <stop\r\n                offset='95%'\r\n                stopColor={theme.palette.secondary.main}\r\n                stopOpacity={0}\r\n              />\r\n            </linearGradient>\r\n          </defs>\r\n\r\n          <XAxis dataKey='name' />\r\n          <YAxis />\r\n          <CartesianGrid strokeDasharray='3 3' />\r\n          <Tooltip\r\n            contentStyle={{\r\n              borderRadius: 10,\r\n              backgroundColor: theme.palette.background.paper,\r\n              border: 0,\r\n            }}\r\n            // labelStyle={{ color: '#333' }}\r\n          />\r\n          {/* <Legend verticalAlign='bottom' height={40} /> */}\r\n\r\n          <Area\r\n            name='total'\r\n            type='monotone'\r\n            dataKey='count'\r\n            stroke={theme.palette.secondary.main}\r\n            fillOpacity={2}\r\n            fill='url(#colorCount)'\r\n          />\r\n        </AreaChart>\r\n      </ResponsiveContainer>\r\n\r\n      <Grid xs={12} item container alignItems='center' justify='center'>\r\n        <Typography component='h5' variant='subtitle1' color='textSecondary'>\r\n          {`${total} ${title} from ${\r\n            range?.start\r\n              ? new Date(range?.start!).toLocaleDateString('en-GB', {\r\n                  month: '2-digit',\r\n                  day: '2-digit',\r\n                  year: 'numeric',\r\n                })\r\n              : ''\r\n          } to ${\r\n            range?.end\r\n              ? new Date(range?.end!).toLocaleDateString('en-GB', {\r\n                  month: '2-digit',\r\n                  day: '2-digit',\r\n                  year: 'numeric',\r\n                })\r\n              : ''\r\n          }`}\r\n        </Typography>\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MyGraph\r\n",["588","589"],"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\common\\MyNavFooter\\index.tsx",["590","591","592","593"],"import React, { useContext, useEffect } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Fab from '@material-ui/core/Fab'\r\nimport Fade from 'react-reveal/Fade'\r\nimport DashboardIcon from '@material-ui/icons/Dashboard'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Badge from '@material-ui/core/Badge'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport NotificationIcon from '@material-ui/icons/Notifications'\r\nimport TransactionIcon from '@material-ui/icons/Payment'\r\nimport EmployeesIcon from '@material-ui/icons/People'\r\nimport FaceIcon from '@material-ui/icons/Face'\r\nimport ClientIcon from '@material-ui/icons/SupervisedUserCircle'\r\nimport { NotificationContext } from 'providers/NotificationProvider'\r\nimport { getUnread } from 'services/notificationService'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\n\r\nexport interface MyNavFooterProps {}\r\n\r\nconst MyNavFooter: React.SFC<MyNavFooterProps> = () => {\r\n  const styles = useStyles()\r\n  const history = useHistory()\r\n  const [globalState, _] = useContext(GlobalContext)!\r\n  const [{ unread }, dispatch] = useContext(NotificationContext)!\r\n\r\n  return (\r\n    <AppBar position='fixed' color='primary' className={styles.appBar}>\r\n      <Fade delay={1000} bottom>\r\n        <Toolbar>\r\n          <Grid\r\n            container\r\n            // style={{ paddingLeft: 50, paddingRight: 50 }}\r\n            xs={12}\r\n            justify='space-around'\r\n          >\r\n            <IconButton\r\n              onClick={() => history.push('/clients/new')}\r\n              style={{ paddingBottom: 22 }}\r\n              color='inherit'\r\n            >\r\n              <ClientIcon />\r\n            </IconButton>\r\n\r\n            <IconButton\r\n              onClick={() => history.push('/employees/new')}\r\n              style={{ paddingBottom: 22 }}\r\n              color='inherit'\r\n            >\r\n              <EmployeesIcon />\r\n            </IconButton>\r\n\r\n            <Grid item xs={2}></Grid>\r\n\r\n            <IconButton\r\n              onClick={() => history.push('/transaction/encode')}\r\n              style={{ paddingBottom: 22 }}\r\n              color='inherit'\r\n            >\r\n              <TransactionIcon />\r\n            </IconButton>\r\n\r\n            {globalState?.currentUser?.role === 'admin' && (\r\n              <IconButton\r\n                onClick={() => history.push('/notifications')}\r\n                style={{ paddingBottom: 22 }}\r\n                color='inherit'\r\n              >\r\n                <Badge\r\n                  invisible={unread <= 0}\r\n                  badgeContent={unread! >= 100 ? '99+' : unread}\r\n                  color='secondary'\r\n                >\r\n                  <NotificationIcon />\r\n                </Badge>\r\n              </IconButton>\r\n            )}\r\n            {globalState?.currentUser?.role !== 'admin' && (\r\n              <IconButton\r\n                onClick={() => history.push('/settings/account')}\r\n                style={{ paddingBottom: 22 }}\r\n                color='inherit'\r\n              >\r\n                <FaceIcon />\r\n              </IconButton>\r\n            )}\r\n          </Grid>\r\n          <Fab\r\n            onClick={() => history.replace('/')}\r\n            color='secondary'\r\n            aria-label='add'\r\n            className={styles.fabButton}\r\n          >\r\n            <DashboardIcon />\r\n          </Fab>\r\n        </Toolbar>\r\n      </Fade>\r\n    </AppBar>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    top: 'auto',\r\n    bottom: -10,\r\n    background:\r\n      'linear-gradient(to left, #9c27b0, #9c27b0, #9c27b0, #9c27b0, #9c27b0, #a721aa, #b119a4, #ba119e, #cb0090, #d80081, #e20672, #e91e63)',\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  fabButton: {\r\n    position: 'absolute',\r\n    zIndex: 1,\r\n    top: -20,\r\n    left: 0,\r\n    right: 0,\r\n    margin: '0 auto',\r\n  },\r\n}))\r\n\r\nexport default MyNavFooter\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\services\\statisticService.tsx",[],"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Dashboard\\StatisticGraph\\index.tsx",["594","595"],"import { useState, useEffect, useContext } from 'react'\r\nimport MyGraph, { DataProps } from 'components/common/MyGraph'\r\nimport Branch from 'models/branch'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\n\r\ninterface StatisticsProps {\r\n  range: { start: string; end: string }\r\n  statistics: DataProps[]\r\n}\r\n\r\nexport interface StatisticGraphProps {\r\n  branches: Branch[]\r\n  title: string\r\n  getData: (range: string, branchId?: number) => Promise<any>\r\n}\r\n\r\nconst StatisticGraph: React.SFC<StatisticGraphProps> = ({\r\n  branches,\r\n  getData,\r\n  title,\r\n}) => {\r\n  const [state, _] = useContext(GlobalContext)!\r\n  const [data, setData] = useState<StatisticsProps>({\r\n    range: { start: '', end: '' },\r\n    statistics: [],\r\n  })\r\n\r\n  const [branchId, setBranchId] = useState('')\r\n\r\n  const [range, setRange] = useState('')\r\n\r\n  useEffect(() => {\r\n    if (state?.currentUser?.role === 'admin') {\r\n      getData(range, +branchId).then((data) => {\r\n        setData((prevData) => ({\r\n          ...prevData,\r\n          ...data,\r\n        }))\r\n      })\r\n    }\r\n  }, [range, branchId])\r\n\r\n  const handleSelectedBranchClient = (branchId: string) => {\r\n    setBranchId(branchId)\r\n  }\r\n\r\n  const handleSelectedRange = (range: string) => {\r\n    setRange(range)\r\n  }\r\n\r\n  return (\r\n    <MyGraph\r\n      onSelectedRange={handleSelectedRange}\r\n      onSelectedBranch={handleSelectedBranchClient}\r\n      title={title}\r\n      range={data?.range!}\r\n      data={data?.statistics!}\r\n      branches={branches}\r\n    />\r\n  )\r\n}\r\n\r\nexport default StatisticGraph\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Notifications\\index.tsx",["596"],"import { GlobalContext } from 'providers/GlobalProvider'\r\nimport { NotificationContext } from 'providers/NotificationProvider'\r\nimport { useContext, useEffect } from 'react'\r\nimport {\r\n  getNotifications,\r\n  markAsRead,\r\n  markAllAsRead,\r\n  send,\r\n} from 'services/notificationService'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport NotificationCard from './NotificationCard'\r\nimport Notification from 'models/notification'\r\n\r\nexport interface NotificationsProps {}\r\n\r\nconst Notifications: React.SFC<NotificationsProps> = () => {\r\n  const [globalState, globalDispatch] = useContext(GlobalContext)!\r\n  const [notifState, notifDispatch] = useContext(NotificationContext)!\r\n\r\n  useEffect(() => {\r\n    globalDispatch({ type: 'SET_TITLE', payload: 'Notifications' })\r\n    onLoad()\r\n  }, [])\r\n\r\n  const onLoad = () => {\r\n    globalDispatch({ type: 'SET_IS_LOADING', payload: true })\r\n\r\n    getNotifications().then((notifications) => {\r\n      globalDispatch({ type: 'SET_IS_LOADING', payload: false })\r\n      notifDispatch({ type: 'ON_LOAD_NOTIFICATIONS', payload: notifications })\r\n    })\r\n  }\r\n\r\n  const handleRead = (notification: Notification) => {\r\n    markAsRead(notification).then(() => {\r\n      onLoad()\r\n    })\r\n  }\r\n\r\n  const handleMarkAllAsRead = () => {\r\n    markAllAsRead().then(() => onLoad())\r\n  }\r\n\r\n  const handleResend = async (notification: Notification) => {\r\n    return send(notification)\r\n      .then(({ message }) => {\r\n        globalDispatch({\r\n          type: 'SET_ALERT',\r\n          payload: { message, type: 'success' },\r\n        })\r\n        onLoad()\r\n        return true\r\n      })\r\n      .catch((error) => {\r\n        globalDispatch({\r\n          type: 'SET_ALERT',\r\n          payload: { message: error.response.data.message, type: 'error' },\r\n        })\r\n        return false\r\n      })\r\n  }\r\n\r\n  const isLoading = globalState.isLoading && !notifState.notifications.length\r\n\r\n  return (\r\n    <>\r\n      {!globalState.isLoading && notifState.notifications.length === 0 && (\r\n        <Grid container xs={12} justify='center'>\r\n          <Typography component='h6' variant='h6'>\r\n            No New Notification\r\n          </Typography>\r\n        </Grid>\r\n      )}\r\n      {!isLoading && notifState.notifications.length > 0 && (\r\n        <>\r\n          <Grid item xs={12} justify='center' container>\r\n            <Button\r\n              onClick={handleMarkAllAsRead}\r\n              disabled={\r\n                !notifState.notifications.filter((n) => !n.is_read).length\r\n              }\r\n              variant='text'\r\n              color='primary'\r\n            >\r\n              Mark ALL AS READ\r\n            </Button>\r\n          </Grid>\r\n          {notifState.notifications.map((notif) => (\r\n            <NotificationCard\r\n              onRead={handleRead}\r\n              onResend={handleResend}\r\n              notification={notif}\r\n            ></NotificationCard>\r\n          ))}\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Notifications\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\providers\\StatisticProvider.tsx",["597"],"import { createContext, Dispatch, useReducer } from 'react'\r\nimport { produce } from 'immer'\r\nimport Branch from 'models/branch'\r\n\r\nexport const StatContext = createContext<\r\n  [state: StatState, dispatch: Dispatch<StatAction>] | null\r\n>(null)\r\n\r\ninterface StatisticsProps {\r\n  totalClients: number\r\n  grossSales: number\r\n  netSales: number\r\n  near: number\r\n  lapsed: number\r\n  releaseCommissions: number\r\n  unreleaseCommissions: number\r\n  draft: number\r\n}\r\n\r\ninterface StatState {\r\n  stat: StatisticsProps\r\n}\r\n\r\nexport type StatAction = {\r\n  type: 'ON_LOAD_STAT'\r\n  payload: StatisticsProps\r\n}\r\n\r\nconst reducer = (state: StatState, action: StatAction) => {\r\n  switch (action.type) {\r\n    case 'ON_LOAD_STAT':\r\n      state.stat = action.payload\r\n      break\r\n    default:\r\n      return state\r\n  }\r\n  return state\r\n}\r\n\r\nexport const StatisticProvider: React.FC = (props) => {\r\n  const [state, dispatch] = useReducer(produce(reducer), {\r\n    stat: {\r\n      totalClients: 0,\r\n      grossSales: 0,\r\n      netSales: 0,\r\n      near: 0,\r\n      lapsed: 0,\r\n      releaseCommissions: 0,\r\n      unreleaseCommissions: 0,\r\n      draft: 0,\r\n    },\r\n  })\r\n\r\n  return (\r\n    <StatContext.Provider value={[state, dispatch]}>\r\n      {props.children}\r\n    </StatContext.Provider>\r\n  )\r\n}\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\services\\notificationService.tsx",[],"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\providers\\NotificationProvider.tsx",[],"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\components\\pages\\Notifications\\NotificationCard\\index.tsx",["598","599"],"import CardContent from '@material-ui/core/CardContent'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport MyCard from 'components/common/MyCard'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Chip from '@material-ui/core/Chip'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { useContext, useState } from 'react'\r\n\r\nimport Notification from 'models/notification'\r\nimport MyAvatar from 'components/common/MyAvatar'\r\nimport { GlobalContext } from 'providers/GlobalProvider'\r\n\r\nexport interface NotificationCardProps {\r\n  notification: Notification\r\n  onResend?: (notification: Notification) => Promise<boolean>\r\n  onRead?: (notification: Notification) => void\r\n}\r\n\r\nconst NotificationCard: React.SFC<NotificationCardProps> = ({\r\n  notification,\r\n  onResend,\r\n  onRead,\r\n}) => {\r\n  const history = useHistory()\r\n  const [globalState, globalDispatch] = useContext(GlobalContext)!\r\n  const profile = notification?.client?.profile\r\n  const client = notification?.client\r\n\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  const next_payment = new Date(client?.next_payment!).toDateString()\r\n\r\n  const title =\r\n    notification?.type === 'lapse'\r\n      ? 'Lapsed on ' + next_payment\r\n      : 'Near on ' + next_payment\r\n\r\n  const handleResend = async () => {\r\n    setIsLoading(true)\r\n    await onResend?.(notification)\r\n    setIsLoading(false)\r\n  }\r\n\r\n  return (\r\n    <MyCard style={{ marginTop: 20 }} title={title}>\r\n      <CardContent>\r\n        <Grid container xs={12} justify='space-between'>\r\n          <Grid\r\n            style={{ paddingLeft: 10 }}\r\n            container\r\n            item\r\n            direction='column'\r\n            xs={7}\r\n            justify='flex-start'\r\n          >\r\n            <Typography component='h6' variant='h6'>\r\n              {`${profile?.lastname}, ${profile?.firstname} ${profile?.middlename}`}\r\n            </Typography>\r\n\r\n            <Typography variant='subtitle1' color='textSecondary'>\r\n              {`${client?.code}`}\r\n            </Typography>\r\n\r\n            <Grid item xs={1}>\r\n              <Chip\r\n                style={{ marginTop: 10 }}\r\n                size='small'\r\n                label={notification?.is_sent ? 'notified' : 'unnotified'}\r\n                variant='outlined'\r\n                color={!notification?.is_sent ? 'secondary' : 'primary'}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item xs={5} justify='center' alignItems='center'>\r\n            <MyAvatar\r\n              src={profile?.image_url}\r\n              onClick={() => history.push('/clients/' + client?.id)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Divider\r\n          style={{ marginLeft: 20, marginRight: 20, marginTop: 20 }}\r\n        ></Divider>\r\n\r\n        <Grid\r\n          style={{ padding: 15, paddingBottom: 0 }}\r\n          container\r\n          xs={12}\r\n          justify='space-evenly'\r\n        >\r\n          <Grid item xs={6}>\r\n            <Button\r\n              disabled={isLoading}\r\n              onClick={handleResend}\r\n              fullWidth\r\n              variant='text'\r\n              color='primary'\r\n              startIcon={\r\n                isLoading && (\r\n                  <CircularProgress\r\n                    color='primary'\r\n                    size={24}\r\n                    style={{\r\n                      position: 'absolute',\r\n                      top: '50%',\r\n                      left: '50%',\r\n                      marginTop: -12,\r\n                      marginLeft: -12,\r\n                    }}\r\n                  />\r\n                )\r\n              }\r\n            >\r\n              Resend\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Button\r\n              disabled={notification?.is_read}\r\n              onClick={() => onRead?.(notification)}\r\n              fullWidth\r\n              variant='text'\r\n              color='primary'\r\n            >\r\n              Mark As Read\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </MyCard>\r\n  )\r\n}\r\n\r\nexport default NotificationCard\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\services\\settingService.tsx",[],"C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\validators\\settingValidator.tsx",["600"],"import Joi from 'joi'\r\nimport { notNull } from 'utils/helper'\r\n\r\nconst settingValidator = {\r\n  apiCode: notNull('API Code'),\r\n  apiPassword: notNull('API Password'),\r\n}\r\n\r\nexport default settingValidator\r\n","C:\\Users\\kitchan\\Desktop\\psy_insurance\\Insurance-Management-System\\src\\serviceWorker.tsx",[],{"ruleId":"601","replacedBy":"602"},{"ruleId":"603","replacedBy":"604"},{"ruleId":"605","severity":1,"message":"606","line":1,"column":29,"nodeType":"607","messageId":"608","endLine":1,"endColumn":38},{"ruleId":"605","severity":1,"message":"609","line":19,"column":17,"nodeType":"607","messageId":"608","endLine":19,"endColumn":25},{"ruleId":"605","severity":1,"message":"606","line":1,"column":35,"nodeType":"607","messageId":"608","endLine":1,"endColumn":44},{"ruleId":"605","severity":1,"message":"606","line":1,"column":47,"nodeType":"607","messageId":"608","endLine":1,"endColumn":56},{"ruleId":"605","severity":1,"message":"610","line":19,"column":9,"nodeType":"607","messageId":"608","endLine":19,"endColumn":16},{"ruleId":"605","severity":1,"message":"611","line":1,"column":8,"nodeType":"607","messageId":"608","endLine":1,"endColumn":14},{"ruleId":"605","severity":1,"message":"612","line":3,"column":8,"nodeType":"607","messageId":"608","endLine":3,"endColumn":20},{"ruleId":"605","severity":1,"message":"613","line":4,"column":8,"nodeType":"607","messageId":"608","endLine":4,"endColumn":15},{"ruleId":"605","severity":1,"message":"614","line":60,"column":9,"nodeType":"607","messageId":"608","endLine":60,"endColumn":28},{"ruleId":"605","severity":1,"message":"615","line":61,"column":9,"nodeType":"607","messageId":"608","endLine":61,"endColumn":29},{"ruleId":"605","severity":1,"message":"616","line":62,"column":9,"nodeType":"607","messageId":"608","endLine":62,"endColumn":25},{"ruleId":"605","severity":1,"message":"617","line":63,"column":9,"nodeType":"607","messageId":"608","endLine":63,"endColumn":25},{"ruleId":"605","severity":1,"message":"618","line":15,"column":10,"nodeType":"607","messageId":"608","endLine":15,"endColumn":15},{"ruleId":"605","severity":1,"message":"618","line":14,"column":10,"nodeType":"607","messageId":"608","endLine":14,"endColumn":15},{"ruleId":"605","severity":1,"message":"619","line":21,"column":10,"nodeType":"607","messageId":"608","endLine":21,"endColumn":11},{"ruleId":"605","severity":1,"message":"620","line":23,"column":25,"nodeType":"607","messageId":"608","endLine":23,"endColumn":41},{"ruleId":"605","severity":1,"message":"621","line":31,"column":10,"nodeType":"607","messageId":"608","endLine":31,"endColumn":19},{"ruleId":"622","severity":1,"message":"623","line":53,"column":6,"nodeType":"624","endLine":53,"endColumn":8,"suggestions":"625"},{"ruleId":"605","severity":1,"message":"626","line":6,"column":40,"nodeType":"607","messageId":"608","endLine":6,"endColumn":48},{"ruleId":"622","severity":1,"message":"627","line":50,"column":6,"nodeType":"624","endLine":50,"endColumn":8,"suggestions":"628"},{"ruleId":"605","severity":1,"message":"629","line":2,"column":33,"nodeType":"607","messageId":"608","endLine":2,"endColumn":45},{"ruleId":"630","severity":1,"message":"631","line":57,"column":1,"nodeType":"632","endLine":63,"endColumn":2},{"ruleId":"605","severity":1,"message":"619","line":22,"column":10,"nodeType":"607","messageId":"608","endLine":22,"endColumn":11},{"ruleId":"605","severity":1,"message":"633","line":24,"column":10,"nodeType":"607","messageId":"608","endLine":24,"endColumn":21},{"ruleId":"605","severity":1,"message":"634","line":24,"column":23,"nodeType":"607","messageId":"608","endLine":24,"endColumn":37},{"ruleId":"622","severity":1,"message":"635","line":41,"column":6,"nodeType":"624","endLine":41,"endColumn":8,"suggestions":"636"},{"ruleId":"605","severity":1,"message":"637","line":20,"column":10,"nodeType":"607","messageId":"608","endLine":20,"endColumn":21},{"ruleId":"605","severity":1,"message":"638","line":21,"column":10,"nodeType":"607","messageId":"608","endLine":21,"endColumn":23},{"ruleId":"605","severity":1,"message":"639","line":29,"column":10,"nodeType":"607","messageId":"608","endLine":29,"endColumn":20},{"ruleId":"622","severity":1,"message":"640","line":41,"column":6,"nodeType":"624","endLine":41,"endColumn":8,"suggestions":"641"},{"ruleId":"605","severity":1,"message":"619","line":17,"column":10,"nodeType":"607","messageId":"608","endLine":17,"endColumn":11},{"ruleId":"622","severity":1,"message":"642","line":41,"column":6,"nodeType":"624","endLine":41,"endColumn":8,"suggestions":"643"},{"ruleId":"605","severity":1,"message":"644","line":2,"column":8,"nodeType":"607","messageId":"608","endLine":2,"endColumn":12},{"ruleId":"605","severity":1,"message":"645","line":11,"column":24,"nodeType":"607","messageId":"608","endLine":11,"endColumn":34},{"ruleId":"605","severity":1,"message":"646","line":30,"column":9,"nodeType":"607","messageId":"608","endLine":30,"endColumn":15},{"ruleId":"605","severity":1,"message":"619","line":32,"column":10,"nodeType":"607","messageId":"608","endLine":32,"endColumn":11},{"ruleId":"622","severity":1,"message":"647","line":46,"column":6,"nodeType":"624","endLine":46,"endColumn":8,"suggestions":"648"},{"ruleId":"605","severity":1,"message":"649","line":27,"column":10,"nodeType":"607","messageId":"608","endLine":27,"endColumn":21},{"ruleId":"622","severity":1,"message":"642","line":53,"column":6,"nodeType":"624","endLine":53,"endColumn":8,"suggestions":"650"},{"ruleId":"605","severity":1,"message":"649","line":20,"column":10,"nodeType":"607","messageId":"608","endLine":20,"endColumn":21},{"ruleId":"622","severity":1,"message":"651","line":30,"column":6,"nodeType":"624","endLine":30,"endColumn":8,"suggestions":"652"},{"ruleId":"605","severity":1,"message":"619","line":26,"column":10,"nodeType":"607","messageId":"608","endLine":26,"endColumn":11},{"ruleId":"622","severity":1,"message":"653","line":39,"column":6,"nodeType":"624","endLine":39,"endColumn":8,"suggestions":"654"},{"ruleId":"605","severity":1,"message":"619","line":27,"column":10,"nodeType":"607","messageId":"608","endLine":27,"endColumn":11},{"ruleId":"622","severity":1,"message":"642","line":54,"column":6,"nodeType":"624","endLine":54,"endColumn":8,"suggestions":"655"},{"ruleId":"605","severity":1,"message":"656","line":9,"column":8,"nodeType":"607","messageId":"608","endLine":9,"endColumn":12},{"ruleId":"605","severity":1,"message":"657","line":11,"column":22,"nodeType":"607","messageId":"608","endLine":11,"endColumn":33},{"ruleId":"605","severity":1,"message":"658","line":12,"column":10,"nodeType":"607","messageId":"608","endLine":12,"endColumn":24},{"ruleId":"605","severity":1,"message":"649","line":28,"column":10,"nodeType":"607","messageId":"608","endLine":28,"endColumn":21},{"ruleId":"622","severity":1,"message":"635","line":48,"column":6,"nodeType":"624","endLine":48,"endColumn":8,"suggestions":"659"},{"ruleId":"605","severity":1,"message":"660","line":53,"column":9,"nodeType":"607","messageId":"608","endLine":53,"endColumn":19},{"ruleId":"605","severity":1,"message":"619","line":22,"column":10,"nodeType":"607","messageId":"608","endLine":22,"endColumn":11},{"ruleId":"605","severity":1,"message":"661","line":30,"column":9,"nodeType":"607","messageId":"608","endLine":30,"endColumn":17},{"ruleId":"622","severity":1,"message":"651","line":41,"column":6,"nodeType":"624","endLine":41,"endColumn":8,"suggestions":"662"},{"ruleId":"605","severity":1,"message":"663","line":8,"column":21,"nodeType":"607","messageId":"608","endLine":8,"endColumn":31},{"ruleId":"622","severity":1,"message":"664","line":25,"column":6,"nodeType":"624","endLine":25,"endColumn":8,"suggestions":"665"},{"ruleId":"605","severity":1,"message":"666","line":13,"column":37,"nodeType":"607","messageId":"608","endLine":13,"endColumn":51},{"ruleId":"605","severity":1,"message":"618","line":20,"column":10,"nodeType":"607","messageId":"608","endLine":20,"endColumn":15},{"ruleId":"605","severity":1,"message":"610","line":22,"column":9,"nodeType":"607","messageId":"608","endLine":22,"endColumn":16},{"ruleId":"622","severity":1,"message":"667","line":26,"column":6,"nodeType":"624","endLine":26,"endColumn":8,"suggestions":"668"},{"ruleId":"605","severity":1,"message":"619","line":26,"column":10,"nodeType":"607","messageId":"608","endLine":26,"endColumn":11},{"ruleId":"622","severity":1,"message":"651","line":40,"column":6,"nodeType":"624","endLine":40,"endColumn":8,"suggestions":"669"},{"ruleId":"605","severity":1,"message":"670","line":7,"column":3,"nodeType":"607","messageId":"608","endLine":7,"endColumn":13},{"ruleId":"605","severity":1,"message":"639","line":32,"column":10,"nodeType":"607","messageId":"608","endLine":32,"endColumn":20},{"ruleId":"622","severity":1,"message":"671","line":66,"column":6,"nodeType":"624","endLine":66,"endColumn":8,"suggestions":"672"},{"ruleId":"622","severity":1,"message":"673","line":117,"column":6,"nodeType":"624","endLine":117,"endColumn":48,"suggestions":"674"},{"ruleId":"605","severity":1,"message":"675","line":3,"column":31,"nodeType":"607","messageId":"608","endLine":3,"endColumn":42},{"ruleId":"605","severity":1,"message":"612","line":5,"column":8,"nodeType":"607","messageId":"608","endLine":5,"endColumn":20},{"ruleId":"622","severity":1,"message":"676","line":41,"column":6,"nodeType":"624","endLine":41,"endColumn":27,"suggestions":"677"},{"ruleId":"622","severity":1,"message":"678","line":51,"column":6,"nodeType":"624","endLine":51,"endColumn":8,"suggestions":"679"},{"ruleId":"605","severity":1,"message":"680","line":3,"column":8,"nodeType":"607","messageId":"608","endLine":3,"endColumn":14},{"ruleId":"605","severity":1,"message":"681","line":9,"column":8,"nodeType":"607","messageId":"608","endLine":9,"endColumn":16},{"ruleId":"605","severity":1,"message":"682","line":10,"column":8,"nodeType":"607","messageId":"608","endLine":10,"endColumn":18},{"ruleId":"605","severity":1,"message":"683","line":11,"column":8,"nodeType":"607","messageId":"608","endLine":11,"endColumn":16},{"ruleId":"605","severity":1,"message":"684","line":12,"column":8,"nodeType":"607","messageId":"608","endLine":12,"endColumn":15},{"ruleId":"605","severity":1,"message":"613","line":1,"column":8,"nodeType":"607","messageId":"608","endLine":1,"endColumn":15},{"ruleId":"605","severity":1,"message":"685","line":2,"column":10,"nodeType":"607","messageId":"608","endLine":2,"endColumn":21},{"ruleId":"605","severity":1,"message":"686","line":2,"column":23,"nodeType":"607","messageId":"608","endLine":2,"endColumn":30},{"ruleId":"605","severity":1,"message":"687","line":1,"column":17,"nodeType":"607","messageId":"608","endLine":1,"endColumn":27},{"ruleId":"605","severity":1,"message":"626","line":1,"column":29,"nodeType":"607","messageId":"608","endLine":1,"endColumn":37},{"ruleId":"605","severity":1,"message":"688","line":14,"column":8,"nodeType":"607","messageId":"608","endLine":14,"endColumn":19},{"ruleId":"605","severity":1,"message":"610","line":26,"column":9,"nodeType":"607","messageId":"608","endLine":26,"endColumn":16},{"ruleId":"605","severity":1,"message":"689","line":3,"column":8,"nodeType":"607","messageId":"608","endLine":3,"endColumn":18},{"ruleId":"605","severity":1,"message":"690","line":8,"column":10,"nodeType":"607","messageId":"608","endLine":8,"endColumn":36},{"ruleId":"605","severity":1,"message":"691","line":20,"column":8,"nodeType":"607","messageId":"608","endLine":20,"endColumn":17},{"ruleId":"605","severity":1,"message":"618","line":106,"column":10,"nodeType":"607","messageId":"608","endLine":106,"endColumn":15},{"ruleId":"605","severity":1,"message":"692","line":10,"column":10,"nodeType":"607","messageId":"608","endLine":10,"endColumn":24},{"ruleId":"605","severity":1,"message":"689","line":5,"column":8,"nodeType":"607","messageId":"608","endLine":5,"endColumn":18},{"ruleId":"605","severity":1,"message":"619","line":37,"column":17,"nodeType":"607","messageId":"608","endLine":37,"endColumn":18},{"ruleId":"605","severity":1,"message":"685","line":2,"column":10,"nodeType":"607","messageId":"608","endLine":2,"endColumn":21},{"ruleId":"605","severity":1,"message":"626","line":1,"column":10,"nodeType":"607","messageId":"608","endLine":1,"endColumn":18},{"ruleId":"605","severity":1,"message":"689","line":4,"column":8,"nodeType":"607","messageId":"608","endLine":4,"endColumn":18},{"ruleId":"605","severity":1,"message":"612","line":7,"column":8,"nodeType":"607","messageId":"608","endLine":7,"endColumn":20},{"ruleId":"605","severity":1,"message":"634","line":27,"column":23,"nodeType":"607","messageId":"608","endLine":27,"endColumn":37},{"ruleId":"622","severity":1,"message":"693","line":40,"column":6,"nodeType":"624","endLine":40,"endColumn":63,"suggestions":"694"},{"ruleId":"605","severity":1,"message":"687","line":1,"column":38,"nodeType":"607","messageId":"608","endLine":1,"endColumn":48},{"ruleId":"605","severity":1,"message":"689","line":4,"column":8,"nodeType":"607","messageId":"608","endLine":4,"endColumn":18},{"ruleId":"605","severity":1,"message":"695","line":6,"column":8,"nodeType":"607","messageId":"608","endLine":6,"endColumn":14},{"ruleId":"605","severity":1,"message":"684","line":8,"column":8,"nodeType":"607","messageId":"608","endLine":8,"endColumn":15},{"ruleId":"605","severity":1,"message":"696","line":10,"column":10,"nodeType":"607","messageId":"608","endLine":10,"endColumn":23},{"ruleId":"605","severity":1,"message":"697","line":11,"column":10,"nodeType":"607","messageId":"608","endLine":11,"endColumn":22},{"ruleId":"605","severity":1,"message":"611","line":13,"column":8,"nodeType":"607","messageId":"608","endLine":13,"endColumn":14},{"ruleId":"605","severity":1,"message":"698","line":14,"column":10,"nodeType":"607","messageId":"608","endLine":14,"endColumn":16},{"ruleId":"605","severity":1,"message":"699","line":15,"column":8,"nodeType":"607","messageId":"608","endLine":15,"endColumn":17},{"ruleId":"622","severity":1,"message":"700","line":45,"column":6,"nodeType":"624","endLine":45,"endColumn":14,"suggestions":"701"},{"ruleId":"605","severity":1,"message":"619","line":22,"column":27,"nodeType":"607","messageId":"608","endLine":22,"endColumn":28},{"ruleId":"605","severity":1,"message":"702","line":1,"column":8,"nodeType":"607","messageId":"608","endLine":1,"endColumn":11},{"ruleId":"605","severity":1,"message":"703","line":2,"column":8,"nodeType":"607","messageId":"608","endLine":2,"endColumn":16},{"ruleId":"605","severity":1,"message":"687","line":1,"column":17,"nodeType":"607","messageId":"608","endLine":1,"endColumn":27},{"ruleId":"605","severity":1,"message":"626","line":1,"column":29,"nodeType":"607","messageId":"608","endLine":1,"endColumn":37},{"ruleId":"605","severity":1,"message":"704","line":17,"column":10,"nodeType":"607","messageId":"608","endLine":17,"endColumn":25},{"ruleId":"605","severity":1,"message":"680","line":3,"column":8,"nodeType":"607","messageId":"608","endLine":3,"endColumn":14},{"ruleId":"605","severity":1,"message":"656","line":6,"column":8,"nodeType":"607","messageId":"608","endLine":6,"endColumn":12},{"ruleId":"605","severity":1,"message":"683","line":12,"column":8,"nodeType":"607","messageId":"608","endLine":12,"endColumn":16},{"ruleId":"605","severity":1,"message":"687","line":2,"column":10,"nodeType":"607","messageId":"608","endLine":2,"endColumn":20},{"ruleId":"605","severity":1,"message":"656","line":7,"column":8,"nodeType":"607","messageId":"608","endLine":7,"endColumn":12},{"ruleId":"605","severity":1,"message":"702","line":1,"column":8,"nodeType":"607","messageId":"608","endLine":1,"endColumn":11},{"ruleId":"605","severity":1,"message":"685","line":2,"column":10,"nodeType":"607","messageId":"608","endLine":2,"endColumn":21},{"ruleId":"605","severity":1,"message":"685","line":2,"column":10,"nodeType":"607","messageId":"608","endLine":2,"endColumn":21},{"ruleId":"605","severity":1,"message":"705","line":3,"column":22,"nodeType":"607","messageId":"608","endLine":3,"endColumn":33},{"ruleId":"605","severity":1,"message":"619","line":25,"column":10,"nodeType":"607","messageId":"608","endLine":25,"endColumn":11},{"ruleId":"622","severity":1,"message":"651","line":34,"column":6,"nodeType":"624","endLine":34,"endColumn":8,"suggestions":"706"},{"ruleId":"605","severity":1,"message":"687","line":1,"column":17,"nodeType":"607","messageId":"608","endLine":1,"endColumn":27},{"ruleId":"605","severity":1,"message":"626","line":1,"column":29,"nodeType":"607","messageId":"608","endLine":1,"endColumn":37},{"ruleId":"605","severity":1,"message":"683","line":9,"column":8,"nodeType":"607","messageId":"608","endLine":9,"endColumn":16},{"ruleId":"605","severity":1,"message":"656","line":12,"column":8,"nodeType":"607","messageId":"608","endLine":12,"endColumn":12},{"ruleId":"605","severity":1,"message":"707","line":10,"column":31,"nodeType":"607","messageId":"608","endLine":10,"endColumn":41},{"ruleId":"605","severity":1,"message":"620","line":23,"column":25,"nodeType":"607","messageId":"608","endLine":23,"endColumn":41},{"ruleId":"622","severity":1,"message":"708","line":37,"column":6,"nodeType":"624","endLine":37,"endColumn":8,"suggestions":"709"},{"ruleId":"605","severity":1,"message":"707","line":10,"column":31,"nodeType":"607","messageId":"608","endLine":10,"endColumn":41},{"ruleId":"605","severity":1,"message":"710","line":12,"column":10,"nodeType":"607","messageId":"608","endLine":12,"endColumn":21},{"ruleId":"622","severity":1,"message":"708","line":35,"column":6,"nodeType":"624","endLine":35,"endColumn":8,"suggestions":"711"},{"ruleId":"605","severity":1,"message":"689","line":4,"column":8,"nodeType":"607","messageId":"608","endLine":4,"endColumn":18},{"ruleId":"605","severity":1,"message":"712","line":5,"column":8,"nodeType":"607","messageId":"608","endLine":5,"endColumn":18},{"ruleId":"605","severity":1,"message":"713","line":6,"column":8,"nodeType":"607","messageId":"608","endLine":6,"endColumn":19},{"ruleId":"605","severity":1,"message":"707","line":10,"column":31,"nodeType":"607","messageId":"608","endLine":10,"endColumn":41},{"ruleId":"605","severity":1,"message":"710","line":12,"column":10,"nodeType":"607","messageId":"608","endLine":12,"endColumn":21},{"ruleId":"605","severity":1,"message":"714","line":27,"column":10,"nodeType":"607","messageId":"608","endLine":27,"endColumn":19},{"ruleId":"605","severity":1,"message":"715","line":27,"column":21,"nodeType":"607","messageId":"608","endLine":27,"endColumn":33},{"ruleId":"622","severity":1,"message":"623","line":47,"column":6,"nodeType":"624","endLine":47,"endColumn":8,"suggestions":"716"},{"ruleId":"605","severity":1,"message":"684","line":9,"column":8,"nodeType":"607","messageId":"608","endLine":9,"endColumn":15},{"ruleId":"605","severity":1,"message":"680","line":3,"column":8,"nodeType":"607","messageId":"608","endLine":3,"endColumn":14},{"ruleId":"605","severity":1,"message":"707","line":10,"column":31,"nodeType":"607","messageId":"608","endLine":10,"endColumn":41},{"ruleId":"605","severity":1,"message":"710","line":12,"column":10,"nodeType":"607","messageId":"608","endLine":12,"endColumn":21},{"ruleId":"605","severity":1,"message":"717","line":22,"column":12,"nodeType":"607","messageId":"608","endLine":22,"endColumn":23},{"ruleId":"605","severity":1,"message":"718","line":24,"column":9,"nodeType":"607","messageId":"608","endLine":24,"endColumn":15},{"ruleId":"622","severity":1,"message":"708","line":51,"column":6,"nodeType":"624","endLine":51,"endColumn":8,"suggestions":"719"},{"ruleId":"605","severity":1,"message":"610","line":53,"column":9,"nodeType":"607","messageId":"608","endLine":53,"endColumn":16},{"ruleId":"605","severity":1,"message":"606","line":1,"column":10,"nodeType":"607","messageId":"608","endLine":1,"endColumn":19},{"ruleId":"605","severity":1,"message":"687","line":1,"column":31,"nodeType":"607","messageId":"608","endLine":1,"endColumn":41},{"ruleId":"605","severity":1,"message":"720","line":10,"column":3,"nodeType":"607","messageId":"608","endLine":10,"endColumn":9},{"ruleId":"605","severity":1,"message":"721","line":16,"column":8,"nodeType":"607","messageId":"608","endLine":16,"endColumn":13},{"ruleId":"601","replacedBy":"722"},{"ruleId":"603","replacedBy":"723"},{"ruleId":"605","severity":1,"message":"606","line":1,"column":29,"nodeType":"607","messageId":"608","endLine":1,"endColumn":38},{"ruleId":"605","severity":1,"message":"724","line":18,"column":10,"nodeType":"607","messageId":"608","endLine":18,"endColumn":19},{"ruleId":"605","severity":1,"message":"619","line":26,"column":23,"nodeType":"607","messageId":"608","endLine":26,"endColumn":24},{"ruleId":"605","severity":1,"message":"609","line":27,"column":22,"nodeType":"607","messageId":"608","endLine":27,"endColumn":30},{"ruleId":"605","severity":1,"message":"619","line":22,"column":17,"nodeType":"607","messageId":"608","endLine":22,"endColumn":18},{"ruleId":"622","severity":1,"message":"725","line":41,"column":6,"nodeType":"624","endLine":41,"endColumn":23,"suggestions":"726"},{"ruleId":"622","severity":1,"message":"651","line":25,"column":6,"nodeType":"624","endLine":25,"endColumn":8,"suggestions":"727"},{"ruleId":"605","severity":1,"message":"611","line":3,"column":8,"nodeType":"607","messageId":"608","endLine":3,"endColumn":14},{"ruleId":"605","severity":1,"message":"649","line":28,"column":10,"nodeType":"607","messageId":"608","endLine":28,"endColumn":21},{"ruleId":"605","severity":1,"message":"728","line":28,"column":23,"nodeType":"607","messageId":"608","endLine":28,"endColumn":37},{"ruleId":"605","severity":1,"message":"702","line":1,"column":8,"nodeType":"607","messageId":"608","endLine":1,"endColumn":11},"no-native-reassign",["729"],"no-negated-in-lhs",["730"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'dispatch' is assigned a value but never used.","'history' is assigned a value but never used.","'Branch' is defined but never used.","'Commissioner' is defined but never used.","'Payment' is defined but never used.","'stateManagementOpen' is assigned a value but never used.","'stateTransactionOpen' is assigned a value but never used.","'stateHistoryOpen' is assigned a value but never used.","'stateSettingOpen' is assigned a value but never used.","'state' is assigned a value but never used.","'_' is assigned a value but never used.","'employeeDispatch' is assigned a value but never used.","'isLoading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'branchDispatch', 'globalDispatch', and 'params.id'. Either include them or remove the dependency array.","ArrayExpression",["731"],"'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'branchDispatch', 'dispatch', 'scroll', 'stat', and 'statDispatch'. Either include them or remove the dependency array.",["732"],"'apiUrlMobile' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'clientState' is assigned a value but never used.","'clientDispatch' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'globalDispatch' and 'params.id'. Either include them or remove the dependency array.",["733"],"'getBranches' is defined but never used.","'BranchContext' is defined but never used.","'notifState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'globalDispatch' and 'scroll'. Either include them or remove the dependency array.",["734"],"React Hook useEffect has missing dependencies: 'globalDispatch', 'location.search', and 'onLoad'. Either include them or remove the dependency array.",["735"],"'Link' is defined but never used.","'capitalize' is defined but never used.","'styles' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'params.id'. Either include them or remove the dependency array.",["736"],"'globalState' is assigned a value but never used.",["737"],"React Hook useEffect has missing dependencies: 'globalDispatch' and 'onLoad'. Either include them or remove the dependency array.",["738"],"React Hook useEffect has missing dependencies: 'globalDispatch' and 'id'. Either include them or remove the dependency array.",["739"],["740"],"'Chip' is defined but never used.","'getPayments' is defined but never used.","'PaymentContext' is defined but never used.",["741"],"'insured_at' is assigned a value but never used.","'location' is assigned a value but never used.",["742"],"'saveBranch' is defined but never used.","React Hook useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.",["743"],"'nameCapitalize' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["744"],["745"],"'getClients' is defined but never used.","React Hook useEffect has missing dependencies: 'globalDispatch' and 'onLoadClients'. Either include them or remove the dependency array.",["746"],"React Hook useEffect has missing dependencies: 'globalDispatch', 'globalState.currentUser?.branch?.id', 'globalState.currentUser?.role', and 'transaction'. Either include them or remove the dependency array.",["747"],"'RenderProps' is defined but never used.","React Hook useEffect has a missing dependency: 'branchOptions'. Either include it or remove the dependency array.",["748"],"React Hook useEffect has a missing dependency: 'setTransaction'. Either include it or remove the dependency array. If 'setTransaction' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["749"],"'Button' is defined but never used.","'EditIcon' is defined but never used.","'DeleteIcon' is defined but never used.","'ViewIcon' is defined but never used.","'Divider' is defined but never used.","'lettersOnly' is defined but never used.","'notNull' is defined but never used.","'useContext' is defined but never used.","'ReleaseIcon' is defined but never used.","'Typography' is defined but never used.","'ToggleCheckBoxOutlineBlank' is defined but never used.","'HeadShake' is defined but never used.","'AnyCnameRecord' is defined but never used.","React Hook useEffect has missing dependencies: 'clientState.plans' and 'setClient'. Either include them or remove the dependency array. If 'setClient' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["750"],"'Client' is defined but never used.","'GlobalContext' is defined but never used.","'getEmployees' is defined but never used.","'access' is defined but never used.","'Employees' is defined but never used.","React Hook useEffect has a missing dependency: 'setCommissioner'. Either include it or remove the dependency array. If 'setCommissioner' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["751"],"'Joi' is defined but never used.","'Employee' is defined but never used.","'EmployeeContext' is defined but never used.","'useLocation' is defined but never used.",["752"],"'InputProps' is defined but never used.","React Hook useEffect has missing dependencies: 'branchDispatch' and 'globalDispatch'. Either include them or remove the dependency array.",["753"],"'UserContext' is defined but never used.",["754"],"'IconButton' is defined but never used.","'PhotoCamera' is defined but never used.","'imageFile' is assigned a value but never used.","'setImageFile' is assigned a value but never used.",["755"],"'currentUser' is assigned a value but never used.","'params' is assigned a value but never used.",["756"],"'Legend' is defined but never used.","'Paper' is defined but never used.",["729"],["730"],"'getUnread' is defined but never used.","React Hook useEffect has missing dependencies: 'getData' and 'state?.currentUser?.role'. Either include them or remove the dependency array. If 'getData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["757"],["758"],"'globalDispatch' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"759","fix":"760"},{"desc":"761","fix":"762"},{"desc":"763","fix":"764"},{"desc":"765","fix":"766"},{"desc":"767","fix":"768"},{"desc":"769","fix":"770"},{"desc":"767","fix":"771"},{"desc":"772","fix":"773"},{"desc":"774","fix":"775"},{"desc":"767","fix":"776"},{"desc":"763","fix":"777"},{"desc":"772","fix":"778"},{"desc":"779","fix":"780"},{"desc":"781","fix":"782"},{"desc":"772","fix":"783"},{"desc":"784","fix":"785"},{"desc":"786","fix":"787"},{"desc":"788","fix":"789"},{"desc":"790","fix":"791"},{"desc":"792","fix":"793"},{"desc":"794","fix":"795"},{"desc":"772","fix":"796"},{"desc":"797","fix":"798"},{"desc":"797","fix":"799"},{"desc":"759","fix":"800"},{"desc":"797","fix":"801"},{"desc":"802","fix":"803"},{"desc":"772","fix":"804"},"Update the dependencies array to be: [branchDispatch, globalDispatch, params.id]",{"range":"805","text":"806"},"Update the dependencies array to be: [branchDispatch, dispatch, scroll, stat, statDispatch]",{"range":"807","text":"808"},"Update the dependencies array to be: [globalDispatch, params.id]",{"range":"809","text":"810"},"Update the dependencies array to be: [globalDispatch, scroll]",{"range":"811","text":"812"},"Update the dependencies array to be: [globalDispatch, location.search, onLoad]",{"range":"813","text":"814"},"Update the dependencies array to be: [dispatch, params.id]",{"range":"815","text":"816"},{"range":"817","text":"814"},"Update the dependencies array to be: [globalDispatch, onLoad]",{"range":"818","text":"819"},"Update the dependencies array to be: [globalDispatch, id]",{"range":"820","text":"821"},{"range":"822","text":"814"},{"range":"823","text":"810"},{"range":"824","text":"819"},"Update the dependencies array to be: [params.id]",{"range":"825","text":"826"},"Update the dependencies array to be: [dispatch]",{"range":"827","text":"828"},{"range":"829","text":"819"},"Update the dependencies array to be: [globalDispatch, onLoadClients]",{"range":"830","text":"831"},"Update the dependencies array to be: [transaction.payment_mode, transaction.id, transaction, globalDispatch, globalState.currentUser?.role, globalState.currentUser?.branch?.id]",{"range":"832","text":"833"},"Update the dependencies array to be: [branchOptions, transaction?.branch]",{"range":"834","text":"835"},"Update the dependencies array to be: [setTransaction]",{"range":"836","text":"837"},"Update the dependencies array to be: [client.payment_mode, client.payment_period, client.plan, clientState.plans, setClient]",{"range":"838","text":"839"},"Update the dependencies array to be: [branch, setCommissioner]",{"range":"840","text":"841"},{"range":"842","text":"819"},"Update the dependencies array to be: [branchDispatch, globalDispatch]",{"range":"843","text":"844"},{"range":"845","text":"844"},{"range":"846","text":"806"},{"range":"847","text":"844"},"Update the dependencies array to be: [range, branchId, state?.currentUser?.role, getData]",{"range":"848","text":"849"},{"range":"850","text":"819"},[1922,1924],"[branchDispatch, globalDispatch, params.id]",[1709,1711],"[branchDispatch, dispatch, scroll, stat, statDispatch]",[1516,1518],"[globalDispatch, params.id]",[1762,1764],"[globalDispatch, scroll]",[1478,1480],"[globalDispatch, location.search, onLoad]",[1856,1858],"[dispatch, params.id]",[1880,1882],[1172,1174],"[globalDispatch, onLoad]",[1366,1368],"[globalDispatch, id]",[1958,1960],[1921,1923],[1364,1366],[802,804],"[params.id]",[923,925],"[dispatch]",[1472,1474],[2324,2326],"[globalDispatch, onLoadClients]",[3918,3960],"[transaction.payment_mode, transaction.id, transaction, globalDispatch, globalState.currentUser?.role, globalState.currentUser?.branch?.id]",[1245,1266],"[branchOptions, transaction?.branch]",[1470,1472],"[setTransaction]",[1384,1441],"[client.payment_mode, client.payment_period, client.plan, clientState.plans, setClient]",[1494,1502],"[branch, setCommissioner]",[1322,1324],[1535,1537],"[branchDispatch, globalDispatch]",[1389,1391],[1687,1689],[1834,1836],[1065,1082],"[range, branchId, state?.currentUser?.role, getData]",[888,890]]