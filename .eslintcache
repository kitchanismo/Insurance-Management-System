[{"C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\App.tsx":"1","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\index.tsx":"2","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\pages\\signin\\index.tsx":"3","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\pages\\home\\index.tsx":"4","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\pages\\signup\\index.tsx":"5","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\common\\nav\\index.tsx":"6","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\providers\\index.tsx":"7","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\common\\myForm\\index.tsx":"8","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\utils\\http.tsx":"9","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\utils\\helper.tsx":"10","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\pages\\signin\\validator.tsx":"11","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\pages\\signup\\validator.tsx":"12","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\routes\\index.tsx":"13","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\pages\\notFound\\index.tsx":"14","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\routes\\auth.tsx":"15","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\pages\\contacts\\index.tsx":"16","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\routes\\guest.tsx":"17","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\common\\notification\\index.tsx":"18","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\providers\\contexts\\contactContext.tsx":"19","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\pages\\contacts\\validator.tsx":"20","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\pages\\contacts\\edit\\edit.tsx":"21","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\pages\\contacts\\new\\new.tsx":"22","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\providers\\services\\useContactService.tsx":"23","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\providers\\contexts\\authContext.tsx":"24","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\providers\\services\\useAuthService.tsx":"25","C:\\Users\\kitchan\\Desktop\\insurance\\cra-ts\\src\\index.tsx":"26","C:\\Users\\kitchan\\Desktop\\insurance\\cra-ts\\src\\components\\common\\nav\\index.tsx":"27","C:\\Users\\kitchan\\Desktop\\insurance\\cra-ts\\src\\providers\\index.tsx":"28","C:\\Users\\kitchan\\Desktop\\insurance\\cra-ts\\src\\App.tsx":"29"},{"size":578,"mtime":1609170779741,"results":"30","hashOfConfig":"31"},{"size":299,"mtime":1608974211560,"results":"32","hashOfConfig":"31"},{"size":1873,"mtime":1610246667558,"results":"33","hashOfConfig":"31"},{"size":152,"mtime":1609292351632,"results":"34","hashOfConfig":"31"},{"size":2151,"mtime":1609977754541,"results":"35","hashOfConfig":"31"},{"size":2915,"mtime":1610245329496,"results":"36","hashOfConfig":"31"},{"size":641,"mtime":1610093607764,"results":"37","hashOfConfig":"31"},{"size":3676,"mtime":1609176120149,"results":"38","hashOfConfig":"31"},{"size":919,"mtime":1610098109229,"results":"39","hashOfConfig":"31"},{"size":946,"mtime":1610097999783,"results":"40","hashOfConfig":"31"},{"size":357,"mtime":1608806416707,"results":"41","hashOfConfig":"31"},{"size":599,"mtime":1608806448340,"results":"42","hashOfConfig":"31"},{"size":1161,"mtime":1610245628651,"results":"43","hashOfConfig":"31"},{"size":129,"mtime":1608930500688,"results":"44","hashOfConfig":"31"},{"size":887,"mtime":1610245674284,"results":"45","hashOfConfig":"31"},{"size":4944,"mtime":1609925355384,"results":"46","hashOfConfig":"31"},{"size":882,"mtime":1610244384012,"results":"47","hashOfConfig":"31"},{"size":792,"mtime":1608972083955,"results":"48","hashOfConfig":"31"},{"size":758,"mtime":1609180962194,"results":"49","hashOfConfig":"31"},{"size":624,"mtime":1609177563043,"results":"50","hashOfConfig":"31"},{"size":2439,"mtime":1609176421748,"results":"51","hashOfConfig":"31"},{"size":2302,"mtime":1609178007960,"results":"52","hashOfConfig":"31"},{"size":2787,"mtime":1609921802477,"results":"53","hashOfConfig":"31"},{"size":469,"mtime":1610098211554,"results":"54","hashOfConfig":"31"},{"size":1526,"mtime":1610246625414,"results":"55","hashOfConfig":"31"},{"size":299,"mtime":1608974211560,"results":"56","hashOfConfig":"57"},{"size":587,"mtime":1610861205873,"results":"58","hashOfConfig":"57"},{"size":137,"mtime":1610860364669,"results":"59","hashOfConfig":"57"},{"size":200,"mtime":1610861343552,"results":"60","hashOfConfig":"57"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1nhz87l",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"65"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"73"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"65"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"73"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"65"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"65"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"65"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"73"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"73"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"126"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},"dm56g5",{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\App.tsx",[],"C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\index.tsx",[],["138","139"],"C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\pages\\signin\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\pages\\home\\index.tsx",[],["140","141"],"C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\pages\\signup\\index.tsx",[],["142","143"],"C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\common\\nav\\index.tsx",["144","145"],"import AuthContext, { AuthProps } from 'providers/contexts/authContext'\r\nimport * as React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { Label, Menu, MenuItemProps } from 'semantic-ui-react'\r\nimport { nameCapitalize } from 'utils/helper'\r\nimport styles from './index.module.css'\r\n\r\nconst Nav: React.FC = () => {\r\n  const history = useHistory()\r\n\r\n  const {\r\n    onSignout,\r\n    onSignoutAll,\r\n    currentUsername,\r\n  } = React.useContext<AuthProps>(AuthContext)\r\n\r\n  const [activeItem, setActiveItem] = React.useState<string | undefined>()\r\n\r\n  React.useEffect(() => {\r\n    setActiveItem(history.location.pathname.substring(1))\r\n  }, [])\r\n\r\n  const handleItemClick = (e: any, input: MenuItemProps) => {\r\n    setActiveItem(input.name)\r\n    history.replace('/' + input.name)\r\n  }\r\n\r\n  const renderMenus = () => {\r\n    if (currentUsername)\r\n      return (\r\n        <>\r\n          <Menu.Menu position='right'>\r\n            <Menu.Item\r\n              className={styles.nav}\r\n              name='contacts'\r\n              active={activeItem === 'contacts'}\r\n              onClick={handleItemClick}\r\n            >\r\n              Contacts\r\n            </Menu.Item>\r\n            <Menu.Item className={styles.nav}>\r\n              {nameCapitalize(currentUsername)}\r\n            </Menu.Item>\r\n            <Menu.Item\r\n              className={styles.nav}\r\n              position='right'\r\n              name='logout'\r\n              active={activeItem === 'logout'}\r\n              onClick={async () => {\r\n                if (await onSignout()) history.push('/signin')\r\n              }}\r\n            >\r\n              Logout\r\n            </Menu.Item>\r\n            <Menu.Item\r\n              className={styles.nav}\r\n              position='right'\r\n              name='logoutall'\r\n              active={activeItem === 'logoutall'}\r\n              onClick={async () => {\r\n                if (await onSignoutAll()) history.push('/signin')\r\n              }}\r\n            >\r\n              Logout All Devices\r\n            </Menu.Item>\r\n          </Menu.Menu>\r\n        </>\r\n      )\r\n\r\n    return (\r\n      <>\r\n        <Menu.Item\r\n          position='right'\r\n          name='signin'\r\n          className={styles.nav}\r\n          active={activeItem === 'signin'}\r\n          onClick={handleItemClick}\r\n        >\r\n          Sign In\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          name='signup'\r\n          className={styles.nav}\r\n          active={activeItem === 'signup'}\r\n          onClick={handleItemClick}\r\n        >\r\n          Sign Up\r\n        </Menu.Item>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Menu className={styles.nav} color='black' pointing secondary>\r\n      <Menu.Item\r\n        name='home'\r\n        className={styles.nav}\r\n        active={activeItem === 'home'}\r\n        onClick={handleItemClick}\r\n      >\r\n        Home\r\n      </Menu.Item>\r\n      {renderMenus()}\r\n    </Menu>\r\n  )\r\n}\r\n\r\nexport default Nav\r\n","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\providers\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\common\\myForm\\index.tsx",["146","147"],"import React from 'react'\nimport Joi from 'joi'\nimport globalStyles from 'styles.module.css'\nimport { Button, Dimmer, Form, Loader } from 'semantic-ui-react'\nimport Notification from '../notification'\n\nexport interface MyFormProps<T> {\n  state: [T, React.Dispatch<React.SetStateAction<T>>]\n  onSubmit: () => Promise<any>\n  validator?: {}\n  children?: (props: RenderProps) => JSX.Element\n  clearOnSubmit?: boolean\n  loadingMessage?: string\n  resolveMessage?: string\n  rejectMessage?: string\n}\n\nexport interface InputProps {\n  value?: string | Joi.StringSchema\n  name: string\n  placeholder?: string\n  type?: string\n  label: string\n}\n\nexport interface RenderProps {\n  myInput: (input: InputProps) => JSX.Element\n  myButton: () => JSX.Element\n  isSuccess: boolean\n}\n\nfunction MyForm<T>(props: MyFormProps<T>) {\n  const [data, setData] = props.state\n\n  const [isDisable, setIsDisable] = React.useState<boolean>(false)\n\n  const [isResolved, setIsResolved] = React.useState<boolean>(false)\n\n  const [isRejected, setIsRejected] = React.useState<boolean>(false)\n\n  const [errorMessage, setErrorMessage] = React.useState<string>(\n    props.rejectMessage || ''\n  )\n\n  const [errors, setErrors] = React.useState<any>()\n\n  const doChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value, name } = e.currentTarget\n    setData({\n      ...data,\n      [name]: value,\n    })\n  }\n\n  const onValidate = () => {\n    const schema = Joi.object(props.validator).options({ abortEarly: false })\n\n    const { error } = schema.validate(data)\n\n    if (!error) return null\n\n    const _errors: any = {}\n\n    error.details.forEach((item) => (_errors[item.path[0]] = item.message))\n\n    return _errors\n  }\n\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n\n    const hasErrors = onValidate()\n\n    setIsDisable(true)\n    setIsResolved(false)\n    setIsRejected(false)\n\n    if (hasErrors) {\n      setErrors(hasErrors)\n      setIsDisable(false)\n      return\n    }\n\n    return props\n      .onSubmit()\n      .then(() => {\n        setErrors({})\n        if (props.clearOnSubmit) setData({} as T)\n        setIsDisable(false)\n        setIsResolved(true)\n        setIsRejected(false)\n      })\n      .catch((error) => {\n        setIsDisable(false)\n        setIsRejected(true)\n        setIsResolved(false)\n        setErrorMessage(error.message)\n      })\n  }\n\n  const myInput = (input: InputProps) => {\n    return (\n      <Form.Field key={input.name}>\n        <Form.Input\n          type={input.type || 'text'}\n          value={input.value || ''}\n          onChange={doChange}\n          name={input.name}\n          placeholder={input.placeholder}\n          label={input.label}\n          error={\n            errors &&\n            errors[input.name] && {\n              content: errors[input.name],\n              pointing: 'above',\n            }\n          }\n        />\n      </Form.Field>\n    )\n  }\n\n  const myButton = () => {\n    return (\n      <Button\n        loading={isDisable}\n        fluid\n        disabled={isDisable}\n        color='purple'\n        type='submit'\n      >\n        Submit\n      </Button>\n    )\n  }\n\n  return (\n    <Form onSubmit={onSubmit} className={globalStyles.formContainer}>\n      {isResolved && (\n        <Notification color='purple' icon='check circle' header='Done!'>\n          {props.resolveMessage || 'Thank you...'}\n        </Notification>\n      )}\n      {isRejected && (\n        <Notification color='red' icon='warning circle' header='Warning!'>\n          {errorMessage}\n        </Notification>\n      )}\n      {props.children?.call(null, {\n        myInput,\n        myButton,\n      } as RenderProps)}\n    </Form>\n  )\n}\n\nexport default MyForm\n",["148","149"],"C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\utils\\http.tsx",["150"],"import axios, { AxiosError } from 'axios'\nimport { apiUrlProd, apiUrlDev } from 'configs/index.json'\nimport createAuthRefreshInterceptor from 'axios-auth-refresh'\n\n//intercept requests\naxios.interceptors.request.use((config) => {\n  config.baseURL =\n    process.env.NODE_ENV === 'development' ? apiUrlDev : apiUrlProd\n\n  config.withCredentials = true\n  return config\n})\n\naxios.interceptors.response.use(\n  (response) => response,\n  (error: AxiosError) => {\n    if (error.message === 'Network Error') {\n      throw Error(error.message)\n    }\n\n    throw error\n  },\n)\n\ncreateAuthRefreshInterceptor(\n  axios,\n  (failedRequest) => {\n    return axios.get('/auth/refresh-token').then(({ data }) => {\n      return Promise.resolve()\n    })\n  },\n  {\n    statusCodes: [403],\n    pauseInstanceWhileRefreshing: true,\n  },\n)\n\nexport default {\n  get: axios.get,\n  post: axios.post,\n  put: axios.put,\n  delete: axios.delete,\n  axios,\n}\n","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\utils\\helper.tsx",[],"C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\pages\\signin\\validator.tsx",[],"C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\pages\\signup\\validator.tsx",[],"C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\routes\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\pages\\notFound\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\routes\\auth.tsx",["151","152"],"import NotFound from 'components/pages/notFound'\r\nimport SignIn from 'components/pages/signin'\r\nimport AuthContext, { AuthProps } from 'providers/contexts/authContext'\r\nimport React, { useContext } from 'react'\r\nimport { Route, Redirect, RouteProps } from 'react-router-dom'\r\n\r\nconst AuthRoute: React.FC<RouteProps> = ({\r\n  path,\r\n  component: Component,\r\n  render,\r\n  ...rest\r\n}) => {\r\n  const { currentUsername } = useContext<AuthProps>(AuthContext)\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => {\r\n        if (!currentUsername)\r\n          return (\r\n            <Redirect\r\n              to={{\r\n                pathname: '/signin',\r\n                state: { from: props.location },\r\n              }}\r\n            />\r\n          )\r\n        return Component ? <Component {...props} /> : render?.call(null, props)\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nexport default AuthRoute\r\n","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\pages\\contacts\\index.tsx",["153","154","155"],"import Contact from 'models/contact'\r\nimport ContactContext, { ContactProps } from 'providers/contexts/contactContext'\r\nimport * as React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport {\r\n  Grid,\r\n  Header,\r\n  Table,\r\n  Image,\r\n  Icon,\r\n  Flag,\r\n  FlagNameValues,\r\n  Button,\r\n  Input,\r\n  Label,\r\n} from 'semantic-ui-react'\r\nimport { nameCapitalize } from 'utils/helper'\r\nimport styles from './index.module.css'\r\n\r\nconst Dashboard: React.FC = () => {\r\n  const {\r\n    getContacts,\r\n    searchContacts,\r\n    updateFavorite,\r\n    deleteContact,\r\n    setContacts,\r\n    contacts,\r\n  } = React.useContext<ContactProps>(ContactContext)\r\n\r\n  const history = useHistory()\r\n\r\n  const [query, setQuery] = React.useState<string>('')\r\n\r\n  const [list, setList] = React.useState<Contact[]>(contacts)\r\n\r\n  React.useEffect(() => {\r\n    onReload()\r\n  }, [])\r\n\r\n  React.useEffect(() => {\r\n    setList(searchContacts(query))\r\n  }, [query])\r\n\r\n  const tableHeader = () => {\r\n    return (\r\n      <Table.Header>\r\n        <Table.Row>\r\n          <Table.HeaderCell>Photo</Table.HeaderCell>\r\n          <Table.HeaderCell>Name / Number</Table.HeaderCell>\r\n          <Table.HeaderCell>Country</Table.HeaderCell>\r\n          <Table.HeaderCell>Favorite</Table.HeaderCell>\r\n          <Table.HeaderCell>Actions</Table.HeaderCell>\r\n        </Table.Row>\r\n      </Table.Header>\r\n    )\r\n  }\r\n\r\n  const onToggleFavorite = (contact: Contact) => {\r\n    updateFavorite(contact)\r\n\r\n    const _list = list.map((item) => {\r\n      if (item.id === contact.id) {\r\n        item.is_favorite = contact.is_favorite\r\n      }\r\n      return item\r\n    })\r\n    setList(_list)\r\n  }\r\n\r\n  const favoriteIcon = (contact: Contact) => {\r\n    const name = contact.is_favorite ? 'heart' : 'heart outline'\r\n    return (\r\n      <Button.Group>\r\n        <Button onClick={() => onToggleFavorite(contact)} basic icon>\r\n          <Icon color='purple' name={name}></Icon>\r\n        </Button>\r\n      </Button.Group>\r\n    )\r\n  }\r\n\r\n  const onReload = () => {\r\n    getContacts().then((contacts) => {\r\n      setList(contacts)\r\n    })\r\n  }\r\n\r\n  const tableRows = () => {\r\n    return (\r\n      <>\r\n        {list.map((contact) => (\r\n          <Table.Row key={contact.id.toString()}>\r\n            <Table.Cell textAlign='center'>\r\n              <Image\r\n                centered\r\n                src={contact.contact_picture}\r\n                rounded\r\n                size='mini'\r\n              />\r\n            </Table.Cell>\r\n            <Table.Cell>\r\n              <Header as='h4' image>\r\n                <Header.Content>\r\n                  {`${nameCapitalize(\r\n                    contact.last_name.toString(),\r\n                  )}, ${nameCapitalize(contact.first_name.toString())}`}\r\n                  <Header.Subheader>{contact.phone_number}</Header.Subheader>\r\n                </Header.Content>\r\n              </Header>\r\n            </Table.Cell>\r\n            <Table.Cell textAlign='center'>\r\n              <Flag name={contact.country_code as FlagNameValues}></Flag>\r\n            </Table.Cell>\r\n            <Table.Cell textAlign='center'>{favoriteIcon(contact)}</Table.Cell>\r\n            <Table.Cell textAlign='center'>\r\n              <Button.Group>\r\n                <Button\r\n                  onClick={() => {\r\n                    history.push('/contacts/' + contact.id)\r\n                  }}\r\n                  basic\r\n                  icon\r\n                >\r\n                  <Icon name='pencil' color='yellow' />\r\n                </Button>\r\n                <Button\r\n                  onClick={() => {\r\n                    deleteContact(+contact.id).then(() => onReload())\r\n                  }}\r\n                  basic\r\n                  icon\r\n                >\r\n                  <Icon name='trash' color='red' />\r\n                </Button>\r\n              </Button.Group>\r\n            </Table.Cell>\r\n          </Table.Row>\r\n        ))}\r\n      </>\r\n    )\r\n  }\r\n  return (\r\n    <Grid.Column className={styles.container}>\r\n      <Label as='a' color='black' size='large' ribbon>\r\n        Contact List\r\n      </Label>\r\n      <Grid.Row className={styles.addSearch}>\r\n        <span style={{ width: 300 }}>\r\n          <Input\r\n            fluid\r\n            size='small'\r\n            onChange={(e) => setQuery(e.currentTarget.value)}\r\n            value={query}\r\n            placeholder='Search name or number here...'\r\n          />\r\n        </span>\r\n        <span>\r\n          <Button onClick={onReload} icon='refresh' />\r\n          <Button\r\n            onClick={() => history.push('/contacts/new')}\r\n            color='purple'\r\n            icon='add'\r\n          />\r\n        </span>\r\n      </Grid.Row>\r\n      {list && list.length > 0 && (\r\n        <Table textAlign='center' className={styles.table} basic='very' celled>\r\n          {tableHeader()}\r\n          <Table.Body className={styles.body}>{tableRows()}</Table.Body>\r\n        </Table>\r\n      )}\r\n    </Grid.Column>\r\n  )\r\n}\r\n\r\nexport default Dashboard\r\n","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\routes\\guest.tsx",["156","157"],"import NotFound from 'components/pages/notFound'\r\nimport SignIn from 'components/pages/signin'\r\nimport AuthContext, { AuthProps } from 'providers/contexts/authContext'\r\nimport React, { useContext } from 'react'\r\nimport { Route, Redirect, RouteProps } from 'react-router-dom'\r\n\r\nconst GuestRoute: React.FC<RouteProps> = ({\r\n  path,\r\n  component: Component,\r\n  render,\r\n  ...rest\r\n}) => {\r\n  const { currentUsername } = useContext<AuthProps>(AuthContext)\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => {\r\n        if (currentUsername)\r\n          return (\r\n            <Redirect\r\n              to={{\r\n                pathname: '/',\r\n                state: { from: props.location },\r\n              }}\r\n            />\r\n          )\r\n        return Component ? <Component {...props} /> : render?.call(null, props)\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nexport default GuestRoute\r\n","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\common\\notification\\index.tsx",["158"],"import { loadavg } from 'os'\r\nimport * as React from 'react'\r\nimport { Icon, Message } from 'semantic-ui-react'\r\nimport {\r\n  SemanticCOLORS,\r\n  SemanticICONS,\r\n} from 'semantic-ui-react/dist/commonjs/generic'\r\n\r\nexport interface NotificationProps {\r\n  header?: string\r\n  loading?: boolean\r\n  icon?: SemanticICONS\r\n  color?: SemanticCOLORS\r\n}\r\n\r\nconst Notification: React.SFC<NotificationProps> = (props) => {\r\n  return (\r\n    <Message color={props.color || 'blue'} icon>\r\n      <Icon\r\n        name={props.icon || 'circle notched'}\r\n        loading={props.loading || false}\r\n      />\r\n      <Message.Content>\r\n        <Message.Header>{props.header || 'Just a second'}</Message.Header>\r\n        {props.children}\r\n      </Message.Content>\r\n    </Message>\r\n  )\r\n}\r\n\r\nexport default Notification\r\n","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\providers\\contexts\\contactContext.tsx",["159"],"import Joi from 'joi'\r\nimport Contact from 'models/contact'\r\nimport React from 'react'\r\n\r\nexport interface ContactProps {\r\n  contacts: Contact[]\r\n  setContacts: React.Dispatch<React.SetStateAction<Contact[]>>\r\n  contact: Contact\r\n  setContact: React.Dispatch<React.SetStateAction<Contact>>\r\n  getContacts: () => Promise<Contact[]>\r\n  addContact: (contact: Contact) => Promise<Contact>\r\n  getContact: (id: string) => Promise<Contact>\r\n  searchContacts: (query: string) => Contact[]\r\n  updateFavorite: (contact: Contact) => Promise<void>\r\n  updateContact: (contact: Contact) => Promise<Contact>\r\n  deleteContact: (id: number) => Promise<Contact>\r\n  (): ContactProps\r\n}\r\n\r\nconst ContactContext = React.createContext<any>(null)\r\n\r\nexport default ContactContext\r\n","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\pages\\contacts\\validator.tsx",[],["160","161"],"C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\pages\\contacts\\edit\\edit.tsx",["162"],"import MyForm, { MyFormProps } from 'components/common/myForm'\r\nimport Contact from 'models/contact'\r\nimport * as React from 'react'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport { Grid, Label, Segment } from 'semantic-ui-react'\r\nimport validator from '../validator'\r\nimport styles from './edit.module.css'\r\nimport ContactContext, { ContactProps } from 'providers/contexts/contactContext'\r\n\r\nexport interface EditContactProps {}\r\n\r\nconst EditContact: React.FC<EditContactProps> = () => {\r\n  const { id } = useParams<{ id: string }>()\r\n\r\n  const history = useHistory()\r\n\r\n  const {\r\n    contact,\r\n    setContact,\r\n    getContact,\r\n    updateContact,\r\n  } = React.useContext<ContactProps>(ContactContext)\r\n\r\n  React.useEffect(() => {\r\n    getContact(id)\r\n      .then()\r\n      .catch((error) => {\r\n        if (error?.response?.status === 404) {\r\n          history.push('/not-found')\r\n        }\r\n      })\r\n  }, [])\r\n\r\n  const onSubmit = () => {\r\n    return updateContact(contact).then((contact) => console.log(contact))\r\n  }\r\n\r\n  const formProps: MyFormProps<Contact> = {\r\n    state: [contact, setContact],\r\n    validator,\r\n    onSubmit,\r\n  }\r\n\r\n  return (\r\n    <Grid.Column className={styles.container}>\r\n      <Segment raised>\r\n        <Label as='a' color='black' size='large' ribbon>\r\n          Edit Contact\r\n        </Label>\r\n        <MyForm {...formProps}>\r\n          {({ myInput, myButton }) => (\r\n            <>\r\n              {myInput({\r\n                value: contact.first_name,\r\n                name: 'first_name',\r\n                label: 'First Name',\r\n              })}\r\n              {myInput({\r\n                value: contact.last_name,\r\n                name: 'last_name',\r\n                label: 'Last Name',\r\n              })}\r\n              {myInput({\r\n                value: contact.phone_number,\r\n                name: 'phone_number',\r\n                label: 'Phone Nuumber',\r\n              })}\r\n              {myInput({\r\n                value: contact.country_code,\r\n                name: 'country_code',\r\n                label: 'Country Code',\r\n              })}\r\n\r\n              {myInput({\r\n                value: contact.contact_picture,\r\n                name: 'contact_picture',\r\n                label: 'Contact Picture',\r\n              })}\r\n\r\n              {myButton()}\r\n            </>\r\n          )}\r\n        </MyForm>\r\n      </Segment>\r\n    </Grid.Column>\r\n  )\r\n}\r\n\r\nexport default EditContact\r\n","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\components\\pages\\contacts\\new\\new.tsx",["163","164","165"],"import MyForm, { MyFormProps } from 'components/common/myForm'\r\nimport Contact from 'models/contact'\r\nimport * as React from 'react'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport { Grid, Label, Segment } from 'semantic-ui-react'\r\nimport validator from '../validator'\r\nimport styles from './new.module.css'\r\nimport ContactContext, { ContactProps } from 'providers/contexts/contactContext'\r\n\r\nexport interface EditContactProps {}\r\n\r\nconst NewContact: React.FC<EditContactProps> = () => {\r\n  const history = useHistory()\r\n\r\n  const { contact, setContact, addContact } = React.useContext<ContactProps>(\r\n    ContactContext\r\n  )\r\n\r\n  const onSubmit = () => {\r\n    return addContact(contact).then(() =>\r\n      setContact({\r\n        is_favorite: false,\r\n      } as Contact)\r\n    )\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    setContact({\r\n      is_favorite: false,\r\n    } as Contact)\r\n  }, [])\r\n\r\n  const formProps: MyFormProps<Contact> = {\r\n    state: [contact, setContact],\r\n    validator,\r\n    onSubmit,\r\n  }\r\n\r\n  return (\r\n    <Grid.Column className={styles.container}>\r\n      <Segment raised>\r\n        <Label as='a' color='black' size='large' ribbon>\r\n          Add New Contact\r\n        </Label>\r\n        <MyForm {...formProps}>\r\n          {({ myInput, myButton }) => (\r\n            <>\r\n              {myInput({\r\n                value: contact.first_name,\r\n                name: 'first_name',\r\n                label: 'First Name',\r\n              })}\r\n              {myInput({\r\n                value: contact.last_name,\r\n                name: 'last_name',\r\n                label: 'Last Name',\r\n              })}\r\n              {myInput({\r\n                value: contact.phone_number,\r\n                name: 'phone_number',\r\n                label: 'Phone Nuumber',\r\n              })}\r\n              {myInput({\r\n                value: contact.country_code,\r\n                name: 'country_code',\r\n                label: 'Country Code',\r\n              })}\r\n\r\n              {myInput({\r\n                value: contact.contact_picture,\r\n                name: 'contact_picture',\r\n                label: 'Contact Picture',\r\n              })}\r\n\r\n              {myButton()}\r\n            </>\r\n          )}\r\n        </MyForm>\r\n      </Segment>\r\n    </Grid.Column>\r\n  )\r\n}\r\n\r\nexport default NewContact\r\n","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\providers\\services\\useContactService.tsx",["166","167","168"],"import Contact from 'models/contact'\r\nimport { ContactProps } from 'providers/contexts/contactContext'\r\nimport React, { useEffect, useState } from 'react'\r\nimport http from 'utils/http'\r\n\r\nconst useContactService = () => {\r\n  const [contacts, setContacts] = useState<Contact[]>([])\r\n\r\n  const [contact, setContact] = useState<Contact>({\r\n    id: 0,\r\n    first_name: '',\r\n    last_name: '',\r\n    phone_number: '',\r\n    country_code: '',\r\n    contact_picture: '',\r\n    is_favorite: false,\r\n  })\r\n\r\n  const getContacts = () => {\r\n    return http\r\n      .get<Contact[]>('/contacts/')\r\n      .then((data) => {\r\n        setContacts(data.data as Contact[])\r\n        return data.data as Contact[]\r\n      })\r\n      .catch((error) => {\r\n        console.log(error)\r\n        return [] as Contact[]\r\n      })\r\n  }\r\n\r\n  const getContact = (id: string) => {\r\n    return http\r\n      .get<Contact>('/contacts/' + id)\r\n      .then((data) => {\r\n        setContact(data.data as Contact)\r\n        return data.data as Contact\r\n      })\r\n      .catch((error) => {\r\n        throw error\r\n      })\r\n  }\r\n\r\n  const addContact = (contact: Contact) => {\r\n    return http\r\n      .post<Contact>('/contacts/', contact)\r\n      .then((data) => {\r\n        return data.data as Contact\r\n      })\r\n      .catch((error) => {\r\n        throw error\r\n      })\r\n  }\r\n\r\n  const deleteContact = (id: number) => {\r\n    const _temp = contacts\r\n    const _contacts = contacts.filter((contact) => contact.id != id)\r\n    setContacts(_contacts)\r\n    return http\r\n      .delete<Contact>('/contacts/' + id)\r\n      .then((data) => {\r\n        return data.data as Contact\r\n      })\r\n      .catch((error) => {\r\n        setContacts(_temp)\r\n        throw error\r\n      })\r\n  }\r\n\r\n  const updateContact = (contact: Contact) => {\r\n    return http\r\n      .put<Contact>('/contacts/' + contact.id, contact)\r\n      .then((data) => {\r\n        return data.data as Contact\r\n      })\r\n      .catch((error) => {\r\n        throw error\r\n      })\r\n  }\r\n\r\n  const searchContacts = (query: string) => {\r\n    return contacts.filter(\r\n      (contact) =>\r\n        contact.first_name.toString().includes(query) ||\r\n        contact.last_name.toString().includes(query) ||\r\n        contact.phone_number.toString().includes(query),\r\n    )\r\n  }\r\n\r\n  const updateFavorite = (contact: Contact) => {\r\n    contact.is_favorite = !contact.is_favorite\r\n    return http\r\n      .put('/contacts/' + contact.id, contact)\r\n      .then((data) => {})\r\n      .catch((error) => {\r\n        throw error\r\n      })\r\n  }\r\n\r\n  return {\r\n    contacts,\r\n    setContacts,\r\n    contact,\r\n    setContact,\r\n    getContact,\r\n    getContacts,\r\n    addContact,\r\n    searchContacts,\r\n    updateFavorite,\r\n    updateContact,\r\n    deleteContact,\r\n  } as ContactProps\r\n}\r\n\r\nexport default useContactService\r\n","C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\providers\\contexts\\authContext.tsx",["169"],"import Joi from 'joi'\r\nimport User from 'models/user'\r\nimport React from 'react'\r\n\r\nexport interface AuthProps {\r\n  user: User\r\n  setUser: React.Dispatch<React.SetStateAction<User>>\r\n  onRegister: (user: User) => Promise<any>\r\n  onSignin: (user: User) => Promise<any>\r\n  onSignout: () => Promise<any>\r\n  onSignoutAll: () => Promise<any>\r\n  currentUsername: string\r\n  (): AuthProps\r\n}\r\n\r\nconst AuthContext = React.createContext<any>(null)\r\n\r\nexport default AuthContext\r\n",["170","171"],"C:\\Users\\kitchan\\Desktop\\react-projects\\cra-ts\\src\\providers\\services\\useAuthService.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\cra-ts\\src\\index.tsx",[],["172","173"],"C:\\Users\\kitchan\\Desktop\\insurance\\cra-ts\\src\\components\\common\\nav\\index.tsx",["174"],"C:\\Users\\kitchan\\Desktop\\insurance\\cra-ts\\src\\providers\\index.tsx",[],"C:\\Users\\kitchan\\Desktop\\insurance\\cra-ts\\src\\App.tsx",[],{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","replacedBy":"178"},{"ruleId":"175","replacedBy":"179"},{"ruleId":"177","replacedBy":"180"},{"ruleId":"175","replacedBy":"181"},{"ruleId":"177","replacedBy":"182"},{"ruleId":"183","severity":1,"message":"184","line":4,"column":10,"nodeType":"185","messageId":"186","endLine":4,"endColumn":15},{"ruleId":"187","severity":1,"message":"188","line":21,"column":6,"nodeType":"189","endLine":21,"endColumn":8,"suggestions":"190"},{"ruleId":"183","severity":1,"message":"191","line":4,"column":18,"nodeType":"185","messageId":"186","endLine":4,"endColumn":24},{"ruleId":"183","severity":1,"message":"192","line":4,"column":32,"nodeType":"185","messageId":"186","endLine":4,"endColumn":38},{"ruleId":"175","replacedBy":"193"},{"ruleId":"177","replacedBy":"194"},{"ruleId":"195","severity":1,"message":"196","line":38,"column":1,"nodeType":"197","endLine":44,"endColumn":2},{"ruleId":"183","severity":1,"message":"198","line":1,"column":8,"nodeType":"185","messageId":"186","endLine":1,"endColumn":16},{"ruleId":"183","severity":1,"message":"199","line":2,"column":8,"nodeType":"185","messageId":"186","endLine":2,"endColumn":14},{"ruleId":"183","severity":1,"message":"200","line":26,"column":5,"nodeType":"185","messageId":"186","endLine":26,"endColumn":16},{"ruleId":"187","severity":1,"message":"201","line":38,"column":6,"nodeType":"189","endLine":38,"endColumn":8,"suggestions":"202"},{"ruleId":"187","severity":1,"message":"203","line":42,"column":6,"nodeType":"189","endLine":42,"endColumn":13,"suggestions":"204"},{"ruleId":"183","severity":1,"message":"198","line":1,"column":8,"nodeType":"185","messageId":"186","endLine":1,"endColumn":16},{"ruleId":"183","severity":1,"message":"199","line":2,"column":8,"nodeType":"185","messageId":"186","endLine":2,"endColumn":14},{"ruleId":"183","severity":1,"message":"205","line":1,"column":10,"nodeType":"185","messageId":"186","endLine":1,"endColumn":17},{"ruleId":"183","severity":1,"message":"206","line":1,"column":8,"nodeType":"185","messageId":"186","endLine":1,"endColumn":11},{"ruleId":"175","replacedBy":"207"},{"ruleId":"177","replacedBy":"208"},{"ruleId":"187","severity":1,"message":"209","line":32,"column":6,"nodeType":"189","endLine":32,"endColumn":8,"suggestions":"210"},{"ruleId":"183","severity":1,"message":"211","line":4,"column":22,"nodeType":"185","messageId":"186","endLine":4,"endColumn":31},{"ruleId":"183","severity":1,"message":"212","line":13,"column":9,"nodeType":"185","messageId":"186","endLine":13,"endColumn":16},{"ruleId":"187","severity":1,"message":"213","line":31,"column":6,"nodeType":"189","endLine":31,"endColumn":8,"suggestions":"214"},{"ruleId":"183","severity":1,"message":"215","line":3,"column":8,"nodeType":"185","messageId":"186","endLine":3,"endColumn":13},{"ruleId":"183","severity":1,"message":"216","line":3,"column":17,"nodeType":"185","messageId":"186","endLine":3,"endColumn":26},{"ruleId":"217","severity":1,"message":"218","line":57,"column":63,"nodeType":"219","messageId":"220","endLine":57,"endColumn":65},{"ruleId":"183","severity":1,"message":"206","line":1,"column":8,"nodeType":"185","messageId":"186","endLine":1,"endColumn":11},{"ruleId":"175","replacedBy":"221"},{"ruleId":"177","replacedBy":"222"},{"ruleId":"175","replacedBy":"223"},{"ruleId":"177","replacedBy":"224"},{"ruleId":"183","severity":1,"message":"225","line":10,"column":8,"nodeType":"185","messageId":"186","endLine":10,"endColumn":14},"no-native-reassign",["226"],"no-negated-in-lhs",["227"],["226"],["227"],["226"],["227"],"@typescript-eslint/no-unused-vars","'Label' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'history.location.pathname'. Either include it or remove the dependency array.","ArrayExpression",["228"],"'Dimmer' is defined but never used.","'Loader' is defined but never used.",["226"],["227"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'NotFound' is defined but never used.","'SignIn' is defined but never used.","'setContacts' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'onReload'. Either include it or remove the dependency array.",["229"],"React Hook React.useEffect has a missing dependency: 'searchContacts'. Either include it or remove the dependency array.",["230"],"'loadavg' is defined but never used.","'Joi' is defined but never used.",["226"],["227"],"React Hook React.useEffect has missing dependencies: 'getContact', 'history', and 'id'. Either include them or remove the dependency array.",["231"],"'useParams' is defined but never used.","'history' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'setContact'. Either include it or remove the dependency array.",["232"],"'React' is defined but never used.","'useEffect' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["226"],["227"],["226"],["227"],"'styles' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"233","fix":"234"},{"desc":"235","fix":"236"},{"desc":"237","fix":"238"},{"desc":"239","fix":"240"},{"desc":"241","fix":"242"},"Update the dependencies array to be: [history.location.pathname]",{"range":"243","text":"244"},"Update the dependencies array to be: [onReload]",{"range":"245","text":"246"},"Update the dependencies array to be: [query, searchContacts]",{"range":"247","text":"248"},"Update the dependencies array to be: [getContact, history, id]",{"range":"249","text":"250"},"Update the dependencies array to be: [setContact]",{"range":"251","text":"252"},[658,660],"[history.location.pathname]",[857,859],"[onReload]",[932,939],"[query, searchContacts]",[927,929],"[getContact, history, id]",[898,900],"[setContact]"]